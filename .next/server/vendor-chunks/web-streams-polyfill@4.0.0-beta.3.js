"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web-streams-polyfill@4.0.0-beta.3";
exports.ids = ["vendor-chunks/web-streams-polyfill@4.0.0-beta.3"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/web-streams-polyfill@4.0.0-beta.3/node_modules/web-streams-polyfill/dist/ponyfill.mjs":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/web-streams-polyfill@4.0.0-beta.3/node_modules/web-streams-polyfill/dist/ponyfill.mjs ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteLengthQueuingStrategy: () => (/* binding */ ByteLengthQueuingStrategy),\n/* harmony export */   CountQueuingStrategy: () => (/* binding */ CountQueuingStrategy),\n/* harmony export */   ReadableByteStreamController: () => (/* binding */ ReadableByteStreamController),\n/* harmony export */   ReadableStream: () => (/* binding */ ReadableStream),\n/* harmony export */   ReadableStreamBYOBReader: () => (/* binding */ ReadableStreamBYOBReader),\n/* harmony export */   ReadableStreamBYOBRequest: () => (/* binding */ ReadableStreamBYOBRequest),\n/* harmony export */   ReadableStreamDefaultController: () => (/* binding */ ReadableStreamDefaultController),\n/* harmony export */   ReadableStreamDefaultReader: () => (/* binding */ ReadableStreamDefaultReader),\n/* harmony export */   TransformStream: () => (/* binding */ TransformStream),\n/* harmony export */   TransformStreamDefaultController: () => (/* binding */ TransformStreamDefaultController),\n/* harmony export */   WritableStream: () => (/* binding */ WritableStream),\n/* harmony export */   WritableStreamDefaultController: () => (/* binding */ WritableStreamDefaultController),\n/* harmony export */   WritableStreamDefaultWriter: () => (/* binding */ WritableStreamDefaultWriter)\n/* harmony export */ });\n/**\n * @license\n * web-streams-polyfill v4.0.0-beta.3\n * Copyright 2021 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */ const e = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? Symbol : (e)=>`Symbol(${e})`;\nfunction t() {}\nfunction r(e) {\n    return \"object\" == typeof e && null !== e || \"function\" == typeof e;\n}\nconst o = t;\nfunction n(e, t) {\n    try {\n        Object.defineProperty(e, \"name\", {\n            value: t,\n            configurable: !0\n        });\n    } catch (e) {}\n}\nconst a = Promise, i = Promise.prototype.then, l = Promise.resolve.bind(a), s = Promise.reject.bind(a);\nfunction u(e) {\n    return new a(e);\n}\nfunction c(e) {\n    return l(e);\n}\nfunction d(e) {\n    return s(e);\n}\nfunction f(e, t, r) {\n    return i.call(e, t, r);\n}\nfunction b(e, t, r) {\n    f(f(e, t, r), void 0, o);\n}\nfunction h(e, t) {\n    b(e, t);\n}\nfunction _(e, t) {\n    b(e, void 0, t);\n}\nfunction p(e, t, r) {\n    return f(e, t, r);\n}\nfunction m(e) {\n    f(e, void 0, o);\n}\nlet y = (e)=>{\n    if (\"function\" == typeof queueMicrotask) y = queueMicrotask;\n    else {\n        const e = c(void 0);\n        y = (t)=>f(e, t);\n    }\n    return y(e);\n};\nfunction g(e, t, r) {\n    if (\"function\" != typeof e) throw new TypeError(\"Argument is not a function\");\n    return Function.prototype.apply.call(e, t, r);\n}\nfunction w(e, t, r) {\n    try {\n        return c(g(e, t, r));\n    } catch (e) {\n        return d(e);\n    }\n}\nclass S {\n    constructor(){\n        this._cursor = 0, this._size = 0, this._front = {\n            _elements: [],\n            _next: void 0\n        }, this._back = this._front, this._cursor = 0, this._size = 0;\n    }\n    get length() {\n        return this._size;\n    }\n    push(e) {\n        const t = this._back;\n        let r = t;\n        16383 === t._elements.length && (r = {\n            _elements: [],\n            _next: void 0\n        }), t._elements.push(e), r !== t && (this._back = r, t._next = r), ++this._size;\n    }\n    shift() {\n        const e = this._front;\n        let t = e;\n        const r = this._cursor;\n        let o = r + 1;\n        const n = e._elements, a = n[r];\n        return 16384 === o && (t = e._next, o = 0), --this._size, this._cursor = o, e !== t && (this._front = t), n[r] = void 0, a;\n    }\n    forEach(e) {\n        let t = this._cursor, r = this._front, o = r._elements;\n        for(; !(t === o.length && void 0 === r._next || t === o.length && (r = r._next, o = r._elements, t = 0, 0 === o.length));)e(o[t]), ++t;\n    }\n    peek() {\n        const e = this._front, t = this._cursor;\n        return e._elements[t];\n    }\n}\nconst v = e(\"[[AbortSteps]]\"), R = e(\"[[ErrorSteps]]\"), T = e(\"[[CancelSteps]]\"), q = e(\"[[PullSteps]]\"), C = e(\"[[ReleaseSteps]]\");\nfunction E(e, t) {\n    e._ownerReadableStream = t, t._reader = e, \"readable\" === t._state ? O(e) : \"closed\" === t._state ? function(e) {\n        O(e), j(e);\n    }(e) : B(e, t._storedError);\n}\nfunction P(e, t) {\n    return Gt(e._ownerReadableStream, t);\n}\nfunction W(e) {\n    const t = e._ownerReadableStream;\n    \"readable\" === t._state ? A(e, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")) : function(e, t) {\n        B(e, t);\n    }(e, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")), t._readableStreamController[C](), t._reader = void 0, e._ownerReadableStream = void 0;\n}\nfunction k(e) {\n    return new TypeError(\"Cannot \" + e + \" a stream using a released reader\");\n}\nfunction O(e) {\n    e._closedPromise = u((t, r)=>{\n        e._closedPromise_resolve = t, e._closedPromise_reject = r;\n    });\n}\nfunction B(e, t) {\n    O(e), A(e, t);\n}\nfunction A(e, t) {\n    void 0 !== e._closedPromise_reject && (m(e._closedPromise), e._closedPromise_reject(t), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0);\n}\nfunction j(e) {\n    void 0 !== e._closedPromise_resolve && (e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0);\n}\nconst z = Number.isFinite || function(e) {\n    return \"number\" == typeof e && isFinite(e);\n}, L = Math.trunc || function(e) {\n    return e < 0 ? Math.ceil(e) : Math.floor(e);\n};\nfunction F(e, t) {\n    if (void 0 !== e && \"object\" != typeof (r = e) && \"function\" != typeof r) throw new TypeError(`${t} is not an object.`);\n    var r;\n}\nfunction I(e, t) {\n    if (\"function\" != typeof e) throw new TypeError(`${t} is not a function.`);\n}\nfunction D(e, t) {\n    if (!function(e) {\n        return \"object\" == typeof e && null !== e || \"function\" == typeof e;\n    }(e)) throw new TypeError(`${t} is not an object.`);\n}\nfunction $(e, t, r) {\n    if (void 0 === e) throw new TypeError(`Parameter ${t} is required in '${r}'.`);\n}\nfunction M(e, t, r) {\n    if (void 0 === e) throw new TypeError(`${t} is required in '${r}'.`);\n}\nfunction Y(e) {\n    return Number(e);\n}\nfunction Q(e) {\n    return 0 === e ? 0 : e;\n}\nfunction N(e, t) {\n    const r = Number.MAX_SAFE_INTEGER;\n    let o = Number(e);\n    if (o = Q(o), !z(o)) throw new TypeError(`${t} is not a finite number`);\n    if (o = function(e) {\n        return Q(L(e));\n    }(o), o < 0 || o > r) throw new TypeError(`${t} is outside the accepted range of 0 to ${r}, inclusive`);\n    return z(o) && 0 !== o ? o : 0;\n}\nfunction H(e) {\n    if (!r(e)) return !1;\n    if (\"function\" != typeof e.getReader) return !1;\n    try {\n        return \"boolean\" == typeof e.locked;\n    } catch (e) {\n        return !1;\n    }\n}\nfunction x(e) {\n    if (!r(e)) return !1;\n    if (\"function\" != typeof e.getWriter) return !1;\n    try {\n        return \"boolean\" == typeof e.locked;\n    } catch (e) {\n        return !1;\n    }\n}\nfunction V(e, t) {\n    if (!Vt(e)) throw new TypeError(`${t} is not a ReadableStream.`);\n}\nfunction U(e, t) {\n    e._reader._readRequests.push(t);\n}\nfunction G(e, t, r) {\n    const o = e._reader._readRequests.shift();\n    r ? o._closeSteps() : o._chunkSteps(t);\n}\nfunction X(e) {\n    return e._reader._readRequests.length;\n}\nfunction J(e) {\n    const t = e._reader;\n    return void 0 !== t && !!K(t);\n}\nclass ReadableStreamDefaultReader {\n    constructor(e){\n        if ($(e, 1, \"ReadableStreamDefaultReader\"), V(e, \"First parameter\"), Ut(e)) throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n        E(this, e), this._readRequests = new S;\n    }\n    get closed() {\n        return K(this) ? this._closedPromise : d(ee(\"closed\"));\n    }\n    cancel(e) {\n        return K(this) ? void 0 === this._ownerReadableStream ? d(k(\"cancel\")) : P(this, e) : d(ee(\"cancel\"));\n    }\n    read() {\n        if (!K(this)) return d(ee(\"read\"));\n        if (void 0 === this._ownerReadableStream) return d(k(\"read from\"));\n        let e, t;\n        const r = u((r, o)=>{\n            e = r, t = o;\n        });\n        return function(e, t) {\n            const r = e._ownerReadableStream;\n            r._disturbed = !0, \"closed\" === r._state ? t._closeSteps() : \"errored\" === r._state ? t._errorSteps(r._storedError) : r._readableStreamController[q](t);\n        }(this, {\n            _chunkSteps: (t)=>e({\n                    value: t,\n                    done: !1\n                }),\n            _closeSteps: ()=>e({\n                    value: void 0,\n                    done: !0\n                }),\n            _errorSteps: (e)=>t(e)\n        }), r;\n    }\n    releaseLock() {\n        if (!K(this)) throw ee(\"releaseLock\");\n        void 0 !== this._ownerReadableStream && function(e) {\n            W(e);\n            const t = new TypeError(\"Reader was released\");\n            Z(e, t);\n        }(this);\n    }\n}\nfunction K(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_readRequests\") && e instanceof ReadableStreamDefaultReader;\n}\nfunction Z(e, t) {\n    const r = e._readRequests;\n    e._readRequests = new S, r.forEach((e)=>{\n        e._errorSteps(t);\n    });\n}\nfunction ee(e) {\n    return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`);\n}\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n    cancel: {\n        enumerable: !0\n    },\n    read: {\n        enumerable: !0\n    },\n    releaseLock: {\n        enumerable: !0\n    },\n    closed: {\n        enumerable: !0\n    }\n}), n(ReadableStreamDefaultReader.prototype.cancel, \"cancel\"), n(ReadableStreamDefaultReader.prototype.read, \"read\"), n(ReadableStreamDefaultReader.prototype.releaseLock, \"releaseLock\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStreamDefaultReader.prototype, e.toStringTag, {\n    value: \"ReadableStreamDefaultReader\",\n    configurable: !0\n});\nclass te {\n    constructor(e, t){\n        this._ongoingPromise = void 0, this._isFinished = !1, this._reader = e, this._preventCancel = t;\n    }\n    next() {\n        const e = ()=>this._nextSteps();\n        return this._ongoingPromise = this._ongoingPromise ? p(this._ongoingPromise, e, e) : e(), this._ongoingPromise;\n    }\n    return(e) {\n        const t = ()=>this._returnSteps(e);\n        return this._ongoingPromise ? p(this._ongoingPromise, t, t) : t();\n    }\n    _nextSteps() {\n        if (this._isFinished) return Promise.resolve({\n            value: void 0,\n            done: !0\n        });\n        const e = this._reader;\n        return void 0 === e ? d(k(\"iterate\")) : f(e.read(), (e)=>{\n            var t;\n            return this._ongoingPromise = void 0, e.done && (this._isFinished = !0, null === (t = this._reader) || void 0 === t || t.releaseLock(), this._reader = void 0), e;\n        }, (e)=>{\n            var t;\n            throw this._ongoingPromise = void 0, this._isFinished = !0, null === (t = this._reader) || void 0 === t || t.releaseLock(), this._reader = void 0, e;\n        });\n    }\n    _returnSteps(e) {\n        if (this._isFinished) return Promise.resolve({\n            value: e,\n            done: !0\n        });\n        this._isFinished = !0;\n        const t = this._reader;\n        if (void 0 === t) return d(k(\"finish iterating\"));\n        if (this._reader = void 0, !this._preventCancel) {\n            const r = t.cancel(e);\n            return t.releaseLock(), p(r, ()=>({\n                    value: e,\n                    done: !0\n                }));\n        }\n        return t.releaseLock(), c({\n            value: e,\n            done: !0\n        });\n    }\n}\nconst re = {\n    next () {\n        return oe(this) ? this._asyncIteratorImpl.next() : d(ne(\"next\"));\n    },\n    return (e) {\n        return oe(this) ? this._asyncIteratorImpl.return(e) : d(ne(\"return\"));\n    }\n};\nfunction oe(e) {\n    if (!r(e)) return !1;\n    if (!Object.prototype.hasOwnProperty.call(e, \"_asyncIteratorImpl\")) return !1;\n    try {\n        return e._asyncIteratorImpl instanceof te;\n    } catch (e) {\n        return !1;\n    }\n}\nfunction ne(e) {\n    return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`);\n}\n\"symbol\" == typeof e.asyncIterator && Object.defineProperty(re, e.asyncIterator, {\n    value () {\n        return this;\n    },\n    writable: !0,\n    configurable: !0\n});\nconst ae = Number.isNaN || function(e) {\n    return e != e;\n};\nfunction ie(e, t, r, o, n) {\n    new Uint8Array(e).set(new Uint8Array(r, o, n), t);\n}\nfunction le(e) {\n    const t = function(e, t, r) {\n        if (e.slice) return e.slice(t, r);\n        const o = r - t, n = new ArrayBuffer(o);\n        return ie(n, 0, e, t, o), n;\n    }(e.buffer, e.byteOffset, e.byteOffset + e.byteLength);\n    return new Uint8Array(t);\n}\nfunction se(e) {\n    const t = e._queue.shift();\n    return e._queueTotalSize -= t.size, e._queueTotalSize < 0 && (e._queueTotalSize = 0), t.value;\n}\nfunction ue(e, t, r) {\n    if (\"number\" != typeof (o = r) || ae(o) || o < 0 || r === 1 / 0) throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");\n    var o;\n    e._queue.push({\n        value: t,\n        size: r\n    }), e._queueTotalSize += r;\n}\nfunction ce(e) {\n    e._queue = new S, e._queueTotalSize = 0;\n}\nclass ReadableStreamBYOBRequest {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get view() {\n        if (!fe(this)) throw Be(\"view\");\n        return this._view;\n    }\n    respond(e) {\n        if (!fe(this)) throw Be(\"respond\");\n        if ($(e, 1, \"respond\"), e = N(e, \"First parameter\"), void 0 === this._associatedReadableByteStreamController) throw new TypeError(\"This BYOB request has been invalidated\");\n        this._view.buffer, function(e, t) {\n            const r = e._pendingPullIntos.peek();\n            if (\"closed\" === e._controlledReadableByteStream._state) {\n                if (0 !== t) throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\");\n            } else {\n                if (0 === t) throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");\n                if (r.bytesFilled + t > r.byteLength) throw new RangeError(\"bytesWritten out of range\");\n            }\n            r.buffer = r.buffer, qe(e, t);\n        }(this._associatedReadableByteStreamController, e);\n    }\n    respondWithNewView(e) {\n        if (!fe(this)) throw Be(\"respondWithNewView\");\n        if ($(e, 1, \"respondWithNewView\"), !ArrayBuffer.isView(e)) throw new TypeError(\"You can only respond with array buffer views\");\n        if (void 0 === this._associatedReadableByteStreamController) throw new TypeError(\"This BYOB request has been invalidated\");\n        e.buffer, function(e, t) {\n            const r = e._pendingPullIntos.peek();\n            if (\"closed\" === e._controlledReadableByteStream._state) {\n                if (0 !== t.byteLength) throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\");\n            } else if (0 === t.byteLength) throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");\n            if (r.byteOffset + r.bytesFilled !== t.byteOffset) throw new RangeError(\"The region specified by view does not match byobRequest\");\n            if (r.bufferByteLength !== t.buffer.byteLength) throw new RangeError(\"The buffer of view has different capacity than byobRequest\");\n            if (r.bytesFilled + t.byteLength > r.byteLength) throw new RangeError(\"The region specified by view is larger than byobRequest\");\n            const o = t.byteLength;\n            r.buffer = t.buffer, qe(e, o);\n        }(this._associatedReadableByteStreamController, e);\n    }\n}\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n    respond: {\n        enumerable: !0\n    },\n    respondWithNewView: {\n        enumerable: !0\n    },\n    view: {\n        enumerable: !0\n    }\n}), n(ReadableStreamBYOBRequest.prototype.respond, \"respond\"), n(ReadableStreamBYOBRequest.prototype.respondWithNewView, \"respondWithNewView\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStreamBYOBRequest.prototype, e.toStringTag, {\n    value: \"ReadableStreamBYOBRequest\",\n    configurable: !0\n});\nclass ReadableByteStreamController {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get byobRequest() {\n        if (!de(this)) throw Ae(\"byobRequest\");\n        return function(e) {\n            if (null === e._byobRequest && e._pendingPullIntos.length > 0) {\n                const t = e._pendingPullIntos.peek(), r = new Uint8Array(t.buffer, t.byteOffset + t.bytesFilled, t.byteLength - t.bytesFilled), o = Object.create(ReadableStreamBYOBRequest.prototype);\n                !function(e, t, r) {\n                    e._associatedReadableByteStreamController = t, e._view = r;\n                }(o, e, r), e._byobRequest = o;\n            }\n            return e._byobRequest;\n        }(this);\n    }\n    get desiredSize() {\n        if (!de(this)) throw Ae(\"desiredSize\");\n        return ke(this);\n    }\n    close() {\n        if (!de(this)) throw Ae(\"close\");\n        if (this._closeRequested) throw new TypeError(\"The stream has already been closed; do not close it again!\");\n        const e = this._controlledReadableByteStream._state;\n        if (\"readable\" !== e) throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);\n        !function(e) {\n            const t = e._controlledReadableByteStream;\n            if (e._closeRequested || \"readable\" !== t._state) return;\n            if (e._queueTotalSize > 0) return void (e._closeRequested = !0);\n            if (e._pendingPullIntos.length > 0) {\n                if (e._pendingPullIntos.peek().bytesFilled > 0) {\n                    const t = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                    throw Pe(e, t), t;\n                }\n            }\n            Ee(e), Xt(t);\n        }(this);\n    }\n    enqueue(e) {\n        if (!de(this)) throw Ae(\"enqueue\");\n        if ($(e, 1, \"enqueue\"), !ArrayBuffer.isView(e)) throw new TypeError(\"chunk must be an array buffer view\");\n        if (0 === e.byteLength) throw new TypeError(\"chunk must have non-zero byteLength\");\n        if (0 === e.buffer.byteLength) throw new TypeError(\"chunk's buffer must have non-zero byteLength\");\n        if (this._closeRequested) throw new TypeError(\"stream is closed or draining\");\n        const t = this._controlledReadableByteStream._state;\n        if (\"readable\" !== t) throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);\n        !function(e, t) {\n            const r = e._controlledReadableByteStream;\n            if (e._closeRequested || \"readable\" !== r._state) return;\n            const o = t.buffer, n = t.byteOffset, a = t.byteLength, i = o;\n            if (e._pendingPullIntos.length > 0) {\n                const t = e._pendingPullIntos.peek();\n                t.buffer, Re(e), t.buffer = t.buffer, \"none\" === t.readerType && ge(e, t);\n            }\n            if (J(r)) if (function(e) {\n                const t = e._controlledReadableByteStream._reader;\n                for(; t._readRequests.length > 0;){\n                    if (0 === e._queueTotalSize) return;\n                    We(e, t._readRequests.shift());\n                }\n            }(e), 0 === X(r)) me(e, i, n, a);\n            else {\n                e._pendingPullIntos.length > 0 && Ce(e);\n                G(r, new Uint8Array(i, n, a), !1);\n            }\n            else Le(r) ? (me(e, i, n, a), Te(e)) : me(e, i, n, a);\n            be(e);\n        }(this, e);\n    }\n    error(e) {\n        if (!de(this)) throw Ae(\"error\");\n        Pe(this, e);\n    }\n    [T](e) {\n        he(this), ce(this);\n        const t = this._cancelAlgorithm(e);\n        return Ee(this), t;\n    }\n    [q](e) {\n        const t = this._controlledReadableByteStream;\n        if (this._queueTotalSize > 0) return void We(this, e);\n        const r = this._autoAllocateChunkSize;\n        if (void 0 !== r) {\n            let t;\n            try {\n                t = new ArrayBuffer(r);\n            } catch (t) {\n                return void e._errorSteps(t);\n            }\n            const o = {\n                buffer: t,\n                bufferByteLength: r,\n                byteOffset: 0,\n                byteLength: r,\n                bytesFilled: 0,\n                elementSize: 1,\n                viewConstructor: Uint8Array,\n                readerType: \"default\"\n            };\n            this._pendingPullIntos.push(o);\n        }\n        U(t, e), be(this);\n    }\n    [C]() {\n        if (this._pendingPullIntos.length > 0) {\n            const e = this._pendingPullIntos.peek();\n            e.readerType = \"none\", this._pendingPullIntos = new S, this._pendingPullIntos.push(e);\n        }\n    }\n}\nfunction de(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_controlledReadableByteStream\") && e instanceof ReadableByteStreamController;\n}\nfunction fe(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_associatedReadableByteStreamController\") && e instanceof ReadableStreamBYOBRequest;\n}\nfunction be(e) {\n    const t = function(e) {\n        const t = e._controlledReadableByteStream;\n        if (\"readable\" !== t._state) return !1;\n        if (e._closeRequested) return !1;\n        if (!e._started) return !1;\n        if (J(t) && X(t) > 0) return !0;\n        if (Le(t) && ze(t) > 0) return !0;\n        if (ke(e) > 0) return !0;\n        return !1;\n    }(e);\n    if (!t) return;\n    if (e._pulling) return void (e._pullAgain = !0);\n    e._pulling = !0;\n    b(e._pullAlgorithm(), ()=>(e._pulling = !1, e._pullAgain && (e._pullAgain = !1, be(e)), null), (t)=>(Pe(e, t), null));\n}\nfunction he(e) {\n    Re(e), e._pendingPullIntos = new S;\n}\nfunction _e(e, t) {\n    let r = !1;\n    \"closed\" === e._state && (r = !0);\n    const o = pe(t);\n    \"default\" === t.readerType ? G(e, o, r) : function(e, t, r) {\n        const o = e._reader._readIntoRequests.shift();\n        r ? o._closeSteps(t) : o._chunkSteps(t);\n    }(e, o, r);\n}\nfunction pe(e) {\n    const t = e.bytesFilled, r = e.elementSize;\n    return new e.viewConstructor(e.buffer, e.byteOffset, t / r);\n}\nfunction me(e, t, r, o) {\n    e._queue.push({\n        buffer: t,\n        byteOffset: r,\n        byteLength: o\n    }), e._queueTotalSize += o;\n}\nfunction ye(e, t, r, o) {\n    let n;\n    try {\n        n = t.slice(r, r + o);\n    } catch (t) {\n        throw Pe(e, t), t;\n    }\n    me(e, n, 0, o);\n}\nfunction ge(e, t) {\n    t.bytesFilled > 0 && ye(e, t.buffer, t.byteOffset, t.bytesFilled), Ce(e);\n}\nfunction we(e, t) {\n    const r = t.elementSize, o = t.bytesFilled - t.bytesFilled % r, n = Math.min(e._queueTotalSize, t.byteLength - t.bytesFilled), a = t.bytesFilled + n, i = a - a % r;\n    let l = n, s = !1;\n    i > o && (l = i - t.bytesFilled, s = !0);\n    const u = e._queue;\n    for(; l > 0;){\n        const r = u.peek(), o = Math.min(l, r.byteLength), n = t.byteOffset + t.bytesFilled;\n        ie(t.buffer, n, r.buffer, r.byteOffset, o), r.byteLength === o ? u.shift() : (r.byteOffset += o, r.byteLength -= o), e._queueTotalSize -= o, Se(e, o, t), l -= o;\n    }\n    return s;\n}\nfunction Se(e, t, r) {\n    r.bytesFilled += t;\n}\nfunction ve(e) {\n    0 === e._queueTotalSize && e._closeRequested ? (Ee(e), Xt(e._controlledReadableByteStream)) : be(e);\n}\nfunction Re(e) {\n    null !== e._byobRequest && (e._byobRequest._associatedReadableByteStreamController = void 0, e._byobRequest._view = null, e._byobRequest = null);\n}\nfunction Te(e) {\n    for(; e._pendingPullIntos.length > 0;){\n        if (0 === e._queueTotalSize) return;\n        const t = e._pendingPullIntos.peek();\n        we(e, t) && (Ce(e), _e(e._controlledReadableByteStream, t));\n    }\n}\nfunction qe(e, t) {\n    const r = e._pendingPullIntos.peek();\n    Re(e);\n    \"closed\" === e._controlledReadableByteStream._state ? function(e, t) {\n        \"none\" === t.readerType && Ce(e);\n        const r = e._controlledReadableByteStream;\n        if (Le(r)) for(; ze(r) > 0;)_e(r, Ce(e));\n    }(e, r) : function(e, t, r) {\n        if (Se(0, t, r), \"none\" === r.readerType) return ge(e, r), void Te(e);\n        if (r.bytesFilled < r.elementSize) return;\n        Ce(e);\n        const o = r.bytesFilled % r.elementSize;\n        if (o > 0) {\n            const t = r.byteOffset + r.bytesFilled;\n            ye(e, r.buffer, t - o, o);\n        }\n        r.bytesFilled -= o, _e(e._controlledReadableByteStream, r), Te(e);\n    }(e, t, r), be(e);\n}\nfunction Ce(e) {\n    return e._pendingPullIntos.shift();\n}\nfunction Ee(e) {\n    e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0;\n}\nfunction Pe(e, t) {\n    const r = e._controlledReadableByteStream;\n    \"readable\" === r._state && (he(e), ce(e), Ee(e), Jt(r, t));\n}\nfunction We(e, t) {\n    const r = e._queue.shift();\n    e._queueTotalSize -= r.byteLength, ve(e);\n    const o = new Uint8Array(r.buffer, r.byteOffset, r.byteLength);\n    t._chunkSteps(o);\n}\nfunction ke(e) {\n    const t = e._controlledReadableByteStream._state;\n    return \"errored\" === t ? null : \"closed\" === t ? 0 : e._strategyHWM - e._queueTotalSize;\n}\nfunction Oe(e, t, r) {\n    const o = Object.create(ReadableByteStreamController.prototype);\n    let n, a, i;\n    n = void 0 !== t.start ? ()=>t.start(o) : ()=>{}, a = void 0 !== t.pull ? ()=>t.pull(o) : ()=>c(void 0), i = void 0 !== t.cancel ? (e)=>t.cancel(e) : ()=>c(void 0);\n    const l = t.autoAllocateChunkSize;\n    if (0 === l) throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");\n    !function(e, t, r, o, n, a, i) {\n        t._controlledReadableByteStream = e, t._pullAgain = !1, t._pulling = !1, t._byobRequest = null, t._queue = t._queueTotalSize = void 0, ce(t), t._closeRequested = !1, t._started = !1, t._strategyHWM = a, t._pullAlgorithm = o, t._cancelAlgorithm = n, t._autoAllocateChunkSize = i, t._pendingPullIntos = new S, e._readableStreamController = t, b(c(r()), ()=>(t._started = !0, be(t), null), (e)=>(Pe(t, e), null));\n    }(e, o, n, a, i, r, l);\n}\nfunction Be(e) {\n    return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`);\n}\nfunction Ae(e) {\n    return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`);\n}\nfunction je(e, t) {\n    e._reader._readIntoRequests.push(t);\n}\nfunction ze(e) {\n    return e._reader._readIntoRequests.length;\n}\nfunction Le(e) {\n    const t = e._reader;\n    return void 0 !== t && !!Fe(t);\n}\nObject.defineProperties(ReadableByteStreamController.prototype, {\n    close: {\n        enumerable: !0\n    },\n    enqueue: {\n        enumerable: !0\n    },\n    error: {\n        enumerable: !0\n    },\n    byobRequest: {\n        enumerable: !0\n    },\n    desiredSize: {\n        enumerable: !0\n    }\n}), n(ReadableByteStreamController.prototype.close, \"close\"), n(ReadableByteStreamController.prototype.enqueue, \"enqueue\"), n(ReadableByteStreamController.prototype.error, \"error\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableByteStreamController.prototype, e.toStringTag, {\n    value: \"ReadableByteStreamController\",\n    configurable: !0\n});\nclass ReadableStreamBYOBReader {\n    constructor(e){\n        if ($(e, 1, \"ReadableStreamBYOBReader\"), V(e, \"First parameter\"), Ut(e)) throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n        if (!de(e._readableStreamController)) throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");\n        E(this, e), this._readIntoRequests = new S;\n    }\n    get closed() {\n        return Fe(this) ? this._closedPromise : d(De(\"closed\"));\n    }\n    cancel(e) {\n        return Fe(this) ? void 0 === this._ownerReadableStream ? d(k(\"cancel\")) : P(this, e) : d(De(\"cancel\"));\n    }\n    read(e) {\n        if (!Fe(this)) return d(De(\"read\"));\n        if (!ArrayBuffer.isView(e)) return d(new TypeError(\"view must be an array buffer view\"));\n        if (0 === e.byteLength) return d(new TypeError(\"view must have non-zero byteLength\"));\n        if (0 === e.buffer.byteLength) return d(new TypeError(\"view's buffer must have non-zero byteLength\"));\n        if (e.buffer, void 0 === this._ownerReadableStream) return d(k(\"read from\"));\n        let t, r;\n        const o = u((e, o)=>{\n            t = e, r = o;\n        });\n        return function(e, t, r) {\n            const o = e._ownerReadableStream;\n            o._disturbed = !0, \"errored\" === o._state ? r._errorSteps(o._storedError) : function(e, t, r) {\n                const o = e._controlledReadableByteStream;\n                let n = 1;\n                t.constructor !== DataView && (n = t.constructor.BYTES_PER_ELEMENT);\n                const a = t.constructor, i = t.buffer, l = {\n                    buffer: i,\n                    bufferByteLength: i.byteLength,\n                    byteOffset: t.byteOffset,\n                    byteLength: t.byteLength,\n                    bytesFilled: 0,\n                    elementSize: n,\n                    viewConstructor: a,\n                    readerType: \"byob\"\n                };\n                if (e._pendingPullIntos.length > 0) return e._pendingPullIntos.push(l), void je(o, r);\n                if (\"closed\" !== o._state) {\n                    if (e._queueTotalSize > 0) {\n                        if (we(e, l)) {\n                            const t = pe(l);\n                            return ve(e), void r._chunkSteps(t);\n                        }\n                        if (e._closeRequested) {\n                            const t = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                            return Pe(e, t), void r._errorSteps(t);\n                        }\n                    }\n                    e._pendingPullIntos.push(l), je(o, r), be(e);\n                } else {\n                    const e = new a(l.buffer, l.byteOffset, 0);\n                    r._closeSteps(e);\n                }\n            }(o._readableStreamController, t, r);\n        }(this, e, {\n            _chunkSteps: (e)=>t({\n                    value: e,\n                    done: !1\n                }),\n            _closeSteps: (e)=>t({\n                    value: e,\n                    done: !0\n                }),\n            _errorSteps: (e)=>r(e)\n        }), o;\n    }\n    releaseLock() {\n        if (!Fe(this)) throw De(\"releaseLock\");\n        void 0 !== this._ownerReadableStream && function(e) {\n            W(e);\n            const t = new TypeError(\"Reader was released\");\n            Ie(e, t);\n        }(this);\n    }\n}\nfunction Fe(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_readIntoRequests\") && e instanceof ReadableStreamBYOBReader;\n}\nfunction Ie(e, t) {\n    const r = e._readIntoRequests;\n    e._readIntoRequests = new S, r.forEach((e)=>{\n        e._errorSteps(t);\n    });\n}\nfunction De(e) {\n    return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`);\n}\nfunction $e(e, t) {\n    const { highWaterMark: r } = e;\n    if (void 0 === r) return t;\n    if (ae(r) || r < 0) throw new RangeError(\"Invalid highWaterMark\");\n    return r;\n}\nfunction Me(e) {\n    const { size: t } = e;\n    return t || (()=>1);\n}\nfunction Ye(e, t) {\n    F(e, t);\n    const r = null == e ? void 0 : e.highWaterMark, o = null == e ? void 0 : e.size;\n    return {\n        highWaterMark: void 0 === r ? void 0 : Y(r),\n        size: void 0 === o ? void 0 : Qe(o, `${t} has member 'size' that`)\n    };\n}\nfunction Qe(e, t) {\n    return I(e, t), (t)=>Y(e(t));\n}\nfunction Ne(e, t, r) {\n    return I(e, r), (r)=>w(e, t, [\n            r\n        ]);\n}\nfunction He(e, t, r) {\n    return I(e, r), ()=>w(e, t, []);\n}\nfunction xe(e, t, r) {\n    return I(e, r), (r)=>g(e, t, [\n            r\n        ]);\n}\nfunction Ve(e, t, r) {\n    return I(e, r), (r, o)=>w(e, t, [\n            r,\n            o\n        ]);\n}\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n    cancel: {\n        enumerable: !0\n    },\n    read: {\n        enumerable: !0\n    },\n    releaseLock: {\n        enumerable: !0\n    },\n    closed: {\n        enumerable: !0\n    }\n}), n(ReadableStreamBYOBReader.prototype.cancel, \"cancel\"), n(ReadableStreamBYOBReader.prototype.read, \"read\"), n(ReadableStreamBYOBReader.prototype.releaseLock, \"releaseLock\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStreamBYOBReader.prototype, e.toStringTag, {\n    value: \"ReadableStreamBYOBReader\",\n    configurable: !0\n});\nconst Ue = \"function\" == typeof AbortController;\nclass WritableStream {\n    constructor(e = {}, t = {}){\n        void 0 === e ? e = null : D(e, \"First parameter\");\n        const r = Ye(t, \"Second parameter\"), o = function(e, t) {\n            F(e, t);\n            const r = null == e ? void 0 : e.abort, o = null == e ? void 0 : e.close, n = null == e ? void 0 : e.start, a = null == e ? void 0 : e.type, i = null == e ? void 0 : e.write;\n            return {\n                abort: void 0 === r ? void 0 : Ne(r, e, `${t} has member 'abort' that`),\n                close: void 0 === o ? void 0 : He(o, e, `${t} has member 'close' that`),\n                start: void 0 === n ? void 0 : xe(n, e, `${t} has member 'start' that`),\n                write: void 0 === i ? void 0 : Ve(i, e, `${t} has member 'write' that`),\n                type: a\n            };\n        }(e, \"First parameter\");\n        var n;\n        (n = this)._state = \"writable\", n._storedError = void 0, n._writer = void 0, n._writableStreamController = void 0, n._writeRequests = new S, n._inFlightWriteRequest = void 0, n._closeRequest = void 0, n._inFlightCloseRequest = void 0, n._pendingAbortRequest = void 0, n._backpressure = !1;\n        if (void 0 !== o.type) throw new RangeError(\"Invalid type is specified\");\n        const a = Me(r);\n        !function(e, t, r, o) {\n            const n = Object.create(WritableStreamDefaultController.prototype);\n            let a, i, l, s;\n            a = void 0 !== t.start ? ()=>t.start(n) : ()=>{};\n            i = void 0 !== t.write ? (e)=>t.write(e, n) : ()=>c(void 0);\n            l = void 0 !== t.close ? ()=>t.close() : ()=>c(void 0);\n            s = void 0 !== t.abort ? (e)=>t.abort(e) : ()=>c(void 0);\n            !function(e, t, r, o, n, a, i, l) {\n                t._controlledWritableStream = e, e._writableStreamController = t, t._queue = void 0, t._queueTotalSize = void 0, ce(t), t._abortReason = void 0, t._abortController = function() {\n                    if (Ue) return new AbortController;\n                }(), t._started = !1, t._strategySizeAlgorithm = l, t._strategyHWM = i, t._writeAlgorithm = o, t._closeAlgorithm = n, t._abortAlgorithm = a;\n                const s = bt(t);\n                nt(e, s);\n                const u = r();\n                b(c(u), ()=>(t._started = !0, dt(t), null), (r)=>(t._started = !0, Ze(e, r), null));\n            }(e, n, a, i, l, s, r, o);\n        }(this, o, $e(r, 1), a);\n    }\n    get locked() {\n        if (!Ge(this)) throw _t(\"locked\");\n        return Xe(this);\n    }\n    abort(e) {\n        return Ge(this) ? Xe(this) ? d(new TypeError(\"Cannot abort a stream that already has a writer\")) : Je(this, e) : d(_t(\"abort\"));\n    }\n    close() {\n        return Ge(this) ? Xe(this) ? d(new TypeError(\"Cannot close a stream that already has a writer\")) : rt(this) ? d(new TypeError(\"Cannot close an already-closing stream\")) : Ke(this) : d(_t(\"close\"));\n    }\n    getWriter() {\n        if (!Ge(this)) throw _t(\"getWriter\");\n        return new WritableStreamDefaultWriter(this);\n    }\n}\nfunction Ge(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_writableStreamController\") && e instanceof WritableStream;\n}\nfunction Xe(e) {\n    return void 0 !== e._writer;\n}\nfunction Je(e, t) {\n    var r;\n    if (\"closed\" === e._state || \"errored\" === e._state) return c(void 0);\n    e._writableStreamController._abortReason = t, null === (r = e._writableStreamController._abortController) || void 0 === r || r.abort(t);\n    const o = e._state;\n    if (\"closed\" === o || \"errored\" === o) return c(void 0);\n    if (void 0 !== e._pendingAbortRequest) return e._pendingAbortRequest._promise;\n    let n = !1;\n    \"erroring\" === o && (n = !0, t = void 0);\n    const a = u((r, o)=>{\n        e._pendingAbortRequest = {\n            _promise: void 0,\n            _resolve: r,\n            _reject: o,\n            _reason: t,\n            _wasAlreadyErroring: n\n        };\n    });\n    return e._pendingAbortRequest._promise = a, n || et(e, t), a;\n}\nfunction Ke(e) {\n    const t = e._state;\n    if (\"closed\" === t || \"errored\" === t) return d(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));\n    const r = u((t, r)=>{\n        const o = {\n            _resolve: t,\n            _reject: r\n        };\n        e._closeRequest = o;\n    }), o = e._writer;\n    var n;\n    return void 0 !== o && e._backpressure && \"writable\" === t && Et(o), ue(n = e._writableStreamController, lt, 0), dt(n), r;\n}\nfunction Ze(e, t) {\n    \"writable\" !== e._state ? tt(e) : et(e, t);\n}\nfunction et(e, t) {\n    const r = e._writableStreamController;\n    e._state = \"erroring\", e._storedError = t;\n    const o = e._writer;\n    void 0 !== o && it(o, t), !function(e) {\n        if (void 0 === e._inFlightWriteRequest && void 0 === e._inFlightCloseRequest) return !1;\n        return !0;\n    }(e) && r._started && tt(e);\n}\nfunction tt(e) {\n    e._state = \"errored\", e._writableStreamController[R]();\n    const t = e._storedError;\n    if (e._writeRequests.forEach((e)=>{\n        e._reject(t);\n    }), e._writeRequests = new S, void 0 === e._pendingAbortRequest) return void ot(e);\n    const r = e._pendingAbortRequest;\n    if (e._pendingAbortRequest = void 0, r._wasAlreadyErroring) return r._reject(t), void ot(e);\n    b(e._writableStreamController[v](r._reason), ()=>(r._resolve(), ot(e), null), (t)=>(r._reject(t), ot(e), null));\n}\nfunction rt(e) {\n    return void 0 !== e._closeRequest || void 0 !== e._inFlightCloseRequest;\n}\nfunction ot(e) {\n    void 0 !== e._closeRequest && (e._closeRequest._reject(e._storedError), e._closeRequest = void 0);\n    const t = e._writer;\n    void 0 !== t && St(t, e._storedError);\n}\nfunction nt(e, t) {\n    const r = e._writer;\n    void 0 !== r && t !== e._backpressure && (t ? function(e) {\n        Rt(e);\n    }(r) : Et(r)), e._backpressure = t;\n}\nObject.defineProperties(WritableStream.prototype, {\n    abort: {\n        enumerable: !0\n    },\n    close: {\n        enumerable: !0\n    },\n    getWriter: {\n        enumerable: !0\n    },\n    locked: {\n        enumerable: !0\n    }\n}), n(WritableStream.prototype.abort, \"abort\"), n(WritableStream.prototype.close, \"close\"), n(WritableStream.prototype.getWriter, \"getWriter\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(WritableStream.prototype, e.toStringTag, {\n    value: \"WritableStream\",\n    configurable: !0\n});\nclass WritableStreamDefaultWriter {\n    constructor(e){\n        if ($(e, 1, \"WritableStreamDefaultWriter\"), function(e, t) {\n            if (!Ge(e)) throw new TypeError(`${t} is not a WritableStream.`);\n        }(e, \"First parameter\"), Xe(e)) throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");\n        this._ownerWritableStream = e, e._writer = this;\n        const t = e._state;\n        if (\"writable\" === t) !rt(e) && e._backpressure ? Rt(this) : qt(this), gt(this);\n        else if (\"erroring\" === t) Tt(this, e._storedError), gt(this);\n        else if (\"closed\" === t) qt(this), gt(r = this), vt(r);\n        else {\n            const t = e._storedError;\n            Tt(this, t), wt(this, t);\n        }\n        var r;\n    }\n    get closed() {\n        return at(this) ? this._closedPromise : d(mt(\"closed\"));\n    }\n    get desiredSize() {\n        if (!at(this)) throw mt(\"desiredSize\");\n        if (void 0 === this._ownerWritableStream) throw yt(\"desiredSize\");\n        return function(e) {\n            const t = e._ownerWritableStream, r = t._state;\n            if (\"errored\" === r || \"erroring\" === r) return null;\n            if (\"closed\" === r) return 0;\n            return ct(t._writableStreamController);\n        }(this);\n    }\n    get ready() {\n        return at(this) ? this._readyPromise : d(mt(\"ready\"));\n    }\n    abort(e) {\n        return at(this) ? void 0 === this._ownerWritableStream ? d(yt(\"abort\")) : function(e, t) {\n            return Je(e._ownerWritableStream, t);\n        }(this, e) : d(mt(\"abort\"));\n    }\n    close() {\n        if (!at(this)) return d(mt(\"close\"));\n        const e = this._ownerWritableStream;\n        return void 0 === e ? d(yt(\"close\")) : rt(e) ? d(new TypeError(\"Cannot close an already-closing stream\")) : Ke(this._ownerWritableStream);\n    }\n    releaseLock() {\n        if (!at(this)) throw mt(\"releaseLock\");\n        void 0 !== this._ownerWritableStream && function(e) {\n            const t = e._ownerWritableStream, r = new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");\n            it(e, r), function(e, t) {\n                \"pending\" === e._closedPromiseState ? St(e, t) : function(e, t) {\n                    wt(e, t);\n                }(e, t);\n            }(e, r), t._writer = void 0, e._ownerWritableStream = void 0;\n        }(this);\n    }\n    write(e) {\n        return at(this) ? void 0 === this._ownerWritableStream ? d(yt(\"write to\")) : function(e, t) {\n            const r = e._ownerWritableStream, o = r._writableStreamController, n = function(e, t) {\n                try {\n                    return e._strategySizeAlgorithm(t);\n                } catch (t) {\n                    return ft(e, t), 1;\n                }\n            }(o, t);\n            if (r !== e._ownerWritableStream) return d(yt(\"write to\"));\n            const a = r._state;\n            if (\"errored\" === a) return d(r._storedError);\n            if (rt(r) || \"closed\" === a) return d(new TypeError(\"The stream is closing or closed and cannot be written to\"));\n            if (\"erroring\" === a) return d(r._storedError);\n            const i = function(e) {\n                return u((t, r)=>{\n                    const o = {\n                        _resolve: t,\n                        _reject: r\n                    };\n                    e._writeRequests.push(o);\n                });\n            }(r);\n            return function(e, t, r) {\n                try {\n                    ue(e, t, r);\n                } catch (t) {\n                    return void ft(e, t);\n                }\n                const o = e._controlledWritableStream;\n                if (!rt(o) && \"writable\" === o._state) {\n                    nt(o, bt(e));\n                }\n                dt(e);\n            }(o, t, n), i;\n        }(this, e) : d(mt(\"write\"));\n    }\n}\nfunction at(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_ownerWritableStream\") && e instanceof WritableStreamDefaultWriter;\n}\nfunction it(e, t) {\n    \"pending\" === e._readyPromiseState ? Ct(e, t) : function(e, t) {\n        Tt(e, t);\n    }(e, t);\n}\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n    abort: {\n        enumerable: !0\n    },\n    close: {\n        enumerable: !0\n    },\n    releaseLock: {\n        enumerable: !0\n    },\n    write: {\n        enumerable: !0\n    },\n    closed: {\n        enumerable: !0\n    },\n    desiredSize: {\n        enumerable: !0\n    },\n    ready: {\n        enumerable: !0\n    }\n}), n(WritableStreamDefaultWriter.prototype.abort, \"abort\"), n(WritableStreamDefaultWriter.prototype.close, \"close\"), n(WritableStreamDefaultWriter.prototype.releaseLock, \"releaseLock\"), n(WritableStreamDefaultWriter.prototype.write, \"write\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(WritableStreamDefaultWriter.prototype, e.toStringTag, {\n    value: \"WritableStreamDefaultWriter\",\n    configurable: !0\n});\nconst lt = {};\nclass WritableStreamDefaultController {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get abortReason() {\n        if (!st(this)) throw pt(\"abortReason\");\n        return this._abortReason;\n    }\n    get signal() {\n        if (!st(this)) throw pt(\"signal\");\n        if (void 0 === this._abortController) throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");\n        return this._abortController.signal;\n    }\n    error(e) {\n        if (!st(this)) throw pt(\"error\");\n        \"writable\" === this._controlledWritableStream._state && ht(this, e);\n    }\n    [v](e) {\n        const t = this._abortAlgorithm(e);\n        return ut(this), t;\n    }\n    [R]() {\n        ce(this);\n    }\n}\nfunction st(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_controlledWritableStream\") && e instanceof WritableStreamDefaultController;\n}\nfunction ut(e) {\n    e._writeAlgorithm = void 0, e._closeAlgorithm = void 0, e._abortAlgorithm = void 0, e._strategySizeAlgorithm = void 0;\n}\nfunction ct(e) {\n    return e._strategyHWM - e._queueTotalSize;\n}\nfunction dt(e) {\n    const t = e._controlledWritableStream;\n    if (!e._started) return;\n    if (void 0 !== t._inFlightWriteRequest) return;\n    if (\"erroring\" === t._state) return void tt(t);\n    if (0 === e._queue.length) return;\n    const r = e._queue.peek().value;\n    r === lt ? function(e) {\n        const t = e._controlledWritableStream;\n        (function(e) {\n            e._inFlightCloseRequest = e._closeRequest, e._closeRequest = void 0;\n        })(t), se(e);\n        const r = e._closeAlgorithm();\n        ut(e), b(r, ()=>((function(e) {\n                e._inFlightCloseRequest._resolve(void 0), e._inFlightCloseRequest = void 0, \"erroring\" === e._state && (e._storedError = void 0, void 0 !== e._pendingAbortRequest && (e._pendingAbortRequest._resolve(), e._pendingAbortRequest = void 0)), e._state = \"closed\";\n                const t = e._writer;\n                void 0 !== t && vt(t);\n            })(t), null), (e)=>((function(e, t) {\n                e._inFlightCloseRequest._reject(t), e._inFlightCloseRequest = void 0, void 0 !== e._pendingAbortRequest && (e._pendingAbortRequest._reject(t), e._pendingAbortRequest = void 0), Ze(e, t);\n            })(t, e), null));\n    }(e) : function(e, t) {\n        const r = e._controlledWritableStream;\n        !function(e) {\n            e._inFlightWriteRequest = e._writeRequests.shift();\n        }(r);\n        b(e._writeAlgorithm(t), ()=>{\n            !function(e) {\n                e._inFlightWriteRequest._resolve(void 0), e._inFlightWriteRequest = void 0;\n            }(r);\n            const t = r._state;\n            if (se(e), !rt(r) && \"writable\" === t) {\n                const t = bt(e);\n                nt(r, t);\n            }\n            return dt(e), null;\n        }, (t)=>(\"writable\" === r._state && ut(e), function(e, t) {\n                e._inFlightWriteRequest._reject(t), e._inFlightWriteRequest = void 0, Ze(e, t);\n            }(r, t), null));\n    }(e, r);\n}\nfunction ft(e, t) {\n    \"writable\" === e._controlledWritableStream._state && ht(e, t);\n}\nfunction bt(e) {\n    return ct(e) <= 0;\n}\nfunction ht(e, t) {\n    const r = e._controlledWritableStream;\n    ut(e), et(r, t);\n}\nfunction _t(e) {\n    return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`);\n}\nfunction pt(e) {\n    return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`);\n}\nfunction mt(e) {\n    return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`);\n}\nfunction yt(e) {\n    return new TypeError(\"Cannot \" + e + \" a stream using a released writer\");\n}\nfunction gt(e) {\n    e._closedPromise = u((t, r)=>{\n        e._closedPromise_resolve = t, e._closedPromise_reject = r, e._closedPromiseState = \"pending\";\n    });\n}\nfunction wt(e, t) {\n    gt(e), St(e, t);\n}\nfunction St(e, t) {\n    void 0 !== e._closedPromise_reject && (m(e._closedPromise), e._closedPromise_reject(t), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = \"rejected\");\n}\nfunction vt(e) {\n    void 0 !== e._closedPromise_resolve && (e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = \"resolved\");\n}\nfunction Rt(e) {\n    e._readyPromise = u((t, r)=>{\n        e._readyPromise_resolve = t, e._readyPromise_reject = r;\n    }), e._readyPromiseState = \"pending\";\n}\nfunction Tt(e, t) {\n    Rt(e), Ct(e, t);\n}\nfunction qt(e) {\n    Rt(e), Et(e);\n}\nfunction Ct(e, t) {\n    void 0 !== e._readyPromise_reject && (m(e._readyPromise), e._readyPromise_reject(t), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = \"rejected\");\n}\nfunction Et(e) {\n    void 0 !== e._readyPromise_resolve && (e._readyPromise_resolve(void 0), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = \"fulfilled\");\n}\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n    abortReason: {\n        enumerable: !0\n    },\n    signal: {\n        enumerable: !0\n    },\n    error: {\n        enumerable: !0\n    }\n}), \"symbol\" == typeof e.toStringTag && Object.defineProperty(WritableStreamDefaultController.prototype, e.toStringTag, {\n    value: \"WritableStreamDefaultController\",\n    configurable: !0\n});\nconst Pt = \"undefined\" != typeof DOMException ? DOMException : void 0;\nconst Wt = function(e) {\n    if (\"function\" != typeof e && \"object\" != typeof e) return !1;\n    try {\n        return new e, !0;\n    } catch (e) {\n        return !1;\n    }\n}(Pt) ? Pt : function() {\n    const e = function(e, t) {\n        this.message = e || \"\", this.name = t || \"Error\", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);\n    };\n    return e.prototype = Object.create(Error.prototype), Object.defineProperty(e.prototype, \"constructor\", {\n        value: e,\n        writable: !0,\n        configurable: !0\n    }), e;\n}();\nfunction kt(e, t, r, o, n, a) {\n    const i = e.getReader(), l = t.getWriter();\n    Vt(e) && (e._disturbed = !0);\n    let s, _, g, w = !1, S = !1, v = \"readable\", R = \"writable\", T = !1, q = !1;\n    const C = u((e)=>{\n        g = e;\n    });\n    let E = Promise.resolve(void 0);\n    return u((P, W)=>{\n        let k;\n        function O() {\n            if (w) return;\n            const e = u((e, t)=>{\n                !function r(o) {\n                    o ? e() : f(function() {\n                        if (w) return c(!0);\n                        return f(l.ready, ()=>f(i.read(), (e)=>!!e.done || (E = l.write(e.value), m(E), !1)));\n                    }(), r, t);\n                }(!1);\n            });\n            m(e);\n        }\n        function B() {\n            return v = \"closed\", r ? L() : z(()=>(Ge(t) && (T = rt(t), R = t._state), T || \"closed\" === R ? c(void 0) : \"erroring\" === R || \"errored\" === R ? d(_) : (T = !0, l.close())), !1, void 0), null;\n        }\n        function A(e) {\n            return w || (v = \"errored\", s = e, o ? L(!0, e) : z(()=>l.abort(e), !0, e)), null;\n        }\n        function j(e) {\n            return S || (R = \"errored\", _ = e, n ? L(!0, e) : z(()=>i.cancel(e), !0, e)), null;\n        }\n        if (void 0 !== a && (k = ()=>{\n            const e = void 0 !== a.reason ? a.reason : new Wt(\"Aborted\", \"AbortError\"), t = [];\n            o || t.push(()=>\"writable\" === R ? l.abort(e) : c(void 0)), n || t.push(()=>\"readable\" === v ? i.cancel(e) : c(void 0)), z(()=>Promise.all(t.map((e)=>e())), !0, e);\n        }, a.aborted ? k() : a.addEventListener(\"abort\", k)), Vt(e) && (v = e._state, s = e._storedError), Ge(t) && (R = t._state, _ = t._storedError, T = rt(t)), Vt(e) && Ge(t) && (q = !0, g()), \"errored\" === v) A(s);\n        else if (\"erroring\" === R || \"errored\" === R) j(_);\n        else if (\"closed\" === v) B();\n        else if (T || \"closed\" === R) {\n            const e = new TypeError(\"the destination writable stream closed before all data could be piped to it\");\n            n ? L(!0, e) : z(()=>i.cancel(e), !0, e);\n        }\n        function z(e, t, r) {\n            function o() {\n                return \"writable\" !== R || T ? n() : h(function() {\n                    let e;\n                    return c(function t() {\n                        if (e !== E) return e = E, p(E, t, t);\n                    }());\n                }(), n), null;\n            }\n            function n() {\n                return e ? b(e(), ()=>F(t, r), (e)=>F(!0, e)) : F(t, r), null;\n            }\n            w || (w = !0, q ? o() : h(C, o));\n        }\n        function L(e, t) {\n            z(void 0, e, t);\n        }\n        function F(e, t) {\n            return S = !0, l.releaseLock(), i.releaseLock(), void 0 !== a && a.removeEventListener(\"abort\", k), e ? W(t) : P(void 0), null;\n        }\n        w || (b(i.closed, B, A), b(l.closed, function() {\n            return S || (R = \"closed\"), null;\n        }, j)), q ? O() : y(()=>{\n            q = !0, g(), O();\n        });\n    });\n}\nfunction Ot(e, t) {\n    return function(e) {\n        try {\n            return e.getReader({\n                mode: \"byob\"\n            }).releaseLock(), !0;\n        } catch (e) {\n            return !1;\n        }\n    }(e) ? function(e) {\n        let t, r, o, n, a, i = e.getReader(), l = !1, s = !1, d = !1, f = !1, h = !1, p = !1;\n        const m = u((e)=>{\n            a = e;\n        });\n        function y(e) {\n            _(e.closed, (t)=>(e !== i || (o.error(t), n.error(t), h && p || a(void 0)), null));\n        }\n        function g() {\n            l && (i.releaseLock(), i = e.getReader(), y(i), l = !1), b(i.read(), (e)=>{\n                var t, r;\n                if (d = !1, f = !1, e.done) return h || o.close(), p || n.close(), null === (t = o.byobRequest) || void 0 === t || t.respond(0), null === (r = n.byobRequest) || void 0 === r || r.respond(0), h && p || a(void 0), null;\n                const l = e.value, u = l;\n                let c = l;\n                if (!h && !p) try {\n                    c = le(l);\n                } catch (e) {\n                    return o.error(e), n.error(e), a(i.cancel(e)), null;\n                }\n                return h || o.enqueue(u), p || n.enqueue(c), s = !1, d ? S() : f && v(), null;\n            }, ()=>(s = !1, null));\n        }\n        function w(t, r) {\n            l || (i.releaseLock(), i = e.getReader({\n                mode: \"byob\"\n            }), y(i), l = !0);\n            const u = r ? n : o, c = r ? o : n;\n            b(i.read(t), (e)=>{\n                var t;\n                d = !1, f = !1;\n                const o = r ? p : h, n = r ? h : p;\n                if (e.done) {\n                    o || u.close(), n || c.close();\n                    const r = e.value;\n                    return void 0 !== r && (o || u.byobRequest.respondWithNewView(r), n || null === (t = c.byobRequest) || void 0 === t || t.respond(0)), o && n || a(void 0), null;\n                }\n                const l = e.value;\n                if (n) o || u.byobRequest.respondWithNewView(l);\n                else {\n                    let e;\n                    try {\n                        e = le(l);\n                    } catch (e) {\n                        return u.error(e), c.error(e), a(i.cancel(e)), null;\n                    }\n                    o || u.byobRequest.respondWithNewView(l), c.enqueue(e);\n                }\n                return s = !1, d ? S() : f && v(), null;\n            }, ()=>(s = !1, null));\n        }\n        function S() {\n            if (s) return d = !0, c(void 0);\n            s = !0;\n            const e = o.byobRequest;\n            return null === e ? g() : w(e.view, !1), c(void 0);\n        }\n        function v() {\n            if (s) return f = !0, c(void 0);\n            s = !0;\n            const e = n.byobRequest;\n            return null === e ? g() : w(e.view, !0), c(void 0);\n        }\n        function R(e) {\n            if (h = !0, t = e, p) {\n                const e = [\n                    t,\n                    r\n                ], o = i.cancel(e);\n                a(o);\n            }\n            return m;\n        }\n        function T(e) {\n            if (p = !0, r = e, h) {\n                const e = [\n                    t,\n                    r\n                ], o = i.cancel(e);\n                a(o);\n            }\n            return m;\n        }\n        const q = new ReadableStream({\n            type: \"bytes\",\n            start (e) {\n                o = e;\n            },\n            pull: S,\n            cancel: R\n        }), C = new ReadableStream({\n            type: \"bytes\",\n            start (e) {\n                n = e;\n            },\n            pull: v,\n            cancel: T\n        });\n        return y(i), [\n            q,\n            C\n        ];\n    }(e) : function(e, t) {\n        const r = e.getReader();\n        let o, n, a, i, l, s = !1, d = !1, f = !1, h = !1;\n        const p = u((e)=>{\n            l = e;\n        });\n        function m() {\n            return s ? (d = !0, c(void 0)) : (s = !0, b(r.read(), (e)=>{\n                if (d = !1, e.done) return f || a.close(), h || i.close(), f && h || l(void 0), null;\n                const t = e.value, r = t, o = t;\n                return f || a.enqueue(r), h || i.enqueue(o), s = !1, d && m(), null;\n            }, ()=>(s = !1, null)), c(void 0));\n        }\n        function y(e) {\n            if (f = !0, o = e, h) {\n                const e = [\n                    o,\n                    n\n                ], t = r.cancel(e);\n                l(t);\n            }\n            return p;\n        }\n        function g(e) {\n            if (h = !0, n = e, f) {\n                const e = [\n                    o,\n                    n\n                ], t = r.cancel(e);\n                l(t);\n            }\n            return p;\n        }\n        const w = new ReadableStream({\n            start (e) {\n                a = e;\n            },\n            pull: m,\n            cancel: y\n        }), S = new ReadableStream({\n            start (e) {\n                i = e;\n            },\n            pull: m,\n            cancel: g\n        });\n        return _(r.closed, (e)=>(a.error(e), i.error(e), f && h || l(void 0), null)), [\n            w,\n            S\n        ];\n    }(e);\n}\nclass ReadableStreamDefaultController {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get desiredSize() {\n        if (!Bt(this)) throw Dt(\"desiredSize\");\n        return Lt(this);\n    }\n    close() {\n        if (!Bt(this)) throw Dt(\"close\");\n        if (!Ft(this)) throw new TypeError(\"The stream is not in a state that permits close\");\n        !function(e) {\n            if (!Ft(e)) return;\n            const t = e._controlledReadableStream;\n            e._closeRequested = !0, 0 === e._queue.length && (jt(e), Xt(t));\n        }(this);\n    }\n    enqueue(e) {\n        if (!Bt(this)) throw Dt(\"enqueue\");\n        if (!Ft(this)) throw new TypeError(\"The stream is not in a state that permits enqueue\");\n        return function(e, t) {\n            if (!Ft(e)) return;\n            const r = e._controlledReadableStream;\n            if (Ut(r) && X(r) > 0) G(r, t, !1);\n            else {\n                let r;\n                try {\n                    r = e._strategySizeAlgorithm(t);\n                } catch (t) {\n                    throw zt(e, t), t;\n                }\n                try {\n                    ue(e, t, r);\n                } catch (t) {\n                    throw zt(e, t), t;\n                }\n            }\n            At(e);\n        }(this, e);\n    }\n    error(e) {\n        if (!Bt(this)) throw Dt(\"error\");\n        zt(this, e);\n    }\n    [T](e) {\n        ce(this);\n        const t = this._cancelAlgorithm(e);\n        return jt(this), t;\n    }\n    [q](e) {\n        const t = this._controlledReadableStream;\n        if (this._queue.length > 0) {\n            const r = se(this);\n            this._closeRequested && 0 === this._queue.length ? (jt(this), Xt(t)) : At(this), e._chunkSteps(r);\n        } else U(t, e), At(this);\n    }\n    [C]() {}\n}\nfunction Bt(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_controlledReadableStream\") && e instanceof ReadableStreamDefaultController;\n}\nfunction At(e) {\n    const t = function(e) {\n        const t = e._controlledReadableStream;\n        if (!Ft(e)) return !1;\n        if (!e._started) return !1;\n        if (Ut(t) && X(t) > 0) return !0;\n        if (Lt(e) > 0) return !0;\n        return !1;\n    }(e);\n    if (!t) return;\n    if (e._pulling) return void (e._pullAgain = !0);\n    e._pulling = !0;\n    b(e._pullAlgorithm(), ()=>(e._pulling = !1, e._pullAgain && (e._pullAgain = !1, At(e)), null), (t)=>(zt(e, t), null));\n}\nfunction jt(e) {\n    e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0, e._strategySizeAlgorithm = void 0;\n}\nfunction zt(e, t) {\n    const r = e._controlledReadableStream;\n    \"readable\" === r._state && (ce(e), jt(e), Jt(r, t));\n}\nfunction Lt(e) {\n    const t = e._controlledReadableStream._state;\n    return \"errored\" === t ? null : \"closed\" === t ? 0 : e._strategyHWM - e._queueTotalSize;\n}\nfunction Ft(e) {\n    return !e._closeRequested && \"readable\" === e._controlledReadableStream._state;\n}\nfunction It(e, t, r, o) {\n    const n = Object.create(ReadableStreamDefaultController.prototype);\n    let a, i, l;\n    a = void 0 !== t.start ? ()=>t.start(n) : ()=>{}, i = void 0 !== t.pull ? ()=>t.pull(n) : ()=>c(void 0), l = void 0 !== t.cancel ? (e)=>t.cancel(e) : ()=>c(void 0), function(e, t, r, o, n, a, i) {\n        t._controlledReadableStream = e, t._queue = void 0, t._queueTotalSize = void 0, ce(t), t._started = !1, t._closeRequested = !1, t._pullAgain = !1, t._pulling = !1, t._strategySizeAlgorithm = i, t._strategyHWM = a, t._pullAlgorithm = o, t._cancelAlgorithm = n, e._readableStreamController = t, b(c(r()), ()=>(t._started = !0, At(t), null), (e)=>(zt(t, e), null));\n    }(e, n, a, i, l, r, o);\n}\nfunction Dt(e) {\n    return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`);\n}\nfunction $t(e, t, r) {\n    return I(e, r), (r)=>w(e, t, [\n            r\n        ]);\n}\nfunction Mt(e, t, r) {\n    return I(e, r), (r)=>w(e, t, [\n            r\n        ]);\n}\nfunction Yt(e, t, r) {\n    return I(e, r), (r)=>g(e, t, [\n            r\n        ]);\n}\nfunction Qt(e, t) {\n    if (\"bytes\" !== (e = `${e}`)) throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);\n    return e;\n}\nfunction Nt(e, t) {\n    if (\"byob\" !== (e = `${e}`)) throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);\n    return e;\n}\nfunction Ht(e, t) {\n    F(e, t);\n    const r = null == e ? void 0 : e.preventAbort, o = null == e ? void 0 : e.preventCancel, n = null == e ? void 0 : e.preventClose, a = null == e ? void 0 : e.signal;\n    return void 0 !== a && function(e, t) {\n        if (!function(e) {\n            if (\"object\" != typeof e || null === e) return !1;\n            try {\n                return \"boolean\" == typeof e.aborted;\n            } catch (e) {\n                return !1;\n            }\n        }(e)) throw new TypeError(`${t} is not an AbortSignal.`);\n    }(a, `${t} has member 'signal' that`), {\n        preventAbort: Boolean(r),\n        preventCancel: Boolean(o),\n        preventClose: Boolean(n),\n        signal: a\n    };\n}\nfunction xt(e, t) {\n    F(e, t);\n    const r = null == e ? void 0 : e.readable;\n    M(r, \"readable\", \"ReadableWritablePair\"), function(e, t) {\n        if (!H(e)) throw new TypeError(`${t} is not a ReadableStream.`);\n    }(r, `${t} has member 'readable' that`);\n    const o = null == e ? void 0 : e.writable;\n    return M(o, \"writable\", \"ReadableWritablePair\"), function(e, t) {\n        if (!x(e)) throw new TypeError(`${t} is not a WritableStream.`);\n    }(o, `${t} has member 'writable' that`), {\n        readable: r,\n        writable: o\n    };\n}\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n    close: {\n        enumerable: !0\n    },\n    enqueue: {\n        enumerable: !0\n    },\n    error: {\n        enumerable: !0\n    },\n    desiredSize: {\n        enumerable: !0\n    }\n}), n(ReadableStreamDefaultController.prototype.close, \"close\"), n(ReadableStreamDefaultController.prototype.enqueue, \"enqueue\"), n(ReadableStreamDefaultController.prototype.error, \"error\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStreamDefaultController.prototype, e.toStringTag, {\n    value: \"ReadableStreamDefaultController\",\n    configurable: !0\n});\nclass ReadableStream {\n    constructor(e = {}, t = {}){\n        void 0 === e ? e = null : D(e, \"First parameter\");\n        const r = Ye(t, \"Second parameter\"), o = function(e, t) {\n            F(e, t);\n            const r = e, o = null == r ? void 0 : r.autoAllocateChunkSize, n = null == r ? void 0 : r.cancel, a = null == r ? void 0 : r.pull, i = null == r ? void 0 : r.start, l = null == r ? void 0 : r.type;\n            return {\n                autoAllocateChunkSize: void 0 === o ? void 0 : N(o, `${t} has member 'autoAllocateChunkSize' that`),\n                cancel: void 0 === n ? void 0 : $t(n, r, `${t} has member 'cancel' that`),\n                pull: void 0 === a ? void 0 : Mt(a, r, `${t} has member 'pull' that`),\n                start: void 0 === i ? void 0 : Yt(i, r, `${t} has member 'start' that`),\n                type: void 0 === l ? void 0 : Qt(l, `${t} has member 'type' that`)\n            };\n        }(e, \"First parameter\");\n        var n;\n        if ((n = this)._state = \"readable\", n._reader = void 0, n._storedError = void 0, n._disturbed = !1, \"bytes\" === o.type) {\n            if (void 0 !== r.size) throw new RangeError(\"The strategy for a byte stream cannot have a size function\");\n            Oe(this, o, $e(r, 0));\n        } else {\n            const e = Me(r);\n            It(this, o, $e(r, 1), e);\n        }\n    }\n    get locked() {\n        if (!Vt(this)) throw Kt(\"locked\");\n        return Ut(this);\n    }\n    cancel(e) {\n        return Vt(this) ? Ut(this) ? d(new TypeError(\"Cannot cancel a stream that already has a reader\")) : Gt(this, e) : d(Kt(\"cancel\"));\n    }\n    getReader(e) {\n        if (!Vt(this)) throw Kt(\"getReader\");\n        return void 0 === function(e, t) {\n            F(e, t);\n            const r = null == e ? void 0 : e.mode;\n            return {\n                mode: void 0 === r ? void 0 : Nt(r, `${t} has member 'mode' that`)\n            };\n        }(e, \"First parameter\").mode ? new ReadableStreamDefaultReader(this) : function(e) {\n            return new ReadableStreamBYOBReader(e);\n        }(this);\n    }\n    pipeThrough(e, t = {}) {\n        if (!H(this)) throw Kt(\"pipeThrough\");\n        $(e, 1, \"pipeThrough\");\n        const r = xt(e, \"First parameter\"), o = Ht(t, \"Second parameter\");\n        if (this.locked) throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");\n        if (r.writable.locked) throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");\n        return m(kt(this, r.writable, o.preventClose, o.preventAbort, o.preventCancel, o.signal)), r.readable;\n    }\n    pipeTo(e, t = {}) {\n        if (!H(this)) return d(Kt(\"pipeTo\"));\n        if (void 0 === e) return d(\"Parameter 1 is required in 'pipeTo'.\");\n        if (!x(e)) return d(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));\n        let r;\n        try {\n            r = Ht(t, \"Second parameter\");\n        } catch (e) {\n            return d(e);\n        }\n        return this.locked ? d(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\")) : e.locked ? d(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\")) : kt(this, e, r.preventClose, r.preventAbort, r.preventCancel, r.signal);\n    }\n    tee() {\n        if (!H(this)) throw Kt(\"tee\");\n        if (this.locked) throw new TypeError(\"Cannot tee a stream that already has a reader\");\n        return Ot(this);\n    }\n    values(e) {\n        if (!H(this)) throw Kt(\"values\");\n        return function(e, t) {\n            const r = e.getReader(), o = new te(r, t), n = Object.create(re);\n            return n._asyncIteratorImpl = o, n;\n        }(this, function(e, t) {\n            F(e, t);\n            const r = null == e ? void 0 : e.preventCancel;\n            return {\n                preventCancel: Boolean(r)\n            };\n        }(e, \"First parameter\").preventCancel);\n    }\n}\nfunction Vt(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_readableStreamController\") && e instanceof ReadableStream;\n}\nfunction Ut(e) {\n    return void 0 !== e._reader;\n}\nfunction Gt(e, r) {\n    if (e._disturbed = !0, \"closed\" === e._state) return c(void 0);\n    if (\"errored\" === e._state) return d(e._storedError);\n    Xt(e);\n    const o = e._reader;\n    if (void 0 !== o && Fe(o)) {\n        const e = o._readIntoRequests;\n        o._readIntoRequests = new S, e.forEach((e)=>{\n            e._closeSteps(void 0);\n        });\n    }\n    return p(e._readableStreamController[T](r), t);\n}\nfunction Xt(e) {\n    e._state = \"closed\";\n    const t = e._reader;\n    if (void 0 !== t && (j(t), K(t))) {\n        const e = t._readRequests;\n        t._readRequests = new S, e.forEach((e)=>{\n            e._closeSteps();\n        });\n    }\n}\nfunction Jt(e, t) {\n    e._state = \"errored\", e._storedError = t;\n    const r = e._reader;\n    void 0 !== r && (A(r, t), K(r) ? Z(r, t) : Ie(r, t));\n}\nfunction Kt(e) {\n    return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`);\n}\nfunction Zt(e, t) {\n    F(e, t);\n    const r = null == e ? void 0 : e.highWaterMark;\n    return M(r, \"highWaterMark\", \"QueuingStrategyInit\"), {\n        highWaterMark: Y(r)\n    };\n}\nObject.defineProperties(ReadableStream.prototype, {\n    cancel: {\n        enumerable: !0\n    },\n    getReader: {\n        enumerable: !0\n    },\n    pipeThrough: {\n        enumerable: !0\n    },\n    pipeTo: {\n        enumerable: !0\n    },\n    tee: {\n        enumerable: !0\n    },\n    values: {\n        enumerable: !0\n    },\n    locked: {\n        enumerable: !0\n    }\n}), n(ReadableStream.prototype.cancel, \"cancel\"), n(ReadableStream.prototype.getReader, \"getReader\"), n(ReadableStream.prototype.pipeThrough, \"pipeThrough\"), n(ReadableStream.prototype.pipeTo, \"pipeTo\"), n(ReadableStream.prototype.tee, \"tee\"), n(ReadableStream.prototype.values, \"values\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStream.prototype, e.toStringTag, {\n    value: \"ReadableStream\",\n    configurable: !0\n}), \"symbol\" == typeof e.asyncIterator && Object.defineProperty(ReadableStream.prototype, e.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: !0,\n    configurable: !0\n});\nconst er = (e)=>e.byteLength;\nn(er, \"size\");\nclass ByteLengthQueuingStrategy {\n    constructor(e){\n        $(e, 1, \"ByteLengthQueuingStrategy\"), e = Zt(e, \"First parameter\"), this._byteLengthQueuingStrategyHighWaterMark = e.highWaterMark;\n    }\n    get highWaterMark() {\n        if (!rr(this)) throw tr(\"highWaterMark\");\n        return this._byteLengthQueuingStrategyHighWaterMark;\n    }\n    get size() {\n        if (!rr(this)) throw tr(\"size\");\n        return er;\n    }\n}\nfunction tr(e) {\n    return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`);\n}\nfunction rr(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_byteLengthQueuingStrategyHighWaterMark\") && e instanceof ByteLengthQueuingStrategy;\n}\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n    highWaterMark: {\n        enumerable: !0\n    },\n    size: {\n        enumerable: !0\n    }\n}), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ByteLengthQueuingStrategy.prototype, e.toStringTag, {\n    value: \"ByteLengthQueuingStrategy\",\n    configurable: !0\n});\nconst or = ()=>1;\nn(or, \"size\");\nclass CountQueuingStrategy {\n    constructor(e){\n        $(e, 1, \"CountQueuingStrategy\"), e = Zt(e, \"First parameter\"), this._countQueuingStrategyHighWaterMark = e.highWaterMark;\n    }\n    get highWaterMark() {\n        if (!ar(this)) throw nr(\"highWaterMark\");\n        return this._countQueuingStrategyHighWaterMark;\n    }\n    get size() {\n        if (!ar(this)) throw nr(\"size\");\n        return or;\n    }\n}\nfunction nr(e) {\n    return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`);\n}\nfunction ar(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_countQueuingStrategyHighWaterMark\") && e instanceof CountQueuingStrategy;\n}\nfunction ir(e, t, r) {\n    return I(e, r), (r)=>w(e, t, [\n            r\n        ]);\n}\nfunction lr(e, t, r) {\n    return I(e, r), (r)=>g(e, t, [\n            r\n        ]);\n}\nfunction sr(e, t, r) {\n    return I(e, r), (r, o)=>w(e, t, [\n            r,\n            o\n        ]);\n}\nObject.defineProperties(CountQueuingStrategy.prototype, {\n    highWaterMark: {\n        enumerable: !0\n    },\n    size: {\n        enumerable: !0\n    }\n}), \"symbol\" == typeof e.toStringTag && Object.defineProperty(CountQueuingStrategy.prototype, e.toStringTag, {\n    value: \"CountQueuingStrategy\",\n    configurable: !0\n});\nclass TransformStream {\n    constructor(e = {}, t = {}, r = {}){\n        void 0 === e && (e = null);\n        const o = Ye(t, \"Second parameter\"), n = Ye(r, \"Third parameter\"), a = function(e, t) {\n            F(e, t);\n            const r = null == e ? void 0 : e.flush, o = null == e ? void 0 : e.readableType, n = null == e ? void 0 : e.start, a = null == e ? void 0 : e.transform, i = null == e ? void 0 : e.writableType;\n            return {\n                flush: void 0 === r ? void 0 : ir(r, e, `${t} has member 'flush' that`),\n                readableType: o,\n                start: void 0 === n ? void 0 : lr(n, e, `${t} has member 'start' that`),\n                transform: void 0 === a ? void 0 : sr(a, e, `${t} has member 'transform' that`),\n                writableType: i\n            };\n        }(e, \"First parameter\");\n        if (void 0 !== a.readableType) throw new RangeError(\"Invalid readableType specified\");\n        if (void 0 !== a.writableType) throw new RangeError(\"Invalid writableType specified\");\n        const i = $e(n, 0), l = Me(n), s = $e(o, 1), f = Me(o);\n        let b;\n        !function(e, t, r, o, n, a) {\n            function i() {\n                return t;\n            }\n            function l(t) {\n                return function(e, t) {\n                    const r = e._transformStreamController;\n                    if (e._backpressure) {\n                        return p(e._backpressureChangePromise, ()=>{\n                            if (\"erroring\" === (Ge(e._writable) ? e._writable._state : e._writableState)) throw Ge(e._writable) ? e._writable._storedError : e._writableStoredError;\n                            return pr(r, t);\n                        });\n                    }\n                    return pr(r, t);\n                }(e, t);\n            }\n            function s(t) {\n                return function(e, t) {\n                    return cr(e, t), c(void 0);\n                }(e, t);\n            }\n            function u() {\n                return function(e) {\n                    const t = e._transformStreamController, r = t._flushAlgorithm();\n                    return hr(t), p(r, ()=>{\n                        if (\"errored\" === e._readableState) throw e._readableStoredError;\n                        gr(e) && wr(e);\n                    }, (t)=>{\n                        throw cr(e, t), e._readableStoredError;\n                    });\n                }(e);\n            }\n            function d() {\n                return function(e) {\n                    return fr(e, !1), e._backpressureChangePromise;\n                }(e);\n            }\n            function f(t) {\n                return dr(e, t), c(void 0);\n            }\n            e._writableState = \"writable\", e._writableStoredError = void 0, e._writableHasInFlightOperation = !1, e._writableStarted = !1, e._writable = function(e, t, r, o, n, a, i) {\n                return new WritableStream({\n                    start (r) {\n                        e._writableController = r;\n                        try {\n                            const t = r.signal;\n                            void 0 !== t && t.addEventListener(\"abort\", ()=>{\n                                \"writable\" === e._writableState && (e._writableState = \"erroring\", t.reason && (e._writableStoredError = t.reason));\n                            });\n                        } catch (e) {}\n                        return p(t(), ()=>(e._writableStarted = !0, Cr(e), null), (t)=>{\n                            throw e._writableStarted = !0, Rr(e, t), t;\n                        });\n                    },\n                    write: (t)=>((function(e) {\n                            e._writableHasInFlightOperation = !0;\n                        })(e), p(r(t), ()=>((function(e) {\n                                e._writableHasInFlightOperation = !1;\n                            })(e), Cr(e), null), (t)=>{\n                            throw function(e, t) {\n                                e._writableHasInFlightOperation = !1, Rr(e, t);\n                            }(e, t), t;\n                        })),\n                    close: ()=>((function(e) {\n                            e._writableHasInFlightOperation = !0;\n                        })(e), p(o(), ()=>((function(e) {\n                                e._writableHasInFlightOperation = !1;\n                                \"erroring\" === e._writableState && (e._writableStoredError = void 0);\n                                e._writableState = \"closed\";\n                            })(e), null), (t)=>{\n                            throw function(e, t) {\n                                e._writableHasInFlightOperation = !1, e._writableState, Rr(e, t);\n                            }(e, t), t;\n                        })),\n                    abort: (t)=>(e._writableState = \"errored\", e._writableStoredError = t, n(t))\n                }, {\n                    highWaterMark: a,\n                    size: i\n                });\n            }(e, i, l, u, s, r, o), e._readableState = \"readable\", e._readableStoredError = void 0, e._readableCloseRequested = !1, e._readablePulling = !1, e._readable = function(e, t, r, o, n, a) {\n                return new ReadableStream({\n                    start: (r)=>(e._readableController = r, t().catch((t)=>{\n                            Sr(e, t);\n                        })),\n                    pull: ()=>(e._readablePulling = !0, r().catch((t)=>{\n                            Sr(e, t);\n                        })),\n                    cancel: (t)=>(e._readableState = \"closed\", o(t))\n                }, {\n                    highWaterMark: n,\n                    size: a\n                });\n            }(e, i, d, f, n, a), e._backpressure = void 0, e._backpressureChangePromise = void 0, e._backpressureChangePromise_resolve = void 0, fr(e, !0), e._transformStreamController = void 0;\n        }(this, u((e)=>{\n            b = e;\n        }), s, f, i, l), function(e, t) {\n            const r = Object.create(TransformStreamDefaultController.prototype);\n            let o, n;\n            o = void 0 !== t.transform ? (e)=>t.transform(e, r) : (e)=>{\n                try {\n                    return _r(r, e), c(void 0);\n                } catch (e) {\n                    return d(e);\n                }\n            };\n            n = void 0 !== t.flush ? ()=>t.flush(r) : ()=>c(void 0);\n            !function(e, t, r, o) {\n                t._controlledTransformStream = e, e._transformStreamController = t, t._transformAlgorithm = r, t._flushAlgorithm = o;\n            }(e, r, o, n);\n        }(this, a), void 0 !== a.start ? b(a.start(this._transformStreamController)) : b(void 0);\n    }\n    get readable() {\n        if (!ur(this)) throw yr(\"readable\");\n        return this._readable;\n    }\n    get writable() {\n        if (!ur(this)) throw yr(\"writable\");\n        return this._writable;\n    }\n}\nfunction ur(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_transformStreamController\") && e instanceof TransformStream;\n}\nfunction cr(e, t) {\n    Sr(e, t), dr(e, t);\n}\nfunction dr(e, t) {\n    hr(e._transformStreamController), function(e, t) {\n        e._writableController.error(t);\n        \"writable\" === e._writableState && Tr(e, t);\n    }(e, t), e._backpressure && fr(e, !1);\n}\nfunction fr(e, t) {\n    void 0 !== e._backpressureChangePromise && e._backpressureChangePromise_resolve(), e._backpressureChangePromise = u((t)=>{\n        e._backpressureChangePromise_resolve = t;\n    }), e._backpressure = t;\n}\nObject.defineProperties(TransformStream.prototype, {\n    readable: {\n        enumerable: !0\n    },\n    writable: {\n        enumerable: !0\n    }\n}), \"symbol\" == typeof e.toStringTag && Object.defineProperty(TransformStream.prototype, e.toStringTag, {\n    value: \"TransformStream\",\n    configurable: !0\n});\nclass TransformStreamDefaultController {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get desiredSize() {\n        if (!br(this)) throw mr(\"desiredSize\");\n        return vr(this._controlledTransformStream);\n    }\n    enqueue(e) {\n        if (!br(this)) throw mr(\"enqueue\");\n        _r(this, e);\n    }\n    error(e) {\n        if (!br(this)) throw mr(\"error\");\n        var t;\n        t = e, cr(this._controlledTransformStream, t);\n    }\n    terminate() {\n        if (!br(this)) throw mr(\"terminate\");\n        !function(e) {\n            const t = e._controlledTransformStream;\n            gr(t) && wr(t);\n            const r = new TypeError(\"TransformStream terminated\");\n            dr(t, r);\n        }(this);\n    }\n}\nfunction br(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_controlledTransformStream\") && e instanceof TransformStreamDefaultController;\n}\nfunction hr(e) {\n    e._transformAlgorithm = void 0, e._flushAlgorithm = void 0;\n}\nfunction _r(e, t) {\n    const r = e._controlledTransformStream;\n    if (!gr(r)) throw new TypeError(\"Readable side is not in a state that permits enqueue\");\n    try {\n        !function(e, t) {\n            e._readablePulling = !1;\n            try {\n                e._readableController.enqueue(t);\n            } catch (t) {\n                throw Sr(e, t), t;\n            }\n        }(r, t);\n    } catch (e) {\n        throw dr(r, e), r._readableStoredError;\n    }\n    const o = function(e) {\n        return !function(e) {\n            if (!gr(e)) return !1;\n            if (e._readablePulling) return !0;\n            if (vr(e) > 0) return !0;\n            return !1;\n        }(e);\n    }(r);\n    o !== r._backpressure && fr(r, !0);\n}\nfunction pr(e, t) {\n    return p(e._transformAlgorithm(t), void 0, (t)=>{\n        throw cr(e._controlledTransformStream, t), t;\n    });\n}\nfunction mr(e) {\n    return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`);\n}\nfunction yr(e) {\n    return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`);\n}\nfunction gr(e) {\n    return !e._readableCloseRequested && \"readable\" === e._readableState;\n}\nfunction wr(e) {\n    e._readableState = \"closed\", e._readableCloseRequested = !0, e._readableController.close();\n}\nfunction Sr(e, t) {\n    \"readable\" === e._readableState && (e._readableState = \"errored\", e._readableStoredError = t), e._readableController.error(t);\n}\nfunction vr(e) {\n    return e._readableController.desiredSize;\n}\nfunction Rr(e, t) {\n    \"writable\" !== e._writableState ? qr(e) : Tr(e, t);\n}\nfunction Tr(e, t) {\n    e._writableState = \"erroring\", e._writableStoredError = t, !function(e) {\n        return e._writableHasInFlightOperation;\n    }(e) && e._writableStarted && qr(e);\n}\nfunction qr(e) {\n    e._writableState = \"errored\";\n}\nfunction Cr(e) {\n    \"erroring\" === e._writableState && qr(e);\n}\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n    enqueue: {\n        enumerable: !0\n    },\n    error: {\n        enumerable: !0\n    },\n    terminate: {\n        enumerable: !0\n    },\n    desiredSize: {\n        enumerable: !0\n    }\n}), n(TransformStreamDefaultController.prototype.enqueue, \"enqueue\"), n(TransformStreamDefaultController.prototype.error, \"error\"), n(TransformStreamDefaultController.prototype.terminate, \"terminate\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(TransformStreamDefaultController.prototype, e.toStringTag, {\n    value: \"TransformStreamDefaultController\",\n    configurable: !0\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vd2ViLXN0cmVhbXMtcG9seWZpbGxANC4wLjAtYmV0YS4zL25vZGVfbW9kdWxlcy93ZWItc3RyZWFtcy1wb2x5ZmlsbC9kaXN0L3BvbnlmaWxsLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7OztDQU1DLEdBQ0QsTUFBTUEsSUFBRSxjQUFZLE9BQU9DLFVBQVEsWUFBVSxPQUFPQSxPQUFPQyxRQUFRLEdBQUNELFNBQU9ELENBQUFBLElBQUcsQ0FBQyxPQUFPLEVBQUVBLEVBQUUsQ0FBQyxDQUFDO0FBQUMsU0FBU0csS0FBSTtBQUFDLFNBQVNDLEVBQUVKLENBQUM7SUFBRSxPQUFNLFlBQVUsT0FBT0EsS0FBRyxTQUFPQSxLQUFHLGNBQVksT0FBT0E7QUFBQztBQUFDLE1BQU1LLElBQUVGO0FBQUUsU0FBU0csRUFBRU4sQ0FBQyxFQUFDRyxDQUFDO0lBQUUsSUFBRztRQUFDSSxPQUFPQyxjQUFjLENBQUNSLEdBQUUsUUFBTztZQUFDUyxPQUFNTjtZQUFFTyxjQUFhLENBQUM7UUFBQztJQUFFLEVBQUMsT0FBTVYsR0FBRSxDQUFDO0FBQUM7QUFBQyxNQUFNVyxJQUFFQyxTQUFRQyxJQUFFRCxRQUFRRSxTQUFTLENBQUNDLElBQUksRUFBQ0MsSUFBRUosUUFBUUssT0FBTyxDQUFDQyxJQUFJLENBQUNQLElBQUdRLElBQUVQLFFBQVFRLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDUDtBQUFHLFNBQVNVLEVBQUVyQixDQUFDO0lBQUUsT0FBTyxJQUFJVyxFQUFFWDtBQUFFO0FBQUMsU0FBU3NCLEVBQUV0QixDQUFDO0lBQUUsT0FBT2dCLEVBQUVoQjtBQUFFO0FBQUMsU0FBU3VCLEVBQUV2QixDQUFDO0lBQUUsT0FBT21CLEVBQUVuQjtBQUFFO0FBQUMsU0FBU3dCLEVBQUV4QixDQUFDLEVBQUNHLENBQUMsRUFBQ0MsQ0FBQztJQUFFLE9BQU9TLEVBQUVZLElBQUksQ0FBQ3pCLEdBQUVHLEdBQUVDO0FB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LFNBQVE7UUFBQzdELFlBQVcsQ0FBQztJQUFDO0lBQUV1RSxPQUFNO1FBQUN2RSxZQUFXLENBQUM7SUFBQztJQUFFMFIsV0FBVTtRQUFDMVIsWUFBVyxDQUFDO0lBQUM7SUFBRXNELGFBQVk7UUFBQ3RELFlBQVcsQ0FBQztJQUFDO0FBQUMsSUFBR2hILEVBQUVnWSxpQ0FBaUN4WCxTQUFTLENBQUNxSyxPQUFPLEVBQUMsWUFBVzdLLEVBQUVnWSxpQ0FBaUN4WCxTQUFTLENBQUMrSyxLQUFLLEVBQUMsVUFBU3ZMLEVBQUVnWSxpQ0FBaUN4WCxTQUFTLENBQUNrWSxTQUFTLEVBQUMsY0FBYSxZQUFVLE9BQU9oWixFQUFFdUgsV0FBVyxJQUFFaEgsT0FBT0MsY0FBYyxDQUFDOFgsaUNBQWlDeFgsU0FBUyxFQUFDZCxFQUFFdUgsV0FBVyxFQUFDO0lBQUM5RyxPQUFNO0lBQW1DQyxjQUFhLENBQUM7QUFBQztBQUFpViIsInNvdXJjZXMiOlsid2VicGFjazovL3BoLWNvcGlsb3QtZ3VpZGUtbGFuZGluZy1wYWdlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3dlYi1zdHJlYW1zLXBvbHlmaWxsQDQuMC4wLWJldGEuMy9ub2RlX21vZHVsZXMvd2ViLXN0cmVhbXMtcG9seWZpbGwvZGlzdC9wb255ZmlsbC5tanM/MzNjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiB3ZWItc3RyZWFtcy1wb2x5ZmlsbCB2NC4wLjAtYmV0YS4zXG4gKiBDb3B5cmlnaHQgMjAyMSBNYXR0aWFzIEJ1ZWxlbnMsIERpd2FuayBTaW5naCBUb21lciBhbmQgb3RoZXIgY29udHJpYnV0b3JzLlxuICogVGhpcyBjb2RlIGlzIHJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbiAqL1xuY29uc3QgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/U3ltYm9sOmU9PmBTeW1ib2woJHtlfSlgO2Z1bmN0aW9uIHQoKXt9ZnVuY3Rpb24gcihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGV9Y29uc3Qgbz10O2Z1bmN0aW9uIG4oZSx0KXt0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJuYW1lXCIse3ZhbHVlOnQsY29uZmlndXJhYmxlOiEwfSl9Y2F0Y2goZSl7fX1jb25zdCBhPVByb21pc2UsaT1Qcm9taXNlLnByb3RvdHlwZS50aGVuLGw9UHJvbWlzZS5yZXNvbHZlLmJpbmQoYSkscz1Qcm9taXNlLnJlamVjdC5iaW5kKGEpO2Z1bmN0aW9uIHUoZSl7cmV0dXJuIG5ldyBhKGUpfWZ1bmN0aW9uIGMoZSl7cmV0dXJuIGwoZSl9ZnVuY3Rpb24gZChlKXtyZXR1cm4gcyhlKX1mdW5jdGlvbiBmKGUsdCxyKXtyZXR1cm4gaS5jYWxsKGUsdCxyKX1mdW5jdGlvbiBiKGUsdCxyKXtmKGYoZSx0LHIpLHZvaWQgMCxvKX1mdW5jdGlvbiBoKGUsdCl7YihlLHQpfWZ1bmN0aW9uIF8oZSx0KXtiKGUsdm9pZCAwLHQpfWZ1bmN0aW9uIHAoZSx0LHIpe3JldHVybiBmKGUsdCxyKX1mdW5jdGlvbiBtKGUpe2YoZSx2b2lkIDAsbyl9bGV0IHk9ZT0+e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHF1ZXVlTWljcm90YXNrKXk9cXVldWVNaWNyb3Rhc2s7ZWxzZXtjb25zdCBlPWModm9pZCAwKTt5PXQ9PmYoZSx0KX1yZXR1cm4geShlKX07ZnVuY3Rpb24gZyhlLHQscil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgaXMgbm90IGEgZnVuY3Rpb25cIik7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGUsdCxyKX1mdW5jdGlvbiB3KGUsdCxyKXt0cnl7cmV0dXJuIGMoZyhlLHQscikpfWNhdGNoKGUpe3JldHVybiBkKGUpfX1jbGFzcyBTe2NvbnN0cnVjdG9yKCl7dGhpcy5fY3Vyc29yPTAsdGhpcy5fc2l6ZT0wLHRoaXMuX2Zyb250PXtfZWxlbWVudHM6W10sX25leHQ6dm9pZCAwfSx0aGlzLl9iYWNrPXRoaXMuX2Zyb250LHRoaXMuX2N1cnNvcj0wLHRoaXMuX3NpemU9MH1nZXQgbGVuZ3RoKCl7cmV0dXJuIHRoaXMuX3NpemV9cHVzaChlKXtjb25zdCB0PXRoaXMuX2JhY2s7bGV0IHI9dDsxNjM4Mz09PXQuX2VsZW1lbnRzLmxlbmd0aCYmKHI9e19lbGVtZW50czpbXSxfbmV4dDp2b2lkIDB9KSx0Ll9lbGVtZW50cy5wdXNoKGUpLHIhPT10JiYodGhpcy5fYmFjaz1yLHQuX25leHQ9ciksKyt0aGlzLl9zaXplfXNoaWZ0KCl7Y29uc3QgZT10aGlzLl9mcm9udDtsZXQgdD1lO2NvbnN0IHI9dGhpcy5fY3Vyc29yO2xldCBvPXIrMTtjb25zdCBuPWUuX2VsZW1lbnRzLGE9bltyXTtyZXR1cm4gMTYzODQ9PT1vJiYodD1lLl9uZXh0LG89MCksLS10aGlzLl9zaXplLHRoaXMuX2N1cnNvcj1vLGUhPT10JiYodGhpcy5fZnJvbnQ9dCksbltyXT12b2lkIDAsYX1mb3JFYWNoKGUpe2xldCB0PXRoaXMuX2N1cnNvcixyPXRoaXMuX2Zyb250LG89ci5fZWxlbWVudHM7Zm9yKDshKHQ9PT1vLmxlbmd0aCYmdm9pZCAwPT09ci5fbmV4dHx8dD09PW8ubGVuZ3RoJiYocj1yLl9uZXh0LG89ci5fZWxlbWVudHMsdD0wLDA9PT1vLmxlbmd0aCkpOyllKG9bdF0pLCsrdH1wZWVrKCl7Y29uc3QgZT10aGlzLl9mcm9udCx0PXRoaXMuX2N1cnNvcjtyZXR1cm4gZS5fZWxlbWVudHNbdF19fWNvbnN0IHY9ZShcIltbQWJvcnRTdGVwc11dXCIpLFI9ZShcIltbRXJyb3JTdGVwc11dXCIpLFQ9ZShcIltbQ2FuY2VsU3RlcHNdXVwiKSxxPWUoXCJbW1B1bGxTdGVwc11dXCIpLEM9ZShcIltbUmVsZWFzZVN0ZXBzXV1cIik7ZnVuY3Rpb24gRShlLHQpe2UuX293bmVyUmVhZGFibGVTdHJlYW09dCx0Ll9yZWFkZXI9ZSxcInJlYWRhYmxlXCI9PT10Ll9zdGF0ZT9PKGUpOlwiY2xvc2VkXCI9PT10Ll9zdGF0ZT9mdW5jdGlvbihlKXtPKGUpLGooZSl9KGUpOkIoZSx0Ll9zdG9yZWRFcnJvcil9ZnVuY3Rpb24gUChlLHQpe3JldHVybiBHdChlLl9vd25lclJlYWRhYmxlU3RyZWFtLHQpfWZ1bmN0aW9uIFcoZSl7Y29uc3QgdD1lLl9vd25lclJlYWRhYmxlU3RyZWFtO1wicmVhZGFibGVcIj09PXQuX3N0YXRlP0EoZSxuZXcgVHlwZUVycm9yKFwiUmVhZGVyIHdhcyByZWxlYXNlZCBhbmQgY2FuIG5vIGxvbmdlciBiZSB1c2VkIHRvIG1vbml0b3IgdGhlIHN0cmVhbSdzIGNsb3NlZG5lc3NcIikpOmZ1bmN0aW9uKGUsdCl7QihlLHQpfShlLG5ldyBUeXBlRXJyb3IoXCJSZWFkZXIgd2FzIHJlbGVhc2VkIGFuZCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgdG8gbW9uaXRvciB0aGUgc3RyZWFtJ3MgY2xvc2VkbmVzc1wiKSksdC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyW0NdKCksdC5fcmVhZGVyPXZvaWQgMCxlLl9vd25lclJlYWRhYmxlU3RyZWFtPXZvaWQgMH1mdW5jdGlvbiBrKGUpe3JldHVybiBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IFwiK2UrXCIgYSBzdHJlYW0gdXNpbmcgYSByZWxlYXNlZCByZWFkZXJcIil9ZnVuY3Rpb24gTyhlKXtlLl9jbG9zZWRQcm9taXNlPXUoKCh0LHIpPT57ZS5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlPXQsZS5fY2xvc2VkUHJvbWlzZV9yZWplY3Q9cn0pKX1mdW5jdGlvbiBCKGUsdCl7TyhlKSxBKGUsdCl9ZnVuY3Rpb24gQShlLHQpe3ZvaWQgMCE9PWUuX2Nsb3NlZFByb21pc2VfcmVqZWN0JiYobShlLl9jbG9zZWRQcm9taXNlKSxlLl9jbG9zZWRQcm9taXNlX3JlamVjdCh0KSxlLl9jbG9zZWRQcm9taXNlX3Jlc29sdmU9dm9pZCAwLGUuX2Nsb3NlZFByb21pc2VfcmVqZWN0PXZvaWQgMCl9ZnVuY3Rpb24gaihlKXt2b2lkIDAhPT1lLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUmJihlLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUodm9pZCAwKSxlLl9jbG9zZWRQcm9taXNlX3Jlc29sdmU9dm9pZCAwLGUuX2Nsb3NlZFByb21pc2VfcmVqZWN0PXZvaWQgMCl9Y29uc3Qgej1OdW1iZXIuaXNGaW5pdGV8fGZ1bmN0aW9uKGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlJiZpc0Zpbml0ZShlKX0sTD1NYXRoLnRydW5jfHxmdW5jdGlvbihlKXtyZXR1cm4gZTwwP01hdGguY2VpbChlKTpNYXRoLmZsb29yKGUpfTtmdW5jdGlvbiBGKGUsdCl7aWYodm9pZCAwIT09ZSYmKFwib2JqZWN0XCIhPXR5cGVvZihyPWUpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiByKSl0aHJvdyBuZXcgVHlwZUVycm9yKGAke3R9IGlzIG5vdCBhbiBvYmplY3QuYCk7dmFyIHJ9ZnVuY3Rpb24gSShlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0fSBpcyBub3QgYSBmdW5jdGlvbi5gKX1mdW5jdGlvbiBEKGUsdCl7aWYoIWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZX0oZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0fSBpcyBub3QgYW4gb2JqZWN0LmApfWZ1bmN0aW9uICQoZSx0LHIpe2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyICR7dH0gaXMgcmVxdWlyZWQgaW4gJyR7cn0nLmApfWZ1bmN0aW9uIE0oZSx0LHIpe2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0fSBpcyByZXF1aXJlZCBpbiAnJHtyfScuYCl9ZnVuY3Rpb24gWShlKXtyZXR1cm4gTnVtYmVyKGUpfWZ1bmN0aW9uIFEoZSl7cmV0dXJuIDA9PT1lPzA6ZX1mdW5jdGlvbiBOKGUsdCl7Y29uc3Qgcj1OdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtsZXQgbz1OdW1iZXIoZSk7aWYobz1RKG8pLCF6KG8pKXRocm93IG5ldyBUeXBlRXJyb3IoYCR7dH0gaXMgbm90IGEgZmluaXRlIG51bWJlcmApO2lmKG89ZnVuY3Rpb24oZSl7cmV0dXJuIFEoTChlKSl9KG8pLG88MHx8bz5yKXRocm93IG5ldyBUeXBlRXJyb3IoYCR7dH0gaXMgb3V0c2lkZSB0aGUgYWNjZXB0ZWQgcmFuZ2Ugb2YgMCB0byAke3J9LCBpbmNsdXNpdmVgKTtyZXR1cm4geihvKSYmMCE9PW8/bzowfWZ1bmN0aW9uIEgoZSl7aWYoIXIoZSkpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZS5nZXRSZWFkZXIpcmV0dXJuITE7dHJ5e3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgZS5sb2NrZWR9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIHgoZSl7aWYoIXIoZSkpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZS5nZXRXcml0ZXIpcmV0dXJuITE7dHJ5e3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgZS5sb2NrZWR9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIFYoZSx0KXtpZighVnQoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0fSBpcyBub3QgYSBSZWFkYWJsZVN0cmVhbS5gKX1mdW5jdGlvbiBVKGUsdCl7ZS5fcmVhZGVyLl9yZWFkUmVxdWVzdHMucHVzaCh0KX1mdW5jdGlvbiBHKGUsdCxyKXtjb25zdCBvPWUuX3JlYWRlci5fcmVhZFJlcXVlc3RzLnNoaWZ0KCk7cj9vLl9jbG9zZVN0ZXBzKCk6by5fY2h1bmtTdGVwcyh0KX1mdW5jdGlvbiBYKGUpe3JldHVybiBlLl9yZWFkZXIuX3JlYWRSZXF1ZXN0cy5sZW5ndGh9ZnVuY3Rpb24gSihlKXtjb25zdCB0PWUuX3JlYWRlcjtyZXR1cm4gdm9pZCAwIT09dCYmISFLKHQpfWNsYXNzIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcntjb25zdHJ1Y3RvcihlKXtpZigkKGUsMSxcIlJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlclwiKSxWKGUsXCJGaXJzdCBwYXJhbWV0ZXJcIiksVXQoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoaXMgc3RyZWFtIGhhcyBhbHJlYWR5IGJlZW4gbG9ja2VkIGZvciBleGNsdXNpdmUgcmVhZGluZyBieSBhbm90aGVyIHJlYWRlclwiKTtFKHRoaXMsZSksdGhpcy5fcmVhZFJlcXVlc3RzPW5ldyBTfWdldCBjbG9zZWQoKXtyZXR1cm4gSyh0aGlzKT90aGlzLl9jbG9zZWRQcm9taXNlOmQoZWUoXCJjbG9zZWRcIikpfWNhbmNlbChlKXtyZXR1cm4gSyh0aGlzKT92b2lkIDA9PT10aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtP2QoayhcImNhbmNlbFwiKSk6UCh0aGlzLGUpOmQoZWUoXCJjYW5jZWxcIikpfXJlYWQoKXtpZighSyh0aGlzKSlyZXR1cm4gZChlZShcInJlYWRcIikpO2lmKHZvaWQgMD09PXRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0pcmV0dXJuIGQoayhcInJlYWQgZnJvbVwiKSk7bGV0IGUsdDtjb25zdCByPXUoKChyLG8pPT57ZT1yLHQ9b30pKTtyZXR1cm4gZnVuY3Rpb24oZSx0KXtjb25zdCByPWUuX293bmVyUmVhZGFibGVTdHJlYW07ci5fZGlzdHVyYmVkPSEwLFwiY2xvc2VkXCI9PT1yLl9zdGF0ZT90Ll9jbG9zZVN0ZXBzKCk6XCJlcnJvcmVkXCI9PT1yLl9zdGF0ZT90Ll9lcnJvclN0ZXBzKHIuX3N0b3JlZEVycm9yKTpyLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXJbcV0odCl9KHRoaXMse19jaHVua1N0ZXBzOnQ9PmUoe3ZhbHVlOnQsZG9uZTohMX0pLF9jbG9zZVN0ZXBzOigpPT5lKHt2YWx1ZTp2b2lkIDAsZG9uZTohMH0pLF9lcnJvclN0ZXBzOmU9PnQoZSl9KSxyfXJlbGVhc2VMb2NrKCl7aWYoIUsodGhpcykpdGhyb3cgZWUoXCJyZWxlYXNlTG9ja1wiKTt2b2lkIDAhPT10aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtJiZmdW5jdGlvbihlKXtXKGUpO2NvbnN0IHQ9bmV3IFR5cGVFcnJvcihcIlJlYWRlciB3YXMgcmVsZWFzZWRcIik7WihlLHQpfSh0aGlzKX19ZnVuY3Rpb24gSyhlKXtyZXR1cm4hIXIoZSkmJighIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiX3JlYWRSZXF1ZXN0c1wiKSYmZSBpbnN0YW5jZW9mIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcil9ZnVuY3Rpb24gWihlLHQpe2NvbnN0IHI9ZS5fcmVhZFJlcXVlc3RzO2UuX3JlYWRSZXF1ZXN0cz1uZXcgUyxyLmZvckVhY2goKGU9PntlLl9lcnJvclN0ZXBzKHQpfSkpfWZ1bmN0aW9uIGVlKGUpe3JldHVybiBuZXcgVHlwZUVycm9yKGBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIucHJvdG90eXBlLiR7ZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcmApfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlci5wcm90b3R5cGUse2NhbmNlbDp7ZW51bWVyYWJsZTohMH0scmVhZDp7ZW51bWVyYWJsZTohMH0scmVsZWFzZUxvY2s6e2VudW1lcmFibGU6ITB9LGNsb3NlZDp7ZW51bWVyYWJsZTohMH19KSxuKFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlci5wcm90b3R5cGUuY2FuY2VsLFwiY2FuY2VsXCIpLG4oUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLnByb3RvdHlwZS5yZWFkLFwicmVhZFwiKSxuKFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlci5wcm90b3R5cGUucmVsZWFzZUxvY2ssXCJyZWxlYXNlTG9ja1wiKSxcInN5bWJvbFwiPT10eXBlb2YgZS50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlci5wcm90b3R5cGUsZS50b1N0cmluZ1RhZyx7dmFsdWU6XCJSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJcIixjb25maWd1cmFibGU6ITB9KTtjbGFzcyB0ZXtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuX29uZ29pbmdQcm9taXNlPXZvaWQgMCx0aGlzLl9pc0ZpbmlzaGVkPSExLHRoaXMuX3JlYWRlcj1lLHRoaXMuX3ByZXZlbnRDYW5jZWw9dH1uZXh0KCl7Y29uc3QgZT0oKT0+dGhpcy5fbmV4dFN0ZXBzKCk7cmV0dXJuIHRoaXMuX29uZ29pbmdQcm9taXNlPXRoaXMuX29uZ29pbmdQcm9taXNlP3AodGhpcy5fb25nb2luZ1Byb21pc2UsZSxlKTplKCksdGhpcy5fb25nb2luZ1Byb21pc2V9cmV0dXJuKGUpe2NvbnN0IHQ9KCk9PnRoaXMuX3JldHVyblN0ZXBzKGUpO3JldHVybiB0aGlzLl9vbmdvaW5nUHJvbWlzZT9wKHRoaXMuX29uZ29pbmdQcm9taXNlLHQsdCk6dCgpfV9uZXh0U3RlcHMoKXtpZih0aGlzLl9pc0ZpbmlzaGVkKXJldHVybiBQcm9taXNlLnJlc29sdmUoe3ZhbHVlOnZvaWQgMCxkb25lOiEwfSk7Y29uc3QgZT10aGlzLl9yZWFkZXI7cmV0dXJuIHZvaWQgMD09PWU/ZChrKFwiaXRlcmF0ZVwiKSk6ZihlLnJlYWQoKSwoZT0+e3ZhciB0O3JldHVybiB0aGlzLl9vbmdvaW5nUHJvbWlzZT12b2lkIDAsZS5kb25lJiYodGhpcy5faXNGaW5pc2hlZD0hMCxudWxsPT09KHQ9dGhpcy5fcmVhZGVyKXx8dm9pZCAwPT09dHx8dC5yZWxlYXNlTG9jaygpLHRoaXMuX3JlYWRlcj12b2lkIDApLGV9KSwoZT0+e3ZhciB0O3Rocm93IHRoaXMuX29uZ29pbmdQcm9taXNlPXZvaWQgMCx0aGlzLl9pc0ZpbmlzaGVkPSEwLG51bGw9PT0odD10aGlzLl9yZWFkZXIpfHx2b2lkIDA9PT10fHx0LnJlbGVhc2VMb2NrKCksdGhpcy5fcmVhZGVyPXZvaWQgMCxlfSkpfV9yZXR1cm5TdGVwcyhlKXtpZih0aGlzLl9pc0ZpbmlzaGVkKXJldHVybiBQcm9taXNlLnJlc29sdmUoe3ZhbHVlOmUsZG9uZTohMH0pO3RoaXMuX2lzRmluaXNoZWQ9ITA7Y29uc3QgdD10aGlzLl9yZWFkZXI7aWYodm9pZCAwPT09dClyZXR1cm4gZChrKFwiZmluaXNoIGl0ZXJhdGluZ1wiKSk7aWYodGhpcy5fcmVhZGVyPXZvaWQgMCwhdGhpcy5fcHJldmVudENhbmNlbCl7Y29uc3Qgcj10LmNhbmNlbChlKTtyZXR1cm4gdC5yZWxlYXNlTG9jaygpLHAociwoKCk9Pih7dmFsdWU6ZSxkb25lOiEwfSkpKX1yZXR1cm4gdC5yZWxlYXNlTG9jaygpLGMoe3ZhbHVlOmUsZG9uZTohMH0pfX1jb25zdCByZT17bmV4dCgpe3JldHVybiBvZSh0aGlzKT90aGlzLl9hc3luY0l0ZXJhdG9ySW1wbC5uZXh0KCk6ZChuZShcIm5leHRcIikpfSxyZXR1cm4oZSl7cmV0dXJuIG9lKHRoaXMpP3RoaXMuX2FzeW5jSXRlcmF0b3JJbXBsLnJldHVybihlKTpkKG5lKFwicmV0dXJuXCIpKX19O2Z1bmN0aW9uIG9lKGUpe2lmKCFyKGUpKXJldHVybiExO2lmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcIl9hc3luY0l0ZXJhdG9ySW1wbFwiKSlyZXR1cm4hMTt0cnl7cmV0dXJuIGUuX2FzeW5jSXRlcmF0b3JJbXBsIGluc3RhbmNlb2YgdGV9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIG5lKGUpe3JldHVybiBuZXcgVHlwZUVycm9yKGBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IuJHtlfSBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdGVhbUFzeW5jSXRlcmF0b3JgKX1cInN5bWJvbFwiPT10eXBlb2YgZS5hc3luY0l0ZXJhdG9yJiZPYmplY3QuZGVmaW5lUHJvcGVydHkocmUsZS5hc3luY0l0ZXJhdG9yLHt2YWx1ZSgpe3JldHVybiB0aGlzfSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9KTtjb25zdCBhZT1OdW1iZXIuaXNOYU58fGZ1bmN0aW9uKGUpe3JldHVybiBlIT1lfTtmdW5jdGlvbiBpZShlLHQscixvLG4pe25ldyBVaW50OEFycmF5KGUpLnNldChuZXcgVWludDhBcnJheShyLG8sbiksdCl9ZnVuY3Rpb24gbGUoZSl7Y29uc3QgdD1mdW5jdGlvbihlLHQscil7aWYoZS5zbGljZSlyZXR1cm4gZS5zbGljZSh0LHIpO2NvbnN0IG89ci10LG49bmV3IEFycmF5QnVmZmVyKG8pO3JldHVybiBpZShuLDAsZSx0LG8pLG59KGUuYnVmZmVyLGUuYnl0ZU9mZnNldCxlLmJ5dGVPZmZzZXQrZS5ieXRlTGVuZ3RoKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkodCl9ZnVuY3Rpb24gc2UoZSl7Y29uc3QgdD1lLl9xdWV1ZS5zaGlmdCgpO3JldHVybiBlLl9xdWV1ZVRvdGFsU2l6ZS09dC5zaXplLGUuX3F1ZXVlVG90YWxTaXplPDAmJihlLl9xdWV1ZVRvdGFsU2l6ZT0wKSx0LnZhbHVlfWZ1bmN0aW9uIHVlKGUsdCxyKXtpZihcIm51bWJlclwiIT10eXBlb2Yobz1yKXx8YWUobyl8fG88MHx8cj09PTEvMCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlNpemUgbXVzdCBiZSBhIGZpbml0ZSwgbm9uLU5hTiwgbm9uLW5lZ2F0aXZlIG51bWJlci5cIik7dmFyIG87ZS5fcXVldWUucHVzaCh7dmFsdWU6dCxzaXplOnJ9KSxlLl9xdWV1ZVRvdGFsU2l6ZSs9cn1mdW5jdGlvbiBjZShlKXtlLl9xdWV1ZT1uZXcgUyxlLl9xdWV1ZVRvdGFsU2l6ZT0wfWNsYXNzIFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3R7Y29uc3RydWN0b3IoKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBjb25zdHJ1Y3RvclwiKX1nZXQgdmlldygpe2lmKCFmZSh0aGlzKSl0aHJvdyBCZShcInZpZXdcIik7cmV0dXJuIHRoaXMuX3ZpZXd9cmVzcG9uZChlKXtpZighZmUodGhpcykpdGhyb3cgQmUoXCJyZXNwb25kXCIpO2lmKCQoZSwxLFwicmVzcG9uZFwiKSxlPU4oZSxcIkZpcnN0IHBhcmFtZXRlclwiKSx2b2lkIDA9PT10aGlzLl9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcil0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhpcyBCWU9CIHJlcXVlc3QgaGFzIGJlZW4gaW52YWxpZGF0ZWRcIik7dGhpcy5fdmlldy5idWZmZXIsZnVuY3Rpb24oZSx0KXtjb25zdCByPWUuX3BlbmRpbmdQdWxsSW50b3MucGVlaygpO2lmKFwiY2xvc2VkXCI9PT1lLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZSl7aWYoMCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcImJ5dGVzV3JpdHRlbiBtdXN0IGJlIDAgd2hlbiBjYWxsaW5nIHJlc3BvbmQoKSBvbiBhIGNsb3NlZCBzdHJlYW1cIil9ZWxzZXtpZigwPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYnl0ZXNXcml0dGVuIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAgd2hlbiBjYWxsaW5nIHJlc3BvbmQoKSBvbiBhIHJlYWRhYmxlIHN0cmVhbVwiKTtpZihyLmJ5dGVzRmlsbGVkK3Q+ci5ieXRlTGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiYnl0ZXNXcml0dGVuIG91dCBvZiByYW5nZVwiKX1yLmJ1ZmZlcj1yLmJ1ZmZlcixxZShlLHQpfSh0aGlzLl9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcixlKX1yZXNwb25kV2l0aE5ld1ZpZXcoZSl7aWYoIWZlKHRoaXMpKXRocm93IEJlKFwicmVzcG9uZFdpdGhOZXdWaWV3XCIpO2lmKCQoZSwxLFwicmVzcG9uZFdpdGhOZXdWaWV3XCIpLCFBcnJheUJ1ZmZlci5pc1ZpZXcoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBjYW4gb25seSByZXNwb25kIHdpdGggYXJyYXkgYnVmZmVyIHZpZXdzXCIpO2lmKHZvaWQgMD09PXRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGlzIEJZT0IgcmVxdWVzdCBoYXMgYmVlbiBpbnZhbGlkYXRlZFwiKTtlLmJ1ZmZlcixmdW5jdGlvbihlLHQpe2NvbnN0IHI9ZS5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7aWYoXCJjbG9zZWRcIj09PWUuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0uX3N0YXRlKXtpZigwIT09dC5ieXRlTGVuZ3RoKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgdmlldydzIGxlbmd0aCBtdXN0IGJlIDAgd2hlbiBjYWxsaW5nIHJlc3BvbmRXaXRoTmV3VmlldygpIG9uIGEgY2xvc2VkIHN0cmVhbVwiKX1lbHNlIGlmKDA9PT10LmJ5dGVMZW5ndGgpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSB2aWV3J3MgbGVuZ3RoIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAgd2hlbiBjYWxsaW5nIHJlc3BvbmRXaXRoTmV3VmlldygpIG9uIGEgcmVhZGFibGUgc3RyZWFtXCIpO2lmKHIuYnl0ZU9mZnNldCtyLmJ5dGVzRmlsbGVkIT09dC5ieXRlT2Zmc2V0KXRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIHJlZ2lvbiBzcGVjaWZpZWQgYnkgdmlldyBkb2VzIG5vdCBtYXRjaCBieW9iUmVxdWVzdFwiKTtpZihyLmJ1ZmZlckJ5dGVMZW5ndGghPT10LmJ1ZmZlci5ieXRlTGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIGJ1ZmZlciBvZiB2aWV3IGhhcyBkaWZmZXJlbnQgY2FwYWNpdHkgdGhhbiBieW9iUmVxdWVzdFwiKTtpZihyLmJ5dGVzRmlsbGVkK3QuYnl0ZUxlbmd0aD5yLmJ5dGVMZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUaGUgcmVnaW9uIHNwZWNpZmllZCBieSB2aWV3IGlzIGxhcmdlciB0aGFuIGJ5b2JSZXF1ZXN0XCIpO2NvbnN0IG89dC5ieXRlTGVuZ3RoO3IuYnVmZmVyPXQuYnVmZmVyLHFlKGUsbyl9KHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLGUpfX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LnByb3RvdHlwZSx7cmVzcG9uZDp7ZW51bWVyYWJsZTohMH0scmVzcG9uZFdpdGhOZXdWaWV3OntlbnVtZXJhYmxlOiEwfSx2aWV3OntlbnVtZXJhYmxlOiEwfX0pLG4oUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUucmVzcG9uZCxcInJlc3BvbmRcIiksbihSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LnByb3RvdHlwZS5yZXNwb25kV2l0aE5ld1ZpZXcsXCJyZXNwb25kV2l0aE5ld1ZpZXdcIiksXCJzeW1ib2xcIj09dHlwZW9mIGUudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LnByb3RvdHlwZSxlLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIlJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3RcIixjb25maWd1cmFibGU6ITB9KTtjbGFzcyBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVye2NvbnN0cnVjdG9yKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgY29uc3RydWN0b3JcIil9Z2V0IGJ5b2JSZXF1ZXN0KCl7aWYoIWRlKHRoaXMpKXRocm93IEFlKFwiYnlvYlJlcXVlc3RcIik7cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lLl9ieW9iUmVxdWVzdCYmZS5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGg+MCl7Y29uc3QgdD1lLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKSxyPW5ldyBVaW50OEFycmF5KHQuYnVmZmVyLHQuYnl0ZU9mZnNldCt0LmJ5dGVzRmlsbGVkLHQuYnl0ZUxlbmd0aC10LmJ5dGVzRmlsbGVkKSxvPU9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUpOyFmdW5jdGlvbihlLHQscil7ZS5fYXNzb2NpYXRlZFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXI9dCxlLl92aWV3PXJ9KG8sZSxyKSxlLl9ieW9iUmVxdWVzdD1vfXJldHVybiBlLl9ieW9iUmVxdWVzdH0odGhpcyl9Z2V0IGRlc2lyZWRTaXplKCl7aWYoIWRlKHRoaXMpKXRocm93IEFlKFwiZGVzaXJlZFNpemVcIik7cmV0dXJuIGtlKHRoaXMpfWNsb3NlKCl7aWYoIWRlKHRoaXMpKXRocm93IEFlKFwiY2xvc2VcIik7aWYodGhpcy5fY2xvc2VSZXF1ZXN0ZWQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQ7IGRvIG5vdCBjbG9zZSBpdCBhZ2FpbiFcIik7Y29uc3QgZT10aGlzLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZTtpZihcInJlYWRhYmxlXCIhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoYFRoZSBzdHJlYW0gKGluICR7ZX0gc3RhdGUpIGlzIG5vdCBpbiB0aGUgcmVhZGFibGUgc3RhdGUgYW5kIGNhbm5vdCBiZSBjbG9zZWRgKTshZnVuY3Rpb24oZSl7Y29uc3QgdD1lLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO2lmKGUuX2Nsb3NlUmVxdWVzdGVkfHxcInJlYWRhYmxlXCIhPT10Ll9zdGF0ZSlyZXR1cm47aWYoZS5fcXVldWVUb3RhbFNpemU+MClyZXR1cm4gdm9pZChlLl9jbG9zZVJlcXVlc3RlZD0hMCk7aWYoZS5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGg+MCl7aWYoZS5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCkuYnl0ZXNGaWxsZWQ+MCl7Y29uc3QgdD1uZXcgVHlwZUVycm9yKFwiSW5zdWZmaWNpZW50IGJ5dGVzIHRvIGZpbGwgZWxlbWVudHMgaW4gdGhlIGdpdmVuIGJ1ZmZlclwiKTt0aHJvdyBQZShlLHQpLHR9fUVlKGUpLFh0KHQpfSh0aGlzKX1lbnF1ZXVlKGUpe2lmKCFkZSh0aGlzKSl0aHJvdyBBZShcImVucXVldWVcIik7aWYoJChlLDEsXCJlbnF1ZXVlXCIpLCFBcnJheUJ1ZmZlci5pc1ZpZXcoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImNodW5rIG11c3QgYmUgYW4gYXJyYXkgYnVmZmVyIHZpZXdcIik7aWYoMD09PWUuYnl0ZUxlbmd0aCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2h1bmsgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGhcIik7aWYoMD09PWUuYnVmZmVyLmJ5dGVMZW5ndGgpdGhyb3cgbmV3IFR5cGVFcnJvcihcImNodW5rJ3MgYnVmZmVyIG11c3QgaGF2ZSBub24temVybyBieXRlTGVuZ3RoXCIpO2lmKHRoaXMuX2Nsb3NlUmVxdWVzdGVkKXRocm93IG5ldyBUeXBlRXJyb3IoXCJzdHJlYW0gaXMgY2xvc2VkIG9yIGRyYWluaW5nXCIpO2NvbnN0IHQ9dGhpcy5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbS5fc3RhdGU7aWYoXCJyZWFkYWJsZVwiIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgc3RyZWFtIChpbiAke3R9IHN0YXRlKSBpcyBub3QgaW4gdGhlIHJlYWRhYmxlIHN0YXRlIGFuZCBjYW5ub3QgYmUgZW5xdWV1ZWQgdG9gKTshZnVuY3Rpb24oZSx0KXtjb25zdCByPWUuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW07aWYoZS5fY2xvc2VSZXF1ZXN0ZWR8fFwicmVhZGFibGVcIiE9PXIuX3N0YXRlKXJldHVybjtjb25zdCBvPXQuYnVmZmVyLG49dC5ieXRlT2Zmc2V0LGE9dC5ieXRlTGVuZ3RoLGk9bztpZihlLl9wZW5kaW5nUHVsbEludG9zLmxlbmd0aD4wKXtjb25zdCB0PWUuX3BlbmRpbmdQdWxsSW50b3MucGVlaygpO3QuYnVmZmVyLDAsUmUoZSksdC5idWZmZXI9dC5idWZmZXIsXCJub25lXCI9PT10LnJlYWRlclR5cGUmJmdlKGUsdCl9aWYoSihyKSlpZihmdW5jdGlvbihlKXtjb25zdCB0PWUuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0uX3JlYWRlcjtmb3IoO3QuX3JlYWRSZXF1ZXN0cy5sZW5ndGg+MDspe2lmKDA9PT1lLl9xdWV1ZVRvdGFsU2l6ZSlyZXR1cm47V2UoZSx0Ll9yZWFkUmVxdWVzdHMuc2hpZnQoKSl9fShlKSwwPT09WChyKSltZShlLGksbixhKTtlbHNle2UuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoPjAmJkNlKGUpO0cocixuZXcgVWludDhBcnJheShpLG4sYSksITEpfWVsc2UgTGUocik/KG1lKGUsaSxuLGEpLFRlKGUpKTptZShlLGksbixhKTtiZShlKX0odGhpcyxlKX1lcnJvcihlKXtpZighZGUodGhpcykpdGhyb3cgQWUoXCJlcnJvclwiKTtQZSh0aGlzLGUpfVtUXShlKXtoZSh0aGlzKSxjZSh0aGlzKTtjb25zdCB0PXRoaXMuX2NhbmNlbEFsZ29yaXRobShlKTtyZXR1cm4gRWUodGhpcyksdH1bcV0oZSl7Y29uc3QgdD10aGlzLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO2lmKHRoaXMuX3F1ZXVlVG90YWxTaXplPjApcmV0dXJuIHZvaWQgV2UodGhpcyxlKTtjb25zdCByPXRoaXMuX2F1dG9BbGxvY2F0ZUNodW5rU2l6ZTtpZih2b2lkIDAhPT1yKXtsZXQgdDt0cnl7dD1uZXcgQXJyYXlCdWZmZXIocil9Y2F0Y2godCl7cmV0dXJuIHZvaWQgZS5fZXJyb3JTdGVwcyh0KX1jb25zdCBvPXtidWZmZXI6dCxidWZmZXJCeXRlTGVuZ3RoOnIsYnl0ZU9mZnNldDowLGJ5dGVMZW5ndGg6cixieXRlc0ZpbGxlZDowLGVsZW1lbnRTaXplOjEsdmlld0NvbnN0cnVjdG9yOlVpbnQ4QXJyYXkscmVhZGVyVHlwZTpcImRlZmF1bHRcIn07dGhpcy5fcGVuZGluZ1B1bGxJbnRvcy5wdXNoKG8pfVUodCxlKSxiZSh0aGlzKX1bQ10oKXtpZih0aGlzLl9wZW5kaW5nUHVsbEludG9zLmxlbmd0aD4wKXtjb25zdCBlPXRoaXMuX3BlbmRpbmdQdWxsSW50b3MucGVlaygpO2UucmVhZGVyVHlwZT1cIm5vbmVcIix0aGlzLl9wZW5kaW5nUHVsbEludG9zPW5ldyBTLHRoaXMuX3BlbmRpbmdQdWxsSW50b3MucHVzaChlKX19fWZ1bmN0aW9uIGRlKGUpe3JldHVybiEhcihlKSYmKCEhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJfY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbVwiKSYmZSBpbnN0YW5jZW9mIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIpfWZ1bmN0aW9uIGZlKGUpe3JldHVybiEhcihlKSYmKCEhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJfYXNzb2NpYXRlZFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJcIikmJmUgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0KX1mdW5jdGlvbiBiZShlKXtjb25zdCB0PWZ1bmN0aW9uKGUpe2NvbnN0IHQ9ZS5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTtpZihcInJlYWRhYmxlXCIhPT10Ll9zdGF0ZSlyZXR1cm4hMTtpZihlLl9jbG9zZVJlcXVlc3RlZClyZXR1cm4hMTtpZighZS5fc3RhcnRlZClyZXR1cm4hMTtpZihKKHQpJiZYKHQpPjApcmV0dXJuITA7aWYoTGUodCkmJnplKHQpPjApcmV0dXJuITA7aWYoa2UoZSk+MClyZXR1cm4hMDtyZXR1cm4hMX0oZSk7aWYoIXQpcmV0dXJuO2lmKGUuX3B1bGxpbmcpcmV0dXJuIHZvaWQoZS5fcHVsbEFnYWluPSEwKTtlLl9wdWxsaW5nPSEwO2IoZS5fcHVsbEFsZ29yaXRobSgpLCgoKT0+KGUuX3B1bGxpbmc9ITEsZS5fcHVsbEFnYWluJiYoZS5fcHVsbEFnYWluPSExLGJlKGUpKSxudWxsKSksKHQ9PihQZShlLHQpLG51bGwpKSl9ZnVuY3Rpb24gaGUoZSl7UmUoZSksZS5fcGVuZGluZ1B1bGxJbnRvcz1uZXcgU31mdW5jdGlvbiBfZShlLHQpe2xldCByPSExO1wiY2xvc2VkXCI9PT1lLl9zdGF0ZSYmKHI9ITApO2NvbnN0IG89cGUodCk7XCJkZWZhdWx0XCI9PT10LnJlYWRlclR5cGU/RyhlLG8scik6ZnVuY3Rpb24oZSx0LHIpe2NvbnN0IG89ZS5fcmVhZGVyLl9yZWFkSW50b1JlcXVlc3RzLnNoaWZ0KCk7cj9vLl9jbG9zZVN0ZXBzKHQpOm8uX2NodW5rU3RlcHModCl9KGUsbyxyKX1mdW5jdGlvbiBwZShlKXtjb25zdCB0PWUuYnl0ZXNGaWxsZWQscj1lLmVsZW1lbnRTaXplO3JldHVybiBuZXcgZS52aWV3Q29uc3RydWN0b3IoZS5idWZmZXIsZS5ieXRlT2Zmc2V0LHQvcil9ZnVuY3Rpb24gbWUoZSx0LHIsbyl7ZS5fcXVldWUucHVzaCh7YnVmZmVyOnQsYnl0ZU9mZnNldDpyLGJ5dGVMZW5ndGg6b30pLGUuX3F1ZXVlVG90YWxTaXplKz1vfWZ1bmN0aW9uIHllKGUsdCxyLG8pe2xldCBuO3RyeXtuPXQuc2xpY2UocixyK28pfWNhdGNoKHQpe3Rocm93IFBlKGUsdCksdH1tZShlLG4sMCxvKX1mdW5jdGlvbiBnZShlLHQpe3QuYnl0ZXNGaWxsZWQ+MCYmeWUoZSx0LmJ1ZmZlcix0LmJ5dGVPZmZzZXQsdC5ieXRlc0ZpbGxlZCksQ2UoZSl9ZnVuY3Rpb24gd2UoZSx0KXtjb25zdCByPXQuZWxlbWVudFNpemUsbz10LmJ5dGVzRmlsbGVkLXQuYnl0ZXNGaWxsZWQlcixuPU1hdGgubWluKGUuX3F1ZXVlVG90YWxTaXplLHQuYnl0ZUxlbmd0aC10LmJ5dGVzRmlsbGVkKSxhPXQuYnl0ZXNGaWxsZWQrbixpPWEtYSVyO2xldCBsPW4scz0hMTtpPm8mJihsPWktdC5ieXRlc0ZpbGxlZCxzPSEwKTtjb25zdCB1PWUuX3F1ZXVlO2Zvcig7bD4wOyl7Y29uc3Qgcj11LnBlZWsoKSxvPU1hdGgubWluKGwsci5ieXRlTGVuZ3RoKSxuPXQuYnl0ZU9mZnNldCt0LmJ5dGVzRmlsbGVkO2llKHQuYnVmZmVyLG4sci5idWZmZXIsci5ieXRlT2Zmc2V0LG8pLHIuYnl0ZUxlbmd0aD09PW8/dS5zaGlmdCgpOihyLmJ5dGVPZmZzZXQrPW8sci5ieXRlTGVuZ3RoLT1vKSxlLl9xdWV1ZVRvdGFsU2l6ZS09byxTZShlLG8sdCksbC09b31yZXR1cm4gc31mdW5jdGlvbiBTZShlLHQscil7ci5ieXRlc0ZpbGxlZCs9dH1mdW5jdGlvbiB2ZShlKXswPT09ZS5fcXVldWVUb3RhbFNpemUmJmUuX2Nsb3NlUmVxdWVzdGVkPyhFZShlKSxYdChlLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtKSk6YmUoZSl9ZnVuY3Rpb24gUmUoZSl7bnVsbCE9PWUuX2J5b2JSZXF1ZXN0JiYoZS5fYnlvYlJlcXVlc3QuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyPXZvaWQgMCxlLl9ieW9iUmVxdWVzdC5fdmlldz1udWxsLGUuX2J5b2JSZXF1ZXN0PW51bGwpfWZ1bmN0aW9uIFRlKGUpe2Zvcig7ZS5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGg+MDspe2lmKDA9PT1lLl9xdWV1ZVRvdGFsU2l6ZSlyZXR1cm47Y29uc3QgdD1lLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTt3ZShlLHQpJiYoQ2UoZSksX2UoZS5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbSx0KSl9fWZ1bmN0aW9uIHFlKGUsdCl7Y29uc3Qgcj1lLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTtSZShlKTtcImNsb3NlZFwiPT09ZS5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbS5fc3RhdGU/ZnVuY3Rpb24oZSx0KXtcIm5vbmVcIj09PXQucmVhZGVyVHlwZSYmQ2UoZSk7Y29uc3Qgcj1lLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO2lmKExlKHIpKWZvcig7emUocik+MDspX2UocixDZShlKSl9KGUscik6ZnVuY3Rpb24oZSx0LHIpe2lmKFNlKDAsdCxyKSxcIm5vbmVcIj09PXIucmVhZGVyVHlwZSlyZXR1cm4gZ2UoZSxyKSx2b2lkIFRlKGUpO2lmKHIuYnl0ZXNGaWxsZWQ8ci5lbGVtZW50U2l6ZSlyZXR1cm47Q2UoZSk7Y29uc3Qgbz1yLmJ5dGVzRmlsbGVkJXIuZWxlbWVudFNpemU7aWYobz4wKXtjb25zdCB0PXIuYnl0ZU9mZnNldCtyLmJ5dGVzRmlsbGVkO3llKGUsci5idWZmZXIsdC1vLG8pfXIuYnl0ZXNGaWxsZWQtPW8sX2UoZS5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbSxyKSxUZShlKX0oZSx0LHIpLGJlKGUpfWZ1bmN0aW9uIENlKGUpe3JldHVybiBlLl9wZW5kaW5nUHVsbEludG9zLnNoaWZ0KCl9ZnVuY3Rpb24gRWUoZSl7ZS5fcHVsbEFsZ29yaXRobT12b2lkIDAsZS5fY2FuY2VsQWxnb3JpdGhtPXZvaWQgMH1mdW5jdGlvbiBQZShlLHQpe2NvbnN0IHI9ZS5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTtcInJlYWRhYmxlXCI9PT1yLl9zdGF0ZSYmKGhlKGUpLGNlKGUpLEVlKGUpLEp0KHIsdCkpfWZ1bmN0aW9uIFdlKGUsdCl7Y29uc3Qgcj1lLl9xdWV1ZS5zaGlmdCgpO2UuX3F1ZXVlVG90YWxTaXplLT1yLmJ5dGVMZW5ndGgsdmUoZSk7Y29uc3Qgbz1uZXcgVWludDhBcnJheShyLmJ1ZmZlcixyLmJ5dGVPZmZzZXQsci5ieXRlTGVuZ3RoKTt0Ll9jaHVua1N0ZXBzKG8pfWZ1bmN0aW9uIGtlKGUpe2NvbnN0IHQ9ZS5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbS5fc3RhdGU7cmV0dXJuXCJlcnJvcmVkXCI9PT10P251bGw6XCJjbG9zZWRcIj09PXQ/MDplLl9zdHJhdGVneUhXTS1lLl9xdWV1ZVRvdGFsU2l6ZX1mdW5jdGlvbiBPZShlLHQscil7Y29uc3Qgbz1PYmplY3QuY3JlYXRlKFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlKTtsZXQgbixhLGk7bj12b2lkIDAhPT10LnN0YXJ0PygpPT50LnN0YXJ0KG8pOigpPT57fSxhPXZvaWQgMCE9PXQucHVsbD8oKT0+dC5wdWxsKG8pOigpPT5jKHZvaWQgMCksaT12b2lkIDAhPT10LmNhbmNlbD9lPT50LmNhbmNlbChlKTooKT0+Yyh2b2lkIDApO2NvbnN0IGw9dC5hdXRvQWxsb2NhdGVDaHVua1NpemU7aWYoMD09PWwpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF1dG9BbGxvY2F0ZUNodW5rU2l6ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwXCIpOyFmdW5jdGlvbihlLHQscixvLG4sYSxpKXt0Ll9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtPWUsdC5fcHVsbEFnYWluPSExLHQuX3B1bGxpbmc9ITEsdC5fYnlvYlJlcXVlc3Q9bnVsbCx0Ll9xdWV1ZT10Ll9xdWV1ZVRvdGFsU2l6ZT12b2lkIDAsY2UodCksdC5fY2xvc2VSZXF1ZXN0ZWQ9ITEsdC5fc3RhcnRlZD0hMSx0Ll9zdHJhdGVneUhXTT1hLHQuX3B1bGxBbGdvcml0aG09byx0Ll9jYW5jZWxBbGdvcml0aG09bix0Ll9hdXRvQWxsb2NhdGVDaHVua1NpemU9aSx0Ll9wZW5kaW5nUHVsbEludG9zPW5ldyBTLGUuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcj10LGIoYyhyKCkpLCgoKT0+KHQuX3N0YXJ0ZWQ9ITAsYmUodCksbnVsbCkpLChlPT4oUGUodCxlKSxudWxsKSkpfShlLG8sbixhLGkscixsKX1mdW5jdGlvbiBCZShlKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihgUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUuJHtlfSBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdGApfWZ1bmN0aW9uIEFlKGUpe3JldHVybiBuZXcgVHlwZUVycm9yKGBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS4ke2V9IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyYCl9ZnVuY3Rpb24gamUoZSx0KXtlLl9yZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMucHVzaCh0KX1mdW5jdGlvbiB6ZShlKXtyZXR1cm4gZS5fcmVhZGVyLl9yZWFkSW50b1JlcXVlc3RzLmxlbmd0aH1mdW5jdGlvbiBMZShlKXtjb25zdCB0PWUuX3JlYWRlcjtyZXR1cm4gdm9pZCAwIT09dCYmISFGZSh0KX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZSx7Y2xvc2U6e2VudW1lcmFibGU6ITB9LGVucXVldWU6e2VudW1lcmFibGU6ITB9LGVycm9yOntlbnVtZXJhYmxlOiEwfSxieW9iUmVxdWVzdDp7ZW51bWVyYWJsZTohMH0sZGVzaXJlZFNpemU6e2VudW1lcmFibGU6ITB9fSksbihSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSxcImNsb3NlXCIpLG4oUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUuZW5xdWV1ZSxcImVucXVldWVcIiksbihSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZS5lcnJvcixcImVycm9yXCIpLFwic3ltYm9sXCI9PXR5cGVvZiBlLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUsZS50b1N0cmluZ1RhZyx7dmFsdWU6XCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyXCIsY29uZmlndXJhYmxlOiEwfSk7Y2xhc3MgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVye2NvbnN0cnVjdG9yKGUpe2lmKCQoZSwxLFwiUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyXCIpLFYoZSxcIkZpcnN0IHBhcmFtZXRlclwiKSxVdChlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhpcyBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBsb2NrZWQgZm9yIGV4Y2x1c2l2ZSByZWFkaW5nIGJ5IGFub3RoZXIgcmVhZGVyXCIpO2lmKCFkZShlLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY29uc3RydWN0IGEgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyIGZvciBhIHN0cmVhbSBub3QgY29uc3RydWN0ZWQgd2l0aCBhIGJ5dGUgc291cmNlXCIpO0UodGhpcyxlKSx0aGlzLl9yZWFkSW50b1JlcXVlc3RzPW5ldyBTfWdldCBjbG9zZWQoKXtyZXR1cm4gRmUodGhpcyk/dGhpcy5fY2xvc2VkUHJvbWlzZTpkKERlKFwiY2xvc2VkXCIpKX1jYW5jZWwoZSl7cmV0dXJuIEZlKHRoaXMpP3ZvaWQgMD09PXRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0/ZChrKFwiY2FuY2VsXCIpKTpQKHRoaXMsZSk6ZChEZShcImNhbmNlbFwiKSl9cmVhZChlKXtpZighRmUodGhpcykpcmV0dXJuIGQoRGUoXCJyZWFkXCIpKTtpZighQXJyYXlCdWZmZXIuaXNWaWV3KGUpKXJldHVybiBkKG5ldyBUeXBlRXJyb3IoXCJ2aWV3IG11c3QgYmUgYW4gYXJyYXkgYnVmZmVyIHZpZXdcIikpO2lmKDA9PT1lLmJ5dGVMZW5ndGgpcmV0dXJuIGQobmV3IFR5cGVFcnJvcihcInZpZXcgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGhcIikpO2lmKDA9PT1lLmJ1ZmZlci5ieXRlTGVuZ3RoKXJldHVybiBkKG5ldyBUeXBlRXJyb3IoXCJ2aWV3J3MgYnVmZmVyIG11c3QgaGF2ZSBub24temVybyBieXRlTGVuZ3RoXCIpKTtpZihlLmJ1ZmZlcix2b2lkIDA9PT10aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtKXJldHVybiBkKGsoXCJyZWFkIGZyb21cIikpO2xldCB0LHI7Y29uc3Qgbz11KCgoZSxvKT0+e3Q9ZSxyPW99KSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCxyKXtjb25zdCBvPWUuX293bmVyUmVhZGFibGVTdHJlYW07by5fZGlzdHVyYmVkPSEwLFwiZXJyb3JlZFwiPT09by5fc3RhdGU/ci5fZXJyb3JTdGVwcyhvLl9zdG9yZWRFcnJvcik6ZnVuY3Rpb24oZSx0LHIpe2NvbnN0IG89ZS5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTtsZXQgbj0xO3QuY29uc3RydWN0b3IhPT1EYXRhVmlldyYmKG49dC5jb25zdHJ1Y3Rvci5CWVRFU19QRVJfRUxFTUVOVCk7Y29uc3QgYT10LmNvbnN0cnVjdG9yLGk9dC5idWZmZXIsbD17YnVmZmVyOmksYnVmZmVyQnl0ZUxlbmd0aDppLmJ5dGVMZW5ndGgsYnl0ZU9mZnNldDp0LmJ5dGVPZmZzZXQsYnl0ZUxlbmd0aDp0LmJ5dGVMZW5ndGgsYnl0ZXNGaWxsZWQ6MCxlbGVtZW50U2l6ZTpuLHZpZXdDb25zdHJ1Y3RvcjphLHJlYWRlclR5cGU6XCJieW9iXCJ9O2lmKGUuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoPjApcmV0dXJuIGUuX3BlbmRpbmdQdWxsSW50b3MucHVzaChsKSx2b2lkIGplKG8scik7aWYoXCJjbG9zZWRcIiE9PW8uX3N0YXRlKXtpZihlLl9xdWV1ZVRvdGFsU2l6ZT4wKXtpZih3ZShlLGwpKXtjb25zdCB0PXBlKGwpO3JldHVybiB2ZShlKSx2b2lkIHIuX2NodW5rU3RlcHModCl9aWYoZS5fY2xvc2VSZXF1ZXN0ZWQpe2NvbnN0IHQ9bmV3IFR5cGVFcnJvcihcIkluc3VmZmljaWVudCBieXRlcyB0byBmaWxsIGVsZW1lbnRzIGluIHRoZSBnaXZlbiBidWZmZXJcIik7cmV0dXJuIFBlKGUsdCksdm9pZCByLl9lcnJvclN0ZXBzKHQpfX1lLl9wZW5kaW5nUHVsbEludG9zLnB1c2gobCksamUobyxyKSxiZShlKX1lbHNle2NvbnN0IGU9bmV3IGEobC5idWZmZXIsbC5ieXRlT2Zmc2V0LDApO3IuX2Nsb3NlU3RlcHMoZSl9fShvLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsdCxyKX0odGhpcyxlLHtfY2h1bmtTdGVwczplPT50KHt2YWx1ZTplLGRvbmU6ITF9KSxfY2xvc2VTdGVwczplPT50KHt2YWx1ZTplLGRvbmU6ITB9KSxfZXJyb3JTdGVwczplPT5yKGUpfSksb31yZWxlYXNlTG9jaygpe2lmKCFGZSh0aGlzKSl0aHJvdyBEZShcInJlbGVhc2VMb2NrXCIpO3ZvaWQgMCE9PXRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0mJmZ1bmN0aW9uKGUpe1coZSk7Y29uc3QgdD1uZXcgVHlwZUVycm9yKFwiUmVhZGVyIHdhcyByZWxlYXNlZFwiKTtJZShlLHQpfSh0aGlzKX19ZnVuY3Rpb24gRmUoZSl7cmV0dXJuISFyKGUpJiYoISFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcIl9yZWFkSW50b1JlcXVlc3RzXCIpJiZlIGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKX1mdW5jdGlvbiBJZShlLHQpe2NvbnN0IHI9ZS5fcmVhZEludG9SZXF1ZXN0cztlLl9yZWFkSW50b1JlcXVlc3RzPW5ldyBTLHIuZm9yRWFjaCgoZT0+e2UuX2Vycm9yU3RlcHModCl9KSl9ZnVuY3Rpb24gRGUoZSl7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlci5wcm90b3R5cGUuJHtlfSBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyYCl9ZnVuY3Rpb24gJGUoZSx0KXtjb25zdHtoaWdoV2F0ZXJNYXJrOnJ9PWU7aWYodm9pZCAwPT09cilyZXR1cm4gdDtpZihhZShyKXx8cjwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBoaWdoV2F0ZXJNYXJrXCIpO3JldHVybiByfWZ1bmN0aW9uIE1lKGUpe2NvbnN0e3NpemU6dH09ZTtyZXR1cm4gdHx8KCgpPT4xKX1mdW5jdGlvbiBZZShlLHQpe0YoZSx0KTtjb25zdCByPW51bGw9PWU/dm9pZCAwOmUuaGlnaFdhdGVyTWFyayxvPW51bGw9PWU/dm9pZCAwOmUuc2l6ZTtyZXR1cm57aGlnaFdhdGVyTWFyazp2b2lkIDA9PT1yP3ZvaWQgMDpZKHIpLHNpemU6dm9pZCAwPT09bz92b2lkIDA6UWUobyxgJHt0fSBoYXMgbWVtYmVyICdzaXplJyB0aGF0YCl9fWZ1bmN0aW9uIFFlKGUsdCl7cmV0dXJuIEkoZSx0KSx0PT5ZKGUodCkpfWZ1bmN0aW9uIE5lKGUsdCxyKXtyZXR1cm4gSShlLHIpLHI9PncoZSx0LFtyXSl9ZnVuY3Rpb24gSGUoZSx0LHIpe3JldHVybiBJKGUsciksKCk9PncoZSx0LFtdKX1mdW5jdGlvbiB4ZShlLHQscil7cmV0dXJuIEkoZSxyKSxyPT5nKGUsdCxbcl0pfWZ1bmN0aW9uIFZlKGUsdCxyKXtyZXR1cm4gSShlLHIpLChyLG8pPT53KGUsdCxbcixvXSl9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZSx7Y2FuY2VsOntlbnVtZXJhYmxlOiEwfSxyZWFkOntlbnVtZXJhYmxlOiEwfSxyZWxlYXNlTG9jazp7ZW51bWVyYWJsZTohMH0sY2xvc2VkOntlbnVtZXJhYmxlOiEwfX0pLG4oUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZS5jYW5jZWwsXCJjYW5jZWxcIiksbihSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIucHJvdG90eXBlLnJlYWQsXCJyZWFkXCIpLG4oUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZS5yZWxlYXNlTG9jayxcInJlbGVhc2VMb2NrXCIpLFwic3ltYm9sXCI9PXR5cGVvZiBlLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZSxlLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIlJlYWRhYmxlU3RyZWFtQllPQlJlYWRlclwiLGNvbmZpZ3VyYWJsZTohMH0pO2NvbnN0IFVlPVwiZnVuY3Rpb25cIj09dHlwZW9mIEFib3J0Q29udHJvbGxlcjtjbGFzcyBXcml0YWJsZVN0cmVhbXtjb25zdHJ1Y3RvcihlPXt9LHQ9e30pe3ZvaWQgMD09PWU/ZT1udWxsOkQoZSxcIkZpcnN0IHBhcmFtZXRlclwiKTtjb25zdCByPVllKHQsXCJTZWNvbmQgcGFyYW1ldGVyXCIpLG89ZnVuY3Rpb24oZSx0KXtGKGUsdCk7Y29uc3Qgcj1udWxsPT1lP3ZvaWQgMDplLmFib3J0LG89bnVsbD09ZT92b2lkIDA6ZS5jbG9zZSxuPW51bGw9PWU/dm9pZCAwOmUuc3RhcnQsYT1udWxsPT1lP3ZvaWQgMDplLnR5cGUsaT1udWxsPT1lP3ZvaWQgMDplLndyaXRlO3JldHVybnthYm9ydDp2b2lkIDA9PT1yP3ZvaWQgMDpOZShyLGUsYCR7dH0gaGFzIG1lbWJlciAnYWJvcnQnIHRoYXRgKSxjbG9zZTp2b2lkIDA9PT1vP3ZvaWQgMDpIZShvLGUsYCR7dH0gaGFzIG1lbWJlciAnY2xvc2UnIHRoYXRgKSxzdGFydDp2b2lkIDA9PT1uP3ZvaWQgMDp4ZShuLGUsYCR7dH0gaGFzIG1lbWJlciAnc3RhcnQnIHRoYXRgKSx3cml0ZTp2b2lkIDA9PT1pP3ZvaWQgMDpWZShpLGUsYCR7dH0gaGFzIG1lbWJlciAnd3JpdGUnIHRoYXRgKSx0eXBlOmF9fShlLFwiRmlyc3QgcGFyYW1ldGVyXCIpO3ZhciBuOyhuPXRoaXMpLl9zdGF0ZT1cIndyaXRhYmxlXCIsbi5fc3RvcmVkRXJyb3I9dm9pZCAwLG4uX3dyaXRlcj12b2lkIDAsbi5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyPXZvaWQgMCxuLl93cml0ZVJlcXVlc3RzPW5ldyBTLG4uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0PXZvaWQgMCxuLl9jbG9zZVJlcXVlc3Q9dm9pZCAwLG4uX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0PXZvaWQgMCxuLl9wZW5kaW5nQWJvcnRSZXF1ZXN0PXZvaWQgMCxuLl9iYWNrcHJlc3N1cmU9ITE7aWYodm9pZCAwIT09by50eXBlKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB0eXBlIGlzIHNwZWNpZmllZFwiKTtjb25zdCBhPU1lKHIpOyFmdW5jdGlvbihlLHQscixvKXtjb25zdCBuPU9iamVjdC5jcmVhdGUoV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUpO2xldCBhLGksbCxzO2E9dm9pZCAwIT09dC5zdGFydD8oKT0+dC5zdGFydChuKTooKT0+e307aT12b2lkIDAhPT10LndyaXRlP2U9PnQud3JpdGUoZSxuKTooKT0+Yyh2b2lkIDApO2w9dm9pZCAwIT09dC5jbG9zZT8oKT0+dC5jbG9zZSgpOigpPT5jKHZvaWQgMCk7cz12b2lkIDAhPT10LmFib3J0P2U9PnQuYWJvcnQoZSk6KCk9PmModm9pZCAwKTshZnVuY3Rpb24oZSx0LHIsbyxuLGEsaSxsKXt0Ll9jb250cm9sbGVkV3JpdGFibGVTdHJlYW09ZSxlLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXI9dCx0Ll9xdWV1ZT12b2lkIDAsdC5fcXVldWVUb3RhbFNpemU9dm9pZCAwLGNlKHQpLHQuX2Fib3J0UmVhc29uPXZvaWQgMCx0Ll9hYm9ydENvbnRyb2xsZXI9ZnVuY3Rpb24oKXtpZihVZSlyZXR1cm4gbmV3IEFib3J0Q29udHJvbGxlcn0oKSx0Ll9zdGFydGVkPSExLHQuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobT1sLHQuX3N0cmF0ZWd5SFdNPWksdC5fd3JpdGVBbGdvcml0aG09byx0Ll9jbG9zZUFsZ29yaXRobT1uLHQuX2Fib3J0QWxnb3JpdGhtPWE7Y29uc3Qgcz1idCh0KTtudChlLHMpO2NvbnN0IHU9cigpO2IoYyh1KSwoKCk9Pih0Ll9zdGFydGVkPSEwLGR0KHQpLG51bGwpKSwocj0+KHQuX3N0YXJ0ZWQ9ITAsWmUoZSxyKSxudWxsKSkpfShlLG4sYSxpLGwscyxyLG8pfSh0aGlzLG8sJGUociwxKSxhKX1nZXQgbG9ja2VkKCl7aWYoIUdlKHRoaXMpKXRocm93IF90KFwibG9ja2VkXCIpO3JldHVybiBYZSh0aGlzKX1hYm9ydChlKXtyZXR1cm4gR2UodGhpcyk/WGUodGhpcyk/ZChuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFib3J0IGEgc3RyZWFtIHRoYXQgYWxyZWFkeSBoYXMgYSB3cml0ZXJcIikpOkplKHRoaXMsZSk6ZChfdChcImFib3J0XCIpKX1jbG9zZSgpe3JldHVybiBHZSh0aGlzKT9YZSh0aGlzKT9kKG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2xvc2UgYSBzdHJlYW0gdGhhdCBhbHJlYWR5IGhhcyBhIHdyaXRlclwiKSk6cnQodGhpcyk/ZChuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNsb3NlIGFuIGFscmVhZHktY2xvc2luZyBzdHJlYW1cIikpOktlKHRoaXMpOmQoX3QoXCJjbG9zZVwiKSl9Z2V0V3JpdGVyKCl7aWYoIUdlKHRoaXMpKXRocm93IF90KFwiZ2V0V3JpdGVyXCIpO3JldHVybiBuZXcgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHRoaXMpfX1mdW5jdGlvbiBHZShlKXtyZXR1cm4hIXIoZSkmJighIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlclwiKSYmZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RyZWFtKX1mdW5jdGlvbiBYZShlKXtyZXR1cm4gdm9pZCAwIT09ZS5fd3JpdGVyfWZ1bmN0aW9uIEplKGUsdCl7dmFyIHI7aWYoXCJjbG9zZWRcIj09PWUuX3N0YXRlfHxcImVycm9yZWRcIj09PWUuX3N0YXRlKXJldHVybiBjKHZvaWQgMCk7ZS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyLl9hYm9ydFJlYXNvbj10LG51bGw9PT0ocj1lLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXIuX2Fib3J0Q29udHJvbGxlcil8fHZvaWQgMD09PXJ8fHIuYWJvcnQodCk7Y29uc3Qgbz1lLl9zdGF0ZTtpZihcImNsb3NlZFwiPT09b3x8XCJlcnJvcmVkXCI9PT1vKXJldHVybiBjKHZvaWQgMCk7aWYodm9pZCAwIT09ZS5fcGVuZGluZ0Fib3J0UmVxdWVzdClyZXR1cm4gZS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcHJvbWlzZTtsZXQgbj0hMTtcImVycm9yaW5nXCI9PT1vJiYobj0hMCx0PXZvaWQgMCk7Y29uc3QgYT11KCgocixvKT0+e2UuX3BlbmRpbmdBYm9ydFJlcXVlc3Q9e19wcm9taXNlOnZvaWQgMCxfcmVzb2x2ZTpyLF9yZWplY3Q6byxfcmVhc29uOnQsX3dhc0FscmVhZHlFcnJvcmluZzpufX0pKTtyZXR1cm4gZS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcHJvbWlzZT1hLG58fGV0KGUsdCksYX1mdW5jdGlvbiBLZShlKXtjb25zdCB0PWUuX3N0YXRlO2lmKFwiY2xvc2VkXCI9PT10fHxcImVycm9yZWRcIj09PXQpcmV0dXJuIGQobmV3IFR5cGVFcnJvcihgVGhlIHN0cmVhbSAoaW4gJHt0fSBzdGF0ZSkgaXMgbm90IGluIHRoZSB3cml0YWJsZSBzdGF0ZSBhbmQgY2Fubm90IGJlIGNsb3NlZGApKTtjb25zdCByPXUoKCh0LHIpPT57Y29uc3Qgbz17X3Jlc29sdmU6dCxfcmVqZWN0OnJ9O2UuX2Nsb3NlUmVxdWVzdD1vfSkpLG89ZS5fd3JpdGVyO3ZhciBuO3JldHVybiB2b2lkIDAhPT1vJiZlLl9iYWNrcHJlc3N1cmUmJlwid3JpdGFibGVcIj09PXQmJkV0KG8pLHVlKG49ZS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyLGx0LDApLGR0KG4pLHJ9ZnVuY3Rpb24gWmUoZSx0KXtcIndyaXRhYmxlXCIhPT1lLl9zdGF0ZT90dChlKTpldChlLHQpfWZ1bmN0aW9uIGV0KGUsdCl7Y29uc3Qgcj1lLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXI7ZS5fc3RhdGU9XCJlcnJvcmluZ1wiLGUuX3N0b3JlZEVycm9yPXQ7Y29uc3Qgbz1lLl93cml0ZXI7dm9pZCAwIT09byYmaXQobyx0KSwhZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZS5faW5GbGlnaHRXcml0ZVJlcXVlc3QmJnZvaWQgMD09PWUuX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0KXJldHVybiExO3JldHVybiEwfShlKSYmci5fc3RhcnRlZCYmdHQoZSl9ZnVuY3Rpb24gdHQoZSl7ZS5fc3RhdGU9XCJlcnJvcmVkXCIsZS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyW1JdKCk7Y29uc3QgdD1lLl9zdG9yZWRFcnJvcjtpZihlLl93cml0ZVJlcXVlc3RzLmZvckVhY2goKGU9PntlLl9yZWplY3QodCl9KSksZS5fd3JpdGVSZXF1ZXN0cz1uZXcgUyx2b2lkIDA9PT1lLl9wZW5kaW5nQWJvcnRSZXF1ZXN0KXJldHVybiB2b2lkIG90KGUpO2NvbnN0IHI9ZS5fcGVuZGluZ0Fib3J0UmVxdWVzdDtpZihlLl9wZW5kaW5nQWJvcnRSZXF1ZXN0PXZvaWQgMCxyLl93YXNBbHJlYWR5RXJyb3JpbmcpcmV0dXJuIHIuX3JlamVjdCh0KSx2b2lkIG90KGUpO2IoZS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyW3ZdKHIuX3JlYXNvbiksKCgpPT4oci5fcmVzb2x2ZSgpLG90KGUpLG51bGwpKSwodD0+KHIuX3JlamVjdCh0KSxvdChlKSxudWxsKSkpfWZ1bmN0aW9uIHJ0KGUpe3JldHVybiB2b2lkIDAhPT1lLl9jbG9zZVJlcXVlc3R8fHZvaWQgMCE9PWUuX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0fWZ1bmN0aW9uIG90KGUpe3ZvaWQgMCE9PWUuX2Nsb3NlUmVxdWVzdCYmKGUuX2Nsb3NlUmVxdWVzdC5fcmVqZWN0KGUuX3N0b3JlZEVycm9yKSxlLl9jbG9zZVJlcXVlc3Q9dm9pZCAwKTtjb25zdCB0PWUuX3dyaXRlcjt2b2lkIDAhPT10JiZTdCh0LGUuX3N0b3JlZEVycm9yKX1mdW5jdGlvbiBudChlLHQpe2NvbnN0IHI9ZS5fd3JpdGVyO3ZvaWQgMCE9PXImJnQhPT1lLl9iYWNrcHJlc3N1cmUmJih0P2Z1bmN0aW9uKGUpe1J0KGUpfShyKTpFdChyKSksZS5fYmFja3ByZXNzdXJlPXR9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoV3JpdGFibGVTdHJlYW0ucHJvdG90eXBlLHthYm9ydDp7ZW51bWVyYWJsZTohMH0sY2xvc2U6e2VudW1lcmFibGU6ITB9LGdldFdyaXRlcjp7ZW51bWVyYWJsZTohMH0sbG9ja2VkOntlbnVtZXJhYmxlOiEwfX0pLG4oV3JpdGFibGVTdHJlYW0ucHJvdG90eXBlLmFib3J0LFwiYWJvcnRcIiksbihXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUuY2xvc2UsXCJjbG9zZVwiKSxuKFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZS5nZXRXcml0ZXIsXCJnZXRXcml0ZXJcIiksXCJzeW1ib2xcIj09dHlwZW9mIGUudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUsZS50b1N0cmluZ1RhZyx7dmFsdWU6XCJXcml0YWJsZVN0cmVhbVwiLGNvbmZpZ3VyYWJsZTohMH0pO2NsYXNzIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcntjb25zdHJ1Y3RvcihlKXtpZigkKGUsMSxcIldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlclwiKSxmdW5jdGlvbihlLHQpe2lmKCFHZShlKSl0aHJvdyBuZXcgVHlwZUVycm9yKGAke3R9IGlzIG5vdCBhIFdyaXRhYmxlU3RyZWFtLmApfShlLFwiRmlyc3QgcGFyYW1ldGVyXCIpLFhlKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGlzIHN0cmVhbSBoYXMgYWxyZWFkeSBiZWVuIGxvY2tlZCBmb3IgZXhjbHVzaXZlIHdyaXRpbmcgYnkgYW5vdGhlciB3cml0ZXJcIik7dGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbT1lLGUuX3dyaXRlcj10aGlzO2NvbnN0IHQ9ZS5fc3RhdGU7aWYoXCJ3cml0YWJsZVwiPT09dCkhcnQoZSkmJmUuX2JhY2twcmVzc3VyZT9SdCh0aGlzKTpxdCh0aGlzKSxndCh0aGlzKTtlbHNlIGlmKFwiZXJyb3JpbmdcIj09PXQpVHQodGhpcyxlLl9zdG9yZWRFcnJvciksZ3QodGhpcyk7ZWxzZSBpZihcImNsb3NlZFwiPT09dClxdCh0aGlzKSxndChyPXRoaXMpLHZ0KHIpO2Vsc2V7Y29uc3QgdD1lLl9zdG9yZWRFcnJvcjtUdCh0aGlzLHQpLHd0KHRoaXMsdCl9dmFyIHJ9Z2V0IGNsb3NlZCgpe3JldHVybiBhdCh0aGlzKT90aGlzLl9jbG9zZWRQcm9taXNlOmQobXQoXCJjbG9zZWRcIikpfWdldCBkZXNpcmVkU2l6ZSgpe2lmKCFhdCh0aGlzKSl0aHJvdyBtdChcImRlc2lyZWRTaXplXCIpO2lmKHZvaWQgMD09PXRoaXMuX293bmVyV3JpdGFibGVTdHJlYW0pdGhyb3cgeXQoXCJkZXNpcmVkU2l6ZVwiKTtyZXR1cm4gZnVuY3Rpb24oZSl7Y29uc3QgdD1lLl9vd25lcldyaXRhYmxlU3RyZWFtLHI9dC5fc3RhdGU7aWYoXCJlcnJvcmVkXCI9PT1yfHxcImVycm9yaW5nXCI9PT1yKXJldHVybiBudWxsO2lmKFwiY2xvc2VkXCI9PT1yKXJldHVybiAwO3JldHVybiBjdCh0Ll93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXIpfSh0aGlzKX1nZXQgcmVhZHkoKXtyZXR1cm4gYXQodGhpcyk/dGhpcy5fcmVhZHlQcm9taXNlOmQobXQoXCJyZWFkeVwiKSl9YWJvcnQoZSl7cmV0dXJuIGF0KHRoaXMpP3ZvaWQgMD09PXRoaXMuX293bmVyV3JpdGFibGVTdHJlYW0/ZCh5dChcImFib3J0XCIpKTpmdW5jdGlvbihlLHQpe3JldHVybiBKZShlLl9vd25lcldyaXRhYmxlU3RyZWFtLHQpfSh0aGlzLGUpOmQobXQoXCJhYm9ydFwiKSl9Y2xvc2UoKXtpZighYXQodGhpcykpcmV0dXJuIGQobXQoXCJjbG9zZVwiKSk7Y29uc3QgZT10aGlzLl9vd25lcldyaXRhYmxlU3RyZWFtO3JldHVybiB2b2lkIDA9PT1lP2QoeXQoXCJjbG9zZVwiKSk6cnQoZSk/ZChuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNsb3NlIGFuIGFscmVhZHktY2xvc2luZyBzdHJlYW1cIikpOktlKHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW0pfXJlbGVhc2VMb2NrKCl7aWYoIWF0KHRoaXMpKXRocm93IG10KFwicmVsZWFzZUxvY2tcIik7dm9pZCAwIT09dGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbSYmZnVuY3Rpb24oZSl7Y29uc3QgdD1lLl9vd25lcldyaXRhYmxlU3RyZWFtLHI9bmV3IFR5cGVFcnJvcihcIldyaXRlciB3YXMgcmVsZWFzZWQgYW5kIGNhbiBubyBsb25nZXIgYmUgdXNlZCB0byBtb25pdG9yIHRoZSBzdHJlYW0ncyBjbG9zZWRuZXNzXCIpO2l0KGUsciksZnVuY3Rpb24oZSx0KXtcInBlbmRpbmdcIj09PWUuX2Nsb3NlZFByb21pc2VTdGF0ZT9TdChlLHQpOmZ1bmN0aW9uKGUsdCl7d3QoZSx0KX0oZSx0KX0oZSxyKSx0Ll93cml0ZXI9dm9pZCAwLGUuX293bmVyV3JpdGFibGVTdHJlYW09dm9pZCAwfSh0aGlzKX13cml0ZShlKXtyZXR1cm4gYXQodGhpcyk/dm9pZCAwPT09dGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbT9kKHl0KFwid3JpdGUgdG9cIikpOmZ1bmN0aW9uKGUsdCl7Y29uc3Qgcj1lLl9vd25lcldyaXRhYmxlU3RyZWFtLG89ci5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyLG49ZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIGUuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobSh0KX1jYXRjaCh0KXtyZXR1cm4gZnQoZSx0KSwxfX0obyx0KTtpZihyIT09ZS5fb3duZXJXcml0YWJsZVN0cmVhbSlyZXR1cm4gZCh5dChcIndyaXRlIHRvXCIpKTtjb25zdCBhPXIuX3N0YXRlO2lmKFwiZXJyb3JlZFwiPT09YSlyZXR1cm4gZChyLl9zdG9yZWRFcnJvcik7aWYocnQocil8fFwiY2xvc2VkXCI9PT1hKXJldHVybiBkKG5ldyBUeXBlRXJyb3IoXCJUaGUgc3RyZWFtIGlzIGNsb3Npbmcgb3IgY2xvc2VkIGFuZCBjYW5ub3QgYmUgd3JpdHRlbiB0b1wiKSk7aWYoXCJlcnJvcmluZ1wiPT09YSlyZXR1cm4gZChyLl9zdG9yZWRFcnJvcik7Y29uc3QgaT1mdW5jdGlvbihlKXtyZXR1cm4gdSgoKHQscik9Pntjb25zdCBvPXtfcmVzb2x2ZTp0LF9yZWplY3Q6cn07ZS5fd3JpdGVSZXF1ZXN0cy5wdXNoKG8pfSkpfShyKTtyZXR1cm4gZnVuY3Rpb24oZSx0LHIpe3RyeXt1ZShlLHQscil9Y2F0Y2godCl7cmV0dXJuIHZvaWQgZnQoZSx0KX1jb25zdCBvPWUuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbTtpZighcnQobykmJlwid3JpdGFibGVcIj09PW8uX3N0YXRlKXtudChvLGJ0KGUpKX1kdChlKX0obyx0LG4pLGl9KHRoaXMsZSk6ZChtdChcIndyaXRlXCIpKX19ZnVuY3Rpb24gYXQoZSl7cmV0dXJuISFyKGUpJiYoISFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcIl9vd25lcldyaXRhYmxlU3RyZWFtXCIpJiZlIGluc3RhbmNlb2YgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKX1mdW5jdGlvbiBpdChlLHQpe1wicGVuZGluZ1wiPT09ZS5fcmVhZHlQcm9taXNlU3RhdGU/Q3QoZSx0KTpmdW5jdGlvbihlLHQpe1R0KGUsdCl9KGUsdCl9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZSx7YWJvcnQ6e2VudW1lcmFibGU6ITB9LGNsb3NlOntlbnVtZXJhYmxlOiEwfSxyZWxlYXNlTG9jazp7ZW51bWVyYWJsZTohMH0sd3JpdGU6e2VudW1lcmFibGU6ITB9LGNsb3NlZDp7ZW51bWVyYWJsZTohMH0sZGVzaXJlZFNpemU6e2VudW1lcmFibGU6ITB9LHJlYWR5OntlbnVtZXJhYmxlOiEwfX0pLG4oV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZS5hYm9ydCxcImFib3J0XCIpLG4oV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZS5jbG9zZSxcImNsb3NlXCIpLG4oV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZS5yZWxlYXNlTG9jayxcInJlbGVhc2VMb2NrXCIpLG4oV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZS53cml0ZSxcIndyaXRlXCIpLFwic3ltYm9sXCI9PXR5cGVvZiBlLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZSxlLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlclwiLGNvbmZpZ3VyYWJsZTohMH0pO2NvbnN0IGx0PXt9O2NsYXNzIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJ7Y29uc3RydWN0b3IoKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBjb25zdHJ1Y3RvclwiKX1nZXQgYWJvcnRSZWFzb24oKXtpZighc3QodGhpcykpdGhyb3cgcHQoXCJhYm9ydFJlYXNvblwiKTtyZXR1cm4gdGhpcy5fYWJvcnRSZWFzb259Z2V0IHNpZ25hbCgpe2lmKCFzdCh0aGlzKSl0aHJvdyBwdChcInNpZ25hbFwiKTtpZih2b2lkIDA9PT10aGlzLl9hYm9ydENvbnRyb2xsZXIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLnNpZ25hbCBpcyBub3Qgc3VwcG9ydGVkXCIpO3JldHVybiB0aGlzLl9hYm9ydENvbnRyb2xsZXIuc2lnbmFsfWVycm9yKGUpe2lmKCFzdCh0aGlzKSl0aHJvdyBwdChcImVycm9yXCIpO1wid3JpdGFibGVcIj09PXRoaXMuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbS5fc3RhdGUmJmh0KHRoaXMsZSl9W3ZdKGUpe2NvbnN0IHQ9dGhpcy5fYWJvcnRBbGdvcml0aG0oZSk7cmV0dXJuIHV0KHRoaXMpLHR9W1JdKCl7Y2UodGhpcyl9fWZ1bmN0aW9uIHN0KGUpe3JldHVybiEhcihlKSYmKCEhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJfY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtXCIpJiZlIGluc3RhbmNlb2YgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcil9ZnVuY3Rpb24gdXQoZSl7ZS5fd3JpdGVBbGdvcml0aG09dm9pZCAwLGUuX2Nsb3NlQWxnb3JpdGhtPXZvaWQgMCxlLl9hYm9ydEFsZ29yaXRobT12b2lkIDAsZS5fc3RyYXRlZ3lTaXplQWxnb3JpdGhtPXZvaWQgMH1mdW5jdGlvbiBjdChlKXtyZXR1cm4gZS5fc3RyYXRlZ3lIV00tZS5fcXVldWVUb3RhbFNpemV9ZnVuY3Rpb24gZHQoZSl7Y29uc3QgdD1lLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW07aWYoIWUuX3N0YXJ0ZWQpcmV0dXJuO2lmKHZvaWQgMCE9PXQuX2luRmxpZ2h0V3JpdGVSZXF1ZXN0KXJldHVybjtpZihcImVycm9yaW5nXCI9PT10Ll9zdGF0ZSlyZXR1cm4gdm9pZCB0dCh0KTtpZigwPT09ZS5fcXVldWUubGVuZ3RoKXJldHVybjtjb25zdCByPWUuX3F1ZXVlLnBlZWsoKS52YWx1ZTtyPT09bHQ/ZnVuY3Rpb24oZSl7Y29uc3QgdD1lLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW07KGZ1bmN0aW9uKGUpe2UuX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0PWUuX2Nsb3NlUmVxdWVzdCxlLl9jbG9zZVJlcXVlc3Q9dm9pZCAwfSkodCksc2UoZSk7Y29uc3Qgcj1lLl9jbG9zZUFsZ29yaXRobSgpO3V0KGUpLGIociwoKCk9PihmdW5jdGlvbihlKXtlLl9pbkZsaWdodENsb3NlUmVxdWVzdC5fcmVzb2x2ZSh2b2lkIDApLGUuX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0PXZvaWQgMCxcImVycm9yaW5nXCI9PT1lLl9zdGF0ZSYmKGUuX3N0b3JlZEVycm9yPXZvaWQgMCx2b2lkIDAhPT1lLl9wZW5kaW5nQWJvcnRSZXF1ZXN0JiYoZS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcmVzb2x2ZSgpLGUuX3BlbmRpbmdBYm9ydFJlcXVlc3Q9dm9pZCAwKSksZS5fc3RhdGU9XCJjbG9zZWRcIjtjb25zdCB0PWUuX3dyaXRlcjt2b2lkIDAhPT10JiZ2dCh0KX0odCksbnVsbCkpLChlPT4oZnVuY3Rpb24oZSx0KXtlLl9pbkZsaWdodENsb3NlUmVxdWVzdC5fcmVqZWN0KHQpLGUuX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0PXZvaWQgMCx2b2lkIDAhPT1lLl9wZW5kaW5nQWJvcnRSZXF1ZXN0JiYoZS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcmVqZWN0KHQpLGUuX3BlbmRpbmdBYm9ydFJlcXVlc3Q9dm9pZCAwKSxaZShlLHQpfSh0LGUpLG51bGwpKSl9KGUpOmZ1bmN0aW9uKGUsdCl7Y29uc3Qgcj1lLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW07IWZ1bmN0aW9uKGUpe2UuX2luRmxpZ2h0V3JpdGVSZXF1ZXN0PWUuX3dyaXRlUmVxdWVzdHMuc2hpZnQoKX0ocik7YihlLl93cml0ZUFsZ29yaXRobSh0KSwoKCk9PnshZnVuY3Rpb24oZSl7ZS5faW5GbGlnaHRXcml0ZVJlcXVlc3QuX3Jlc29sdmUodm9pZCAwKSxlLl9pbkZsaWdodFdyaXRlUmVxdWVzdD12b2lkIDB9KHIpO2NvbnN0IHQ9ci5fc3RhdGU7aWYoc2UoZSksIXJ0KHIpJiZcIndyaXRhYmxlXCI9PT10KXtjb25zdCB0PWJ0KGUpO250KHIsdCl9cmV0dXJuIGR0KGUpLG51bGx9KSwodD0+KFwid3JpdGFibGVcIj09PXIuX3N0YXRlJiZ1dChlKSxmdW5jdGlvbihlLHQpe2UuX2luRmxpZ2h0V3JpdGVSZXF1ZXN0Ll9yZWplY3QodCksZS5faW5GbGlnaHRXcml0ZVJlcXVlc3Q9dm9pZCAwLFplKGUsdCl9KHIsdCksbnVsbCkpKX0oZSxyKX1mdW5jdGlvbiBmdChlLHQpe1wid3JpdGFibGVcIj09PWUuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbS5fc3RhdGUmJmh0KGUsdCl9ZnVuY3Rpb24gYnQoZSl7cmV0dXJuIGN0KGUpPD0wfWZ1bmN0aW9uIGh0KGUsdCl7Y29uc3Qgcj1lLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW07dXQoZSksZXQocix0KX1mdW5jdGlvbiBfdChlKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihgV3JpdGFibGVTdHJlYW0ucHJvdG90eXBlLiR7ZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFdyaXRhYmxlU3RyZWFtYCl9ZnVuY3Rpb24gcHQoZSl7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLiR7ZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJgKX1mdW5jdGlvbiBtdChlKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZS4ke2V9IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJgKX1mdW5jdGlvbiB5dChlKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBcIitlK1wiIGEgc3RyZWFtIHVzaW5nIGEgcmVsZWFzZWQgd3JpdGVyXCIpfWZ1bmN0aW9uIGd0KGUpe2UuX2Nsb3NlZFByb21pc2U9dSgoKHQscik9PntlLl9jbG9zZWRQcm9taXNlX3Jlc29sdmU9dCxlLl9jbG9zZWRQcm9taXNlX3JlamVjdD1yLGUuX2Nsb3NlZFByb21pc2VTdGF0ZT1cInBlbmRpbmdcIn0pKX1mdW5jdGlvbiB3dChlLHQpe2d0KGUpLFN0KGUsdCl9ZnVuY3Rpb24gU3QoZSx0KXt2b2lkIDAhPT1lLl9jbG9zZWRQcm9taXNlX3JlamVjdCYmKG0oZS5fY2xvc2VkUHJvbWlzZSksZS5fY2xvc2VkUHJvbWlzZV9yZWplY3QodCksZS5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxlLl9jbG9zZWRQcm9taXNlX3JlamVjdD12b2lkIDAsZS5fY2xvc2VkUHJvbWlzZVN0YXRlPVwicmVqZWN0ZWRcIil9ZnVuY3Rpb24gdnQoZSl7dm9pZCAwIT09ZS5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlJiYoZS5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlKHZvaWQgMCksZS5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxlLl9jbG9zZWRQcm9taXNlX3JlamVjdD12b2lkIDAsZS5fY2xvc2VkUHJvbWlzZVN0YXRlPVwicmVzb2x2ZWRcIil9ZnVuY3Rpb24gUnQoZSl7ZS5fcmVhZHlQcm9taXNlPXUoKCh0LHIpPT57ZS5fcmVhZHlQcm9taXNlX3Jlc29sdmU9dCxlLl9yZWFkeVByb21pc2VfcmVqZWN0PXJ9KSksZS5fcmVhZHlQcm9taXNlU3RhdGU9XCJwZW5kaW5nXCJ9ZnVuY3Rpb24gVHQoZSx0KXtSdChlKSxDdChlLHQpfWZ1bmN0aW9uIHF0KGUpe1J0KGUpLEV0KGUpfWZ1bmN0aW9uIEN0KGUsdCl7dm9pZCAwIT09ZS5fcmVhZHlQcm9taXNlX3JlamVjdCYmKG0oZS5fcmVhZHlQcm9taXNlKSxlLl9yZWFkeVByb21pc2VfcmVqZWN0KHQpLGUuX3JlYWR5UHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxlLl9yZWFkeVByb21pc2VfcmVqZWN0PXZvaWQgMCxlLl9yZWFkeVByb21pc2VTdGF0ZT1cInJlamVjdGVkXCIpfWZ1bmN0aW9uIEV0KGUpe3ZvaWQgMCE9PWUuX3JlYWR5UHJvbWlzZV9yZXNvbHZlJiYoZS5fcmVhZHlQcm9taXNlX3Jlc29sdmUodm9pZCAwKSxlLl9yZWFkeVByb21pc2VfcmVzb2x2ZT12b2lkIDAsZS5fcmVhZHlQcm9taXNlX3JlamVjdD12b2lkIDAsZS5fcmVhZHlQcm9taXNlU3RhdGU9XCJmdWxmaWxsZWRcIil9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUse2Fib3J0UmVhc29uOntlbnVtZXJhYmxlOiEwfSxzaWduYWw6e2VudW1lcmFibGU6ITB9LGVycm9yOntlbnVtZXJhYmxlOiEwfX0pLFwic3ltYm9sXCI9PXR5cGVvZiBlLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUsZS50b1N0cmluZ1RhZyx7dmFsdWU6XCJXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyXCIsY29uZmlndXJhYmxlOiEwfSk7Y29uc3QgUHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIERPTUV4Y2VwdGlvbj9ET01FeGNlcHRpb246dm9pZCAwO2NvbnN0IFd0PWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJlwib2JqZWN0XCIhPXR5cGVvZiBlKXJldHVybiExO3RyeXtyZXR1cm4gbmV3IGUsITB9Y2F0Y2goZSl7cmV0dXJuITF9fShQdCk/UHQ6ZnVuY3Rpb24oKXtjb25zdCBlPWZ1bmN0aW9uKGUsdCl7dGhpcy5tZXNzYWdlPWV8fFwiXCIsdGhpcy5uYW1lPXR8fFwiRXJyb3JcIixFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyx0aGlzLmNvbnN0cnVjdG9yKX07cmV0dXJuIGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJjb25zdHJ1Y3RvclwiLHt2YWx1ZTplLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGV9KCk7ZnVuY3Rpb24ga3QoZSx0LHIsbyxuLGEpe2NvbnN0IGk9ZS5nZXRSZWFkZXIoKSxsPXQuZ2V0V3JpdGVyKCk7VnQoZSkmJihlLl9kaXN0dXJiZWQ9ITApO2xldCBzLF8sZyx3PSExLFM9ITEsdj1cInJlYWRhYmxlXCIsUj1cIndyaXRhYmxlXCIsVD0hMSxxPSExO2NvbnN0IEM9dSgoZT0+e2c9ZX0pKTtsZXQgRT1Qcm9taXNlLnJlc29sdmUodm9pZCAwKTtyZXR1cm4gdSgoKFAsVyk9PntsZXQgaztmdW5jdGlvbiBPKCl7aWYodylyZXR1cm47Y29uc3QgZT11KCgoZSx0KT0+eyFmdW5jdGlvbiByKG8pe28/ZSgpOmYoZnVuY3Rpb24oKXtpZih3KXJldHVybiBjKCEwKTtyZXR1cm4gZihsLnJlYWR5LCgoKT0+ZihpLnJlYWQoKSwoZT0+ISFlLmRvbmV8fChFPWwud3JpdGUoZS52YWx1ZSksbShFKSwhMSkpKSkpfSgpLHIsdCl9KCExKX0pKTttKGUpfWZ1bmN0aW9uIEIoKXtyZXR1cm4gdj1cImNsb3NlZFwiLHI/TCgpOnooKCgpPT4oR2UodCkmJihUPXJ0KHQpLFI9dC5fc3RhdGUpLFR8fFwiY2xvc2VkXCI9PT1SP2Modm9pZCAwKTpcImVycm9yaW5nXCI9PT1SfHxcImVycm9yZWRcIj09PVI/ZChfKTooVD0hMCxsLmNsb3NlKCkpKSksITEsdm9pZCAwKSxudWxsfWZ1bmN0aW9uIEEoZSl7cmV0dXJuIHd8fCh2PVwiZXJyb3JlZFwiLHM9ZSxvP0woITAsZSk6eigoKCk9PmwuYWJvcnQoZSkpLCEwLGUpKSxudWxsfWZ1bmN0aW9uIGooZSl7cmV0dXJuIFN8fChSPVwiZXJyb3JlZFwiLF89ZSxuP0woITAsZSk6eigoKCk9PmkuY2FuY2VsKGUpKSwhMCxlKSksbnVsbH1pZih2b2lkIDAhPT1hJiYoaz0oKT0+e2NvbnN0IGU9dm9pZCAwIT09YS5yZWFzb24/YS5yZWFzb246bmV3IFd0KFwiQWJvcnRlZFwiLFwiQWJvcnRFcnJvclwiKSx0PVtdO298fHQucHVzaCgoKCk9Plwid3JpdGFibGVcIj09PVI/bC5hYm9ydChlKTpjKHZvaWQgMCkpKSxufHx0LnB1c2goKCgpPT5cInJlYWRhYmxlXCI9PT12P2kuY2FuY2VsKGUpOmModm9pZCAwKSkpLHooKCgpPT5Qcm9taXNlLmFsbCh0Lm1hcCgoZT0+ZSgpKSkpKSwhMCxlKX0sYS5hYm9ydGVkP2soKTphLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLGspKSxWdChlKSYmKHY9ZS5fc3RhdGUscz1lLl9zdG9yZWRFcnJvciksR2UodCkmJihSPXQuX3N0YXRlLF89dC5fc3RvcmVkRXJyb3IsVD1ydCh0KSksVnQoZSkmJkdlKHQpJiYocT0hMCxnKCkpLFwiZXJyb3JlZFwiPT09dilBKHMpO2Vsc2UgaWYoXCJlcnJvcmluZ1wiPT09Unx8XCJlcnJvcmVkXCI9PT1SKWooXyk7ZWxzZSBpZihcImNsb3NlZFwiPT09dilCKCk7ZWxzZSBpZihUfHxcImNsb3NlZFwiPT09Uil7Y29uc3QgZT1uZXcgVHlwZUVycm9yKFwidGhlIGRlc3RpbmF0aW9uIHdyaXRhYmxlIHN0cmVhbSBjbG9zZWQgYmVmb3JlIGFsbCBkYXRhIGNvdWxkIGJlIHBpcGVkIHRvIGl0XCIpO24/TCghMCxlKTp6KCgoKT0+aS5jYW5jZWwoZSkpLCEwLGUpfWZ1bmN0aW9uIHooZSx0LHIpe2Z1bmN0aW9uIG8oKXtyZXR1cm5cIndyaXRhYmxlXCIhPT1SfHxUP24oKTpoKGZ1bmN0aW9uKCl7bGV0IGU7cmV0dXJuIGMoZnVuY3Rpb24gdCgpe2lmKGUhPT1FKXJldHVybiBlPUUscChFLHQsdCl9KCkpfSgpLG4pLG51bGx9ZnVuY3Rpb24gbigpe3JldHVybiBlP2IoZSgpLCgoKT0+Rih0LHIpKSwoZT0+RighMCxlKSkpOkYodCxyKSxudWxsfXd8fCh3PSEwLHE/bygpOmgoQyxvKSl9ZnVuY3Rpb24gTChlLHQpe3oodm9pZCAwLGUsdCl9ZnVuY3Rpb24gRihlLHQpe3JldHVybiBTPSEwLGwucmVsZWFzZUxvY2soKSxpLnJlbGVhc2VMb2NrKCksdm9pZCAwIT09YSYmYS5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIixrKSxlP1codCk6UCh2b2lkIDApLG51bGx9d3x8KGIoaS5jbG9zZWQsQixBKSxiKGwuY2xvc2VkLChmdW5jdGlvbigpe3JldHVybiBTfHwoUj1cImNsb3NlZFwiKSxudWxsfSksaikpLHE/TygpOnkoKCgpPT57cT0hMCxnKCksTygpfSkpfSkpfWZ1bmN0aW9uIE90KGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gZS5nZXRSZWFkZXIoe21vZGU6XCJieW9iXCJ9KS5yZWxlYXNlTG9jaygpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oZSk/ZnVuY3Rpb24oZSl7bGV0IHQscixvLG4sYSxpPWUuZ2V0UmVhZGVyKCksbD0hMSxzPSExLGQ9ITEsZj0hMSxoPSExLHA9ITE7Y29uc3QgbT11KChlPT57YT1lfSkpO2Z1bmN0aW9uIHkoZSl7XyhlLmNsb3NlZCwodD0+KGUhPT1pfHwoby5lcnJvcih0KSxuLmVycm9yKHQpLGgmJnB8fGEodm9pZCAwKSksbnVsbCkpKX1mdW5jdGlvbiBnKCl7bCYmKGkucmVsZWFzZUxvY2soKSxpPWUuZ2V0UmVhZGVyKCkseShpKSxsPSExKSxiKGkucmVhZCgpLChlPT57dmFyIHQscjtpZihkPSExLGY9ITEsZS5kb25lKXJldHVybiBofHxvLmNsb3NlKCkscHx8bi5jbG9zZSgpLG51bGw9PT0odD1vLmJ5b2JSZXF1ZXN0KXx8dm9pZCAwPT09dHx8dC5yZXNwb25kKDApLG51bGw9PT0ocj1uLmJ5b2JSZXF1ZXN0KXx8dm9pZCAwPT09cnx8ci5yZXNwb25kKDApLGgmJnB8fGEodm9pZCAwKSxudWxsO2NvbnN0IGw9ZS52YWx1ZSx1PWw7bGV0IGM9bDtpZighaCYmIXApdHJ5e2M9bGUobCl9Y2F0Y2goZSl7cmV0dXJuIG8uZXJyb3IoZSksbi5lcnJvcihlKSxhKGkuY2FuY2VsKGUpKSxudWxsfXJldHVybiBofHxvLmVucXVldWUodSkscHx8bi5lbnF1ZXVlKGMpLHM9ITEsZD9TKCk6ZiYmdigpLG51bGx9KSwoKCk9PihzPSExLG51bGwpKSl9ZnVuY3Rpb24gdyh0LHIpe2x8fChpLnJlbGVhc2VMb2NrKCksaT1lLmdldFJlYWRlcih7bW9kZTpcImJ5b2JcIn0pLHkoaSksbD0hMCk7Y29uc3QgdT1yP246byxjPXI/bzpuO2IoaS5yZWFkKHQpLChlPT57dmFyIHQ7ZD0hMSxmPSExO2NvbnN0IG89cj9wOmgsbj1yP2g6cDtpZihlLmRvbmUpe298fHUuY2xvc2UoKSxufHxjLmNsb3NlKCk7Y29uc3Qgcj1lLnZhbHVlO3JldHVybiB2b2lkIDAhPT1yJiYob3x8dS5ieW9iUmVxdWVzdC5yZXNwb25kV2l0aE5ld1ZpZXcociksbnx8bnVsbD09PSh0PWMuYnlvYlJlcXVlc3QpfHx2b2lkIDA9PT10fHx0LnJlc3BvbmQoMCkpLG8mJm58fGEodm9pZCAwKSxudWxsfWNvbnN0IGw9ZS52YWx1ZTtpZihuKW98fHUuYnlvYlJlcXVlc3QucmVzcG9uZFdpdGhOZXdWaWV3KGwpO2Vsc2V7bGV0IGU7dHJ5e2U9bGUobCl9Y2F0Y2goZSl7cmV0dXJuIHUuZXJyb3IoZSksYy5lcnJvcihlKSxhKGkuY2FuY2VsKGUpKSxudWxsfW98fHUuYnlvYlJlcXVlc3QucmVzcG9uZFdpdGhOZXdWaWV3KGwpLGMuZW5xdWV1ZShlKX1yZXR1cm4gcz0hMSxkP1MoKTpmJiZ2KCksbnVsbH0pLCgoKT0+KHM9ITEsbnVsbCkpKX1mdW5jdGlvbiBTKCl7aWYocylyZXR1cm4gZD0hMCxjKHZvaWQgMCk7cz0hMDtjb25zdCBlPW8uYnlvYlJlcXVlc3Q7cmV0dXJuIG51bGw9PT1lP2coKTp3KGUudmlldywhMSksYyh2b2lkIDApfWZ1bmN0aW9uIHYoKXtpZihzKXJldHVybiBmPSEwLGModm9pZCAwKTtzPSEwO2NvbnN0IGU9bi5ieW9iUmVxdWVzdDtyZXR1cm4gbnVsbD09PWU/ZygpOncoZS52aWV3LCEwKSxjKHZvaWQgMCl9ZnVuY3Rpb24gUihlKXtpZihoPSEwLHQ9ZSxwKXtjb25zdCBlPVt0LHJdLG89aS5jYW5jZWwoZSk7YShvKX1yZXR1cm4gbX1mdW5jdGlvbiBUKGUpe2lmKHA9ITAscj1lLGgpe2NvbnN0IGU9W3Qscl0sbz1pLmNhbmNlbChlKTthKG8pfXJldHVybiBtfWNvbnN0IHE9bmV3IFJlYWRhYmxlU3RyZWFtKHt0eXBlOlwiYnl0ZXNcIixzdGFydChlKXtvPWV9LHB1bGw6UyxjYW5jZWw6Un0pLEM9bmV3IFJlYWRhYmxlU3RyZWFtKHt0eXBlOlwiYnl0ZXNcIixzdGFydChlKXtuPWV9LHB1bGw6dixjYW5jZWw6VH0pO3JldHVybiB5KGkpLFtxLENdfShlKTpmdW5jdGlvbihlLHQpe2NvbnN0IHI9ZS5nZXRSZWFkZXIoKTtsZXQgbyxuLGEsaSxsLHM9ITEsZD0hMSxmPSExLGg9ITE7Y29uc3QgcD11KChlPT57bD1lfSkpO2Z1bmN0aW9uIG0oKXtyZXR1cm4gcz8oZD0hMCxjKHZvaWQgMCkpOihzPSEwLGIoci5yZWFkKCksKGU9PntpZihkPSExLGUuZG9uZSlyZXR1cm4gZnx8YS5jbG9zZSgpLGh8fGkuY2xvc2UoKSxmJiZofHxsKHZvaWQgMCksbnVsbDtjb25zdCB0PWUudmFsdWUscj10LG89dDtyZXR1cm4gZnx8YS5lbnF1ZXVlKHIpLGh8fGkuZW5xdWV1ZShvKSxzPSExLGQmJm0oKSxudWxsfSksKCgpPT4ocz0hMSxudWxsKSkpLGModm9pZCAwKSl9ZnVuY3Rpb24geShlKXtpZihmPSEwLG89ZSxoKXtjb25zdCBlPVtvLG5dLHQ9ci5jYW5jZWwoZSk7bCh0KX1yZXR1cm4gcH1mdW5jdGlvbiBnKGUpe2lmKGg9ITAsbj1lLGYpe2NvbnN0IGU9W28sbl0sdD1yLmNhbmNlbChlKTtsKHQpfXJldHVybiBwfWNvbnN0IHc9bmV3IFJlYWRhYmxlU3RyZWFtKHtzdGFydChlKXthPWV9LHB1bGw6bSxjYW5jZWw6eX0pLFM9bmV3IFJlYWRhYmxlU3RyZWFtKHtzdGFydChlKXtpPWV9LHB1bGw6bSxjYW5jZWw6Z30pO3JldHVybiBfKHIuY2xvc2VkLChlPT4oYS5lcnJvcihlKSxpLmVycm9yKGUpLGYmJmh8fGwodm9pZCAwKSxudWxsKSkpLFt3LFNdfShlKX1jbGFzcyBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVye2NvbnN0cnVjdG9yKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgY29uc3RydWN0b3JcIil9Z2V0IGRlc2lyZWRTaXplKCl7aWYoIUJ0KHRoaXMpKXRocm93IER0KFwiZGVzaXJlZFNpemVcIik7cmV0dXJuIEx0KHRoaXMpfWNsb3NlKCl7aWYoIUJ0KHRoaXMpKXRocm93IER0KFwiY2xvc2VcIik7aWYoIUZ0KHRoaXMpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgc3RyZWFtIGlzIG5vdCBpbiBhIHN0YXRlIHRoYXQgcGVybWl0cyBjbG9zZVwiKTshZnVuY3Rpb24oZSl7aWYoIUZ0KGUpKXJldHVybjtjb25zdCB0PWUuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbTtlLl9jbG9zZVJlcXVlc3RlZD0hMCwwPT09ZS5fcXVldWUubGVuZ3RoJiYoanQoZSksWHQodCkpfSh0aGlzKX1lbnF1ZXVlKGUpe2lmKCFCdCh0aGlzKSl0aHJvdyBEdChcImVucXVldWVcIik7aWYoIUZ0KHRoaXMpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgc3RyZWFtIGlzIG5vdCBpbiBhIHN0YXRlIHRoYXQgcGVybWl0cyBlbnF1ZXVlXCIpO3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCFGdChlKSlyZXR1cm47Y29uc3Qgcj1lLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07aWYoVXQocikmJlgocik+MClHKHIsdCwhMSk7ZWxzZXtsZXQgcjt0cnl7cj1lLl9zdHJhdGVneVNpemVBbGdvcml0aG0odCl9Y2F0Y2godCl7dGhyb3cgenQoZSx0KSx0fXRyeXt1ZShlLHQscil9Y2F0Y2godCl7dGhyb3cgenQoZSx0KSx0fX1BdChlKX0odGhpcyxlKX1lcnJvcihlKXtpZighQnQodGhpcykpdGhyb3cgRHQoXCJlcnJvclwiKTt6dCh0aGlzLGUpfVtUXShlKXtjZSh0aGlzKTtjb25zdCB0PXRoaXMuX2NhbmNlbEFsZ29yaXRobShlKTtyZXR1cm4ganQodGhpcyksdH1bcV0oZSl7Y29uc3QgdD10aGlzLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07aWYodGhpcy5fcXVldWUubGVuZ3RoPjApe2NvbnN0IHI9c2UodGhpcyk7dGhpcy5fY2xvc2VSZXF1ZXN0ZWQmJjA9PT10aGlzLl9xdWV1ZS5sZW5ndGg/KGp0KHRoaXMpLFh0KHQpKTpBdCh0aGlzKSxlLl9jaHVua1N0ZXBzKHIpfWVsc2UgVSh0LGUpLEF0KHRoaXMpfVtDXSgpe319ZnVuY3Rpb24gQnQoZSl7cmV0dXJuISFyKGUpJiYoISFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcIl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW1cIikmJmUgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKX1mdW5jdGlvbiBBdChlKXtjb25zdCB0PWZ1bmN0aW9uKGUpe2NvbnN0IHQ9ZS5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtO2lmKCFGdChlKSlyZXR1cm4hMTtpZighZS5fc3RhcnRlZClyZXR1cm4hMTtpZihVdCh0KSYmWCh0KT4wKXJldHVybiEwO2lmKEx0KGUpPjApcmV0dXJuITA7cmV0dXJuITF9KGUpO2lmKCF0KXJldHVybjtpZihlLl9wdWxsaW5nKXJldHVybiB2b2lkKGUuX3B1bGxBZ2Fpbj0hMCk7ZS5fcHVsbGluZz0hMDtiKGUuX3B1bGxBbGdvcml0aG0oKSwoKCk9PihlLl9wdWxsaW5nPSExLGUuX3B1bGxBZ2FpbiYmKGUuX3B1bGxBZ2Fpbj0hMSxBdChlKSksbnVsbCkpLCh0PT4oenQoZSx0KSxudWxsKSkpfWZ1bmN0aW9uIGp0KGUpe2UuX3B1bGxBbGdvcml0aG09dm9pZCAwLGUuX2NhbmNlbEFsZ29yaXRobT12b2lkIDAsZS5fc3RyYXRlZ3lTaXplQWxnb3JpdGhtPXZvaWQgMH1mdW5jdGlvbiB6dChlLHQpe2NvbnN0IHI9ZS5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtO1wicmVhZGFibGVcIj09PXIuX3N0YXRlJiYoY2UoZSksanQoZSksSnQocix0KSl9ZnVuY3Rpb24gTHQoZSl7Y29uc3QgdD1lLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW0uX3N0YXRlO3JldHVyblwiZXJyb3JlZFwiPT09dD9udWxsOlwiY2xvc2VkXCI9PT10PzA6ZS5fc3RyYXRlZ3lIV00tZS5fcXVldWVUb3RhbFNpemV9ZnVuY3Rpb24gRnQoZSl7cmV0dXJuIWUuX2Nsb3NlUmVxdWVzdGVkJiZcInJlYWRhYmxlXCI9PT1lLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW0uX3N0YXRlfWZ1bmN0aW9uIEl0KGUsdCxyLG8pe2NvbnN0IG49T2JqZWN0LmNyZWF0ZShSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZSk7bGV0IGEsaSxsO2E9dm9pZCAwIT09dC5zdGFydD8oKT0+dC5zdGFydChuKTooKT0+e30saT12b2lkIDAhPT10LnB1bGw/KCk9PnQucHVsbChuKTooKT0+Yyh2b2lkIDApLGw9dm9pZCAwIT09dC5jYW5jZWw/ZT0+dC5jYW5jZWwoZSk6KCk9PmModm9pZCAwKSxmdW5jdGlvbihlLHQscixvLG4sYSxpKXt0Ll9jb250cm9sbGVkUmVhZGFibGVTdHJlYW09ZSx0Ll9xdWV1ZT12b2lkIDAsdC5fcXVldWVUb3RhbFNpemU9dm9pZCAwLGNlKHQpLHQuX3N0YXJ0ZWQ9ITEsdC5fY2xvc2VSZXF1ZXN0ZWQ9ITEsdC5fcHVsbEFnYWluPSExLHQuX3B1bGxpbmc9ITEsdC5fc3RyYXRlZ3lTaXplQWxnb3JpdGhtPWksdC5fc3RyYXRlZ3lIV009YSx0Ll9wdWxsQWxnb3JpdGhtPW8sdC5fY2FuY2VsQWxnb3JpdGhtPW4sZS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyPXQsYihjKHIoKSksKCgpPT4odC5fc3RhcnRlZD0hMCxBdCh0KSxudWxsKSksKGU9Pih6dCh0LGUpLG51bGwpKSl9KGUsbixhLGksbCxyLG8pfWZ1bmN0aW9uIER0KGUpe3JldHVybiBuZXcgVHlwZUVycm9yKGBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZS4ke2V9IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyYCl9ZnVuY3Rpb24gJHQoZSx0LHIpe3JldHVybiBJKGUscikscj0+dyhlLHQsW3JdKX1mdW5jdGlvbiBNdChlLHQscil7cmV0dXJuIEkoZSxyKSxyPT53KGUsdCxbcl0pfWZ1bmN0aW9uIFl0KGUsdCxyKXtyZXR1cm4gSShlLHIpLHI9PmcoZSx0LFtyXSl9ZnVuY3Rpb24gUXQoZSx0KXtpZihcImJ5dGVzXCIhPT0oZT1gJHtlfWApKXRocm93IG5ldyBUeXBlRXJyb3IoYCR7dH0gJyR7ZX0nIGlzIG5vdCBhIHZhbGlkIGVudW1lcmF0aW9uIHZhbHVlIGZvciBSZWFkYWJsZVN0cmVhbVR5cGVgKTtyZXR1cm4gZX1mdW5jdGlvbiBOdChlLHQpe2lmKFwiYnlvYlwiIT09KGU9YCR7ZX1gKSl0aHJvdyBuZXcgVHlwZUVycm9yKGAke3R9ICcke2V9JyBpcyBub3QgYSB2YWxpZCBlbnVtZXJhdGlvbiB2YWx1ZSBmb3IgUmVhZGFibGVTdHJlYW1SZWFkZXJNb2RlYCk7cmV0dXJuIGV9ZnVuY3Rpb24gSHQoZSx0KXtGKGUsdCk7Y29uc3Qgcj1udWxsPT1lP3ZvaWQgMDplLnByZXZlbnRBYm9ydCxvPW51bGw9PWU/dm9pZCAwOmUucHJldmVudENhbmNlbCxuPW51bGw9PWU/dm9pZCAwOmUucHJldmVudENsb3NlLGE9bnVsbD09ZT92b2lkIDA6ZS5zaWduYWw7cmV0dXJuIHZvaWQgMCE9PWEmJmZ1bmN0aW9uKGUsdCl7aWYoIWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm4hMTt0cnl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBlLmFib3J0ZWR9Y2F0Y2goZSl7cmV0dXJuITF9fShlKSl0aHJvdyBuZXcgVHlwZUVycm9yKGAke3R9IGlzIG5vdCBhbiBBYm9ydFNpZ25hbC5gKX0oYSxgJHt0fSBoYXMgbWVtYmVyICdzaWduYWwnIHRoYXRgKSx7cHJldmVudEFib3J0OkJvb2xlYW4ocikscHJldmVudENhbmNlbDpCb29sZWFuKG8pLHByZXZlbnRDbG9zZTpCb29sZWFuKG4pLHNpZ25hbDphfX1mdW5jdGlvbiB4dChlLHQpe0YoZSx0KTtjb25zdCByPW51bGw9PWU/dm9pZCAwOmUucmVhZGFibGU7TShyLFwicmVhZGFibGVcIixcIlJlYWRhYmxlV3JpdGFibGVQYWlyXCIpLGZ1bmN0aW9uKGUsdCl7aWYoIUgoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0fSBpcyBub3QgYSBSZWFkYWJsZVN0cmVhbS5gKX0ocixgJHt0fSBoYXMgbWVtYmVyICdyZWFkYWJsZScgdGhhdGApO2NvbnN0IG89bnVsbD09ZT92b2lkIDA6ZS53cml0YWJsZTtyZXR1cm4gTShvLFwid3JpdGFibGVcIixcIlJlYWRhYmxlV3JpdGFibGVQYWlyXCIpLGZ1bmN0aW9uKGUsdCl7aWYoIXgoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0fSBpcyBub3QgYSBXcml0YWJsZVN0cmVhbS5gKX0obyxgJHt0fSBoYXMgbWVtYmVyICd3cml0YWJsZScgdGhhdGApLHtyZWFkYWJsZTpyLHdyaXRhYmxlOm99fU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLHtjbG9zZTp7ZW51bWVyYWJsZTohMH0sZW5xdWV1ZTp7ZW51bWVyYWJsZTohMH0sZXJyb3I6e2VudW1lcmFibGU6ITB9LGRlc2lyZWRTaXplOntlbnVtZXJhYmxlOiEwfX0pLG4oUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UsXCJjbG9zZVwiKSxuKFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLmVucXVldWUsXCJlbnF1ZXVlXCIpLG4oUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuZXJyb3IsXCJlcnJvclwiKSxcInN5bWJvbFwiPT10eXBlb2YgZS50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLGUudG9TdHJpbmdUYWcse3ZhbHVlOlwiUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclwiLGNvbmZpZ3VyYWJsZTohMH0pO2NsYXNzIFJlYWRhYmxlU3RyZWFte2NvbnN0cnVjdG9yKGU9e30sdD17fSl7dm9pZCAwPT09ZT9lPW51bGw6RChlLFwiRmlyc3QgcGFyYW1ldGVyXCIpO2NvbnN0IHI9WWUodCxcIlNlY29uZCBwYXJhbWV0ZXJcIiksbz1mdW5jdGlvbihlLHQpe0YoZSx0KTtjb25zdCByPWUsbz1udWxsPT1yP3ZvaWQgMDpyLmF1dG9BbGxvY2F0ZUNodW5rU2l6ZSxuPW51bGw9PXI/dm9pZCAwOnIuY2FuY2VsLGE9bnVsbD09cj92b2lkIDA6ci5wdWxsLGk9bnVsbD09cj92b2lkIDA6ci5zdGFydCxsPW51bGw9PXI/dm9pZCAwOnIudHlwZTtyZXR1cm57YXV0b0FsbG9jYXRlQ2h1bmtTaXplOnZvaWQgMD09PW8/dm9pZCAwOk4obyxgJHt0fSBoYXMgbWVtYmVyICdhdXRvQWxsb2NhdGVDaHVua1NpemUnIHRoYXRgKSxjYW5jZWw6dm9pZCAwPT09bj92b2lkIDA6JHQobixyLGAke3R9IGhhcyBtZW1iZXIgJ2NhbmNlbCcgdGhhdGApLHB1bGw6dm9pZCAwPT09YT92b2lkIDA6TXQoYSxyLGAke3R9IGhhcyBtZW1iZXIgJ3B1bGwnIHRoYXRgKSxzdGFydDp2b2lkIDA9PT1pP3ZvaWQgMDpZdChpLHIsYCR7dH0gaGFzIG1lbWJlciAnc3RhcnQnIHRoYXRgKSx0eXBlOnZvaWQgMD09PWw/dm9pZCAwOlF0KGwsYCR7dH0gaGFzIG1lbWJlciAndHlwZScgdGhhdGApfX0oZSxcIkZpcnN0IHBhcmFtZXRlclwiKTt2YXIgbjtpZigobj10aGlzKS5fc3RhdGU9XCJyZWFkYWJsZVwiLG4uX3JlYWRlcj12b2lkIDAsbi5fc3RvcmVkRXJyb3I9dm9pZCAwLG4uX2Rpc3R1cmJlZD0hMSxcImJ5dGVzXCI9PT1vLnR5cGUpe2lmKHZvaWQgMCE9PXIuc2l6ZSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSBzdHJhdGVneSBmb3IgYSBieXRlIHN0cmVhbSBjYW5ub3QgaGF2ZSBhIHNpemUgZnVuY3Rpb25cIik7T2UodGhpcyxvLCRlKHIsMCkpfWVsc2V7Y29uc3QgZT1NZShyKTtJdCh0aGlzLG8sJGUociwxKSxlKX19Z2V0IGxvY2tlZCgpe2lmKCFWdCh0aGlzKSl0aHJvdyBLdChcImxvY2tlZFwiKTtyZXR1cm4gVXQodGhpcyl9Y2FuY2VsKGUpe3JldHVybiBWdCh0aGlzKT9VdCh0aGlzKT9kKG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FuY2VsIGEgc3RyZWFtIHRoYXQgYWxyZWFkeSBoYXMgYSByZWFkZXJcIikpOkd0KHRoaXMsZSk6ZChLdChcImNhbmNlbFwiKSl9Z2V0UmVhZGVyKGUpe2lmKCFWdCh0aGlzKSl0aHJvdyBLdChcImdldFJlYWRlclwiKTtyZXR1cm4gdm9pZCAwPT09ZnVuY3Rpb24oZSx0KXtGKGUsdCk7Y29uc3Qgcj1udWxsPT1lP3ZvaWQgMDplLm1vZGU7cmV0dXJue21vZGU6dm9pZCAwPT09cj92b2lkIDA6TnQocixgJHt0fSBoYXMgbWVtYmVyICdtb2RlJyB0aGF0YCl9fShlLFwiRmlyc3QgcGFyYW1ldGVyXCIpLm1vZGU/bmV3IFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcih0aGlzKTpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcihlKX0odGhpcyl9cGlwZVRocm91Z2goZSx0PXt9KXtpZighSCh0aGlzKSl0aHJvdyBLdChcInBpcGVUaHJvdWdoXCIpOyQoZSwxLFwicGlwZVRocm91Z2hcIik7Y29uc3Qgcj14dChlLFwiRmlyc3QgcGFyYW1ldGVyXCIpLG89SHQodCxcIlNlY29uZCBwYXJhbWV0ZXJcIik7aWYodGhpcy5sb2NrZWQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5waXBlVGhyb3VnaCBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBSZWFkYWJsZVN0cmVhbVwiKTtpZihyLndyaXRhYmxlLmxvY2tlZCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUaHJvdWdoIGNhbm5vdCBiZSB1c2VkIG9uIGEgbG9ja2VkIFdyaXRhYmxlU3RyZWFtXCIpO3JldHVybiBtKGt0KHRoaXMsci53cml0YWJsZSxvLnByZXZlbnRDbG9zZSxvLnByZXZlbnRBYm9ydCxvLnByZXZlbnRDYW5jZWwsby5zaWduYWwpKSxyLnJlYWRhYmxlfXBpcGVUbyhlLHQ9e30pe2lmKCFIKHRoaXMpKXJldHVybiBkKEt0KFwicGlwZVRvXCIpKTtpZih2b2lkIDA9PT1lKXJldHVybiBkKFwiUGFyYW1ldGVyIDEgaXMgcmVxdWlyZWQgaW4gJ3BpcGVUbycuXCIpO2lmKCF4KGUpKXJldHVybiBkKG5ldyBUeXBlRXJyb3IoXCJSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUucGlwZVRvJ3MgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIFdyaXRhYmxlU3RyZWFtXCIpKTtsZXQgcjt0cnl7cj1IdCh0LFwiU2Vjb25kIHBhcmFtZXRlclwiKX1jYXRjaChlKXtyZXR1cm4gZChlKX1yZXR1cm4gdGhpcy5sb2NrZWQ/ZChuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbyBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBSZWFkYWJsZVN0cmVhbVwiKSk6ZS5sb2NrZWQ/ZChuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbyBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBXcml0YWJsZVN0cmVhbVwiKSk6a3QodGhpcyxlLHIucHJldmVudENsb3NlLHIucHJldmVudEFib3J0LHIucHJldmVudENhbmNlbCxyLnNpZ25hbCl9dGVlKCl7aWYoIUgodGhpcykpdGhyb3cgS3QoXCJ0ZWVcIik7aWYodGhpcy5sb2NrZWQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB0ZWUgYSBzdHJlYW0gdGhhdCBhbHJlYWR5IGhhcyBhIHJlYWRlclwiKTtyZXR1cm4gT3QodGhpcyl9dmFsdWVzKGUpe2lmKCFIKHRoaXMpKXRocm93IEt0KFwidmFsdWVzXCIpO3JldHVybiBmdW5jdGlvbihlLHQpe2NvbnN0IHI9ZS5nZXRSZWFkZXIoKSxvPW5ldyB0ZShyLHQpLG49T2JqZWN0LmNyZWF0ZShyZSk7cmV0dXJuIG4uX2FzeW5jSXRlcmF0b3JJbXBsPW8sbn0odGhpcyxmdW5jdGlvbihlLHQpe0YoZSx0KTtjb25zdCByPW51bGw9PWU/dm9pZCAwOmUucHJldmVudENhbmNlbDtyZXR1cm57cHJldmVudENhbmNlbDpCb29sZWFuKHIpfX0oZSxcIkZpcnN0IHBhcmFtZXRlclwiKS5wcmV2ZW50Q2FuY2VsKX19ZnVuY3Rpb24gVnQoZSl7cmV0dXJuISFyKGUpJiYoISFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcIl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXJcIikmJmUgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbSl9ZnVuY3Rpb24gVXQoZSl7cmV0dXJuIHZvaWQgMCE9PWUuX3JlYWRlcn1mdW5jdGlvbiBHdChlLHIpe2lmKGUuX2Rpc3R1cmJlZD0hMCxcImNsb3NlZFwiPT09ZS5fc3RhdGUpcmV0dXJuIGModm9pZCAwKTtpZihcImVycm9yZWRcIj09PWUuX3N0YXRlKXJldHVybiBkKGUuX3N0b3JlZEVycm9yKTtYdChlKTtjb25zdCBvPWUuX3JlYWRlcjtpZih2b2lkIDAhPT1vJiZGZShvKSl7Y29uc3QgZT1vLl9yZWFkSW50b1JlcXVlc3RzO28uX3JlYWRJbnRvUmVxdWVzdHM9bmV3IFMsZS5mb3JFYWNoKChlPT57ZS5fY2xvc2VTdGVwcyh2b2lkIDApfSkpfXJldHVybiBwKGUuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcltUXShyKSx0KX1mdW5jdGlvbiBYdChlKXtlLl9zdGF0ZT1cImNsb3NlZFwiO2NvbnN0IHQ9ZS5fcmVhZGVyO2lmKHZvaWQgMCE9PXQmJihqKHQpLEsodCkpKXtjb25zdCBlPXQuX3JlYWRSZXF1ZXN0czt0Ll9yZWFkUmVxdWVzdHM9bmV3IFMsZS5mb3JFYWNoKChlPT57ZS5fY2xvc2VTdGVwcygpfSkpfX1mdW5jdGlvbiBKdChlLHQpe2UuX3N0YXRlPVwiZXJyb3JlZFwiLGUuX3N0b3JlZEVycm9yPXQ7Y29uc3Qgcj1lLl9yZWFkZXI7dm9pZCAwIT09ciYmKEEocix0KSxLKHIpP1oocix0KTpJZShyLHQpKX1mdW5jdGlvbiBLdChlKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihgUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLiR7ZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlU3RyZWFtYCl9ZnVuY3Rpb24gWnQoZSx0KXtGKGUsdCk7Y29uc3Qgcj1udWxsPT1lP3ZvaWQgMDplLmhpZ2hXYXRlck1hcms7cmV0dXJuIE0ocixcImhpZ2hXYXRlck1hcmtcIixcIlF1ZXVpbmdTdHJhdGVneUluaXRcIikse2hpZ2hXYXRlck1hcms6WShyKX19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLHtjYW5jZWw6e2VudW1lcmFibGU6ITB9LGdldFJlYWRlcjp7ZW51bWVyYWJsZTohMH0scGlwZVRocm91Z2g6e2VudW1lcmFibGU6ITB9LHBpcGVUbzp7ZW51bWVyYWJsZTohMH0sdGVlOntlbnVtZXJhYmxlOiEwfSx2YWx1ZXM6e2VudW1lcmFibGU6ITB9LGxvY2tlZDp7ZW51bWVyYWJsZTohMH19KSxuKFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5jYW5jZWwsXCJjYW5jZWxcIiksbihSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUuZ2V0UmVhZGVyLFwiZ2V0UmVhZGVyXCIpLG4oUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUaHJvdWdoLFwicGlwZVRocm91Z2hcIiksbihSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUucGlwZVRvLFwicGlwZVRvXCIpLG4oUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnRlZSxcInRlZVwiKSxuKFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS52YWx1ZXMsXCJ2YWx1ZXNcIiksXCJzeW1ib2xcIj09dHlwZW9mIGUudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUsZS50b1N0cmluZ1RhZyx7dmFsdWU6XCJSZWFkYWJsZVN0cmVhbVwiLGNvbmZpZ3VyYWJsZTohMH0pLFwic3ltYm9sXCI9PXR5cGVvZiBlLmFzeW5jSXRlcmF0b3ImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUsZS5hc3luY0l0ZXJhdG9yLHt2YWx1ZTpSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUudmFsdWVzLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pO2NvbnN0IGVyPWU9PmUuYnl0ZUxlbmd0aDtuKGVyLFwic2l6ZVwiKTtjbGFzcyBCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5e2NvbnN0cnVjdG9yKGUpeyQoZSwxLFwiQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneVwiKSxlPVp0KGUsXCJGaXJzdCBwYXJhbWV0ZXJcIiksdGhpcy5fYnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcms9ZS5oaWdoV2F0ZXJNYXJrfWdldCBoaWdoV2F0ZXJNYXJrKCl7aWYoIXJyKHRoaXMpKXRocm93IHRyKFwiaGlnaFdhdGVyTWFya1wiKTtyZXR1cm4gdGhpcy5fYnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcmt9Z2V0IHNpemUoKXtpZighcnIodGhpcykpdGhyb3cgdHIoXCJzaXplXCIpO3JldHVybiBlcn19ZnVuY3Rpb24gdHIoZSl7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kucHJvdG90eXBlLiR7ZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lgKX1mdW5jdGlvbiBycihlKXtyZXR1cm4hIXIoZSkmJighIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiX2J5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrXCIpJiZlIGluc3RhbmNlb2YgQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneSl9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUse2hpZ2hXYXRlck1hcms6e2VudW1lcmFibGU6ITB9LHNpemU6e2VudW1lcmFibGU6ITB9fSksXCJzeW1ib2xcIj09dHlwZW9mIGUudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5LnByb3RvdHlwZSxlLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIkJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lcIixjb25maWd1cmFibGU6ITB9KTtjb25zdCBvcj0oKT0+MTtuKG9yLFwic2l6ZVwiKTtjbGFzcyBDb3VudFF1ZXVpbmdTdHJhdGVneXtjb25zdHJ1Y3RvcihlKXskKGUsMSxcIkNvdW50UXVldWluZ1N0cmF0ZWd5XCIpLGU9WnQoZSxcIkZpcnN0IHBhcmFtZXRlclwiKSx0aGlzLl9jb3VudFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcms9ZS5oaWdoV2F0ZXJNYXJrfWdldCBoaWdoV2F0ZXJNYXJrKCl7aWYoIWFyKHRoaXMpKXRocm93IG5yKFwiaGlnaFdhdGVyTWFya1wiKTtyZXR1cm4gdGhpcy5fY291bnRRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrfWdldCBzaXplKCl7aWYoIWFyKHRoaXMpKXRocm93IG5yKFwic2l6ZVwiKTtyZXR1cm4gb3J9fWZ1bmN0aW9uIG5yKGUpe3JldHVybiBuZXcgVHlwZUVycm9yKGBDb3VudFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUuJHtlfSBjYW4gb25seSBiZSB1c2VkIG9uIGEgQ291bnRRdWV1aW5nU3RyYXRlZ3lgKX1mdW5jdGlvbiBhcihlKXtyZXR1cm4hIXIoZSkmJighIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiX2NvdW50UXVldWluZ1N0cmF0ZWd5SGlnaFdhdGVyTWFya1wiKSYmZSBpbnN0YW5jZW9mIENvdW50UXVldWluZ1N0cmF0ZWd5KX1mdW5jdGlvbiBpcihlLHQscil7cmV0dXJuIEkoZSxyKSxyPT53KGUsdCxbcl0pfWZ1bmN0aW9uIGxyKGUsdCxyKXtyZXR1cm4gSShlLHIpLHI9PmcoZSx0LFtyXSl9ZnVuY3Rpb24gc3IoZSx0LHIpe3JldHVybiBJKGUsciksKHIsbyk9PncoZSx0LFtyLG9dKX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDb3VudFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUse2hpZ2hXYXRlck1hcms6e2VudW1lcmFibGU6ITB9LHNpemU6e2VudW1lcmFibGU6ITB9fSksXCJzeW1ib2xcIj09dHlwZW9mIGUudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb3VudFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUsZS50b1N0cmluZ1RhZyx7dmFsdWU6XCJDb3VudFF1ZXVpbmdTdHJhdGVneVwiLGNvbmZpZ3VyYWJsZTohMH0pO2NsYXNzIFRyYW5zZm9ybVN0cmVhbXtjb25zdHJ1Y3RvcihlPXt9LHQ9e30scj17fSl7dm9pZCAwPT09ZSYmKGU9bnVsbCk7Y29uc3Qgbz1ZZSh0LFwiU2Vjb25kIHBhcmFtZXRlclwiKSxuPVllKHIsXCJUaGlyZCBwYXJhbWV0ZXJcIiksYT1mdW5jdGlvbihlLHQpe0YoZSx0KTtjb25zdCByPW51bGw9PWU/dm9pZCAwOmUuZmx1c2gsbz1udWxsPT1lP3ZvaWQgMDplLnJlYWRhYmxlVHlwZSxuPW51bGw9PWU/dm9pZCAwOmUuc3RhcnQsYT1udWxsPT1lP3ZvaWQgMDplLnRyYW5zZm9ybSxpPW51bGw9PWU/dm9pZCAwOmUud3JpdGFibGVUeXBlO3JldHVybntmbHVzaDp2b2lkIDA9PT1yP3ZvaWQgMDppcihyLGUsYCR7dH0gaGFzIG1lbWJlciAnZmx1c2gnIHRoYXRgKSxyZWFkYWJsZVR5cGU6byxzdGFydDp2b2lkIDA9PT1uP3ZvaWQgMDpscihuLGUsYCR7dH0gaGFzIG1lbWJlciAnc3RhcnQnIHRoYXRgKSx0cmFuc2Zvcm06dm9pZCAwPT09YT92b2lkIDA6c3IoYSxlLGAke3R9IGhhcyBtZW1iZXIgJ3RyYW5zZm9ybScgdGhhdGApLHdyaXRhYmxlVHlwZTppfX0oZSxcIkZpcnN0IHBhcmFtZXRlclwiKTtpZih2b2lkIDAhPT1hLnJlYWRhYmxlVHlwZSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgcmVhZGFibGVUeXBlIHNwZWNpZmllZFwiKTtpZih2b2lkIDAhPT1hLndyaXRhYmxlVHlwZSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgd3JpdGFibGVUeXBlIHNwZWNpZmllZFwiKTtjb25zdCBpPSRlKG4sMCksbD1NZShuKSxzPSRlKG8sMSksZj1NZShvKTtsZXQgYjshZnVuY3Rpb24oZSx0LHIsbyxuLGEpe2Z1bmN0aW9uIGkoKXtyZXR1cm4gdH1mdW5jdGlvbiBsKHQpe3JldHVybiBmdW5jdGlvbihlLHQpe2NvbnN0IHI9ZS5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcjtpZihlLl9iYWNrcHJlc3N1cmUpe3JldHVybiBwKGUuX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2UsKCgpPT57aWYoXCJlcnJvcmluZ1wiPT09KEdlKGUuX3dyaXRhYmxlKT9lLl93cml0YWJsZS5fc3RhdGU6ZS5fd3JpdGFibGVTdGF0ZSkpdGhyb3cgR2UoZS5fd3JpdGFibGUpP2UuX3dyaXRhYmxlLl9zdG9yZWRFcnJvcjplLl93cml0YWJsZVN0b3JlZEVycm9yO3JldHVybiBwcihyLHQpfSkpfXJldHVybiBwcihyLHQpfShlLHQpfWZ1bmN0aW9uIHModCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGNyKGUsdCksYyh2b2lkIDApfShlLHQpfWZ1bmN0aW9uIHUoKXtyZXR1cm4gZnVuY3Rpb24oZSl7Y29uc3QgdD1lLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyLHI9dC5fZmx1c2hBbGdvcml0aG0oKTtyZXR1cm4gaHIodCkscChyLCgoKT0+e2lmKFwiZXJyb3JlZFwiPT09ZS5fcmVhZGFibGVTdGF0ZSl0aHJvdyBlLl9yZWFkYWJsZVN0b3JlZEVycm9yO2dyKGUpJiZ3cihlKX0pLCh0PT57dGhyb3cgY3IoZSx0KSxlLl9yZWFkYWJsZVN0b3JlZEVycm9yfSkpfShlKX1mdW5jdGlvbiBkKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmcihlLCExKSxlLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlfShlKX1mdW5jdGlvbiBmKHQpe3JldHVybiBkcihlLHQpLGModm9pZCAwKX1lLl93cml0YWJsZVN0YXRlPVwid3JpdGFibGVcIixlLl93cml0YWJsZVN0b3JlZEVycm9yPXZvaWQgMCxlLl93cml0YWJsZUhhc0luRmxpZ2h0T3BlcmF0aW9uPSExLGUuX3dyaXRhYmxlU3RhcnRlZD0hMSxlLl93cml0YWJsZT1mdW5jdGlvbihlLHQscixvLG4sYSxpKXtyZXR1cm4gbmV3IFdyaXRhYmxlU3RyZWFtKHtzdGFydChyKXtlLl93cml0YWJsZUNvbnRyb2xsZXI9cjt0cnl7Y29uc3QgdD1yLnNpZ25hbDt2b2lkIDAhPT10JiZ0LmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCgoKT0+e1wid3JpdGFibGVcIj09PWUuX3dyaXRhYmxlU3RhdGUmJihlLl93cml0YWJsZVN0YXRlPVwiZXJyb3JpbmdcIix0LnJlYXNvbiYmKGUuX3dyaXRhYmxlU3RvcmVkRXJyb3I9dC5yZWFzb24pKX0pKX1jYXRjaChlKXt9cmV0dXJuIHAodCgpLCgoKT0+KGUuX3dyaXRhYmxlU3RhcnRlZD0hMCxDcihlKSxudWxsKSksKHQ9Pnt0aHJvdyBlLl93cml0YWJsZVN0YXJ0ZWQ9ITAsUnIoZSx0KSx0fSkpfSx3cml0ZTp0PT4oZnVuY3Rpb24oZSl7ZS5fd3JpdGFibGVIYXNJbkZsaWdodE9wZXJhdGlvbj0hMH0oZSkscChyKHQpLCgoKT0+KGZ1bmN0aW9uKGUpe2UuX3dyaXRhYmxlSGFzSW5GbGlnaHRPcGVyYXRpb249ITF9KGUpLENyKGUpLG51bGwpKSwodD0+e3Rocm93IGZ1bmN0aW9uKGUsdCl7ZS5fd3JpdGFibGVIYXNJbkZsaWdodE9wZXJhdGlvbj0hMSxScihlLHQpfShlLHQpLHR9KSkpLGNsb3NlOigpPT4oZnVuY3Rpb24oZSl7ZS5fd3JpdGFibGVIYXNJbkZsaWdodE9wZXJhdGlvbj0hMH0oZSkscChvKCksKCgpPT4oZnVuY3Rpb24oZSl7ZS5fd3JpdGFibGVIYXNJbkZsaWdodE9wZXJhdGlvbj0hMTtcImVycm9yaW5nXCI9PT1lLl93cml0YWJsZVN0YXRlJiYoZS5fd3JpdGFibGVTdG9yZWRFcnJvcj12b2lkIDApO2UuX3dyaXRhYmxlU3RhdGU9XCJjbG9zZWRcIn0oZSksbnVsbCkpLCh0PT57dGhyb3cgZnVuY3Rpb24oZSx0KXtlLl93cml0YWJsZUhhc0luRmxpZ2h0T3BlcmF0aW9uPSExLGUuX3dyaXRhYmxlU3RhdGUsUnIoZSx0KX0oZSx0KSx0fSkpKSxhYm9ydDp0PT4oZS5fd3JpdGFibGVTdGF0ZT1cImVycm9yZWRcIixlLl93cml0YWJsZVN0b3JlZEVycm9yPXQsbih0KSl9LHtoaWdoV2F0ZXJNYXJrOmEsc2l6ZTppfSl9KGUsaSxsLHUscyxyLG8pLGUuX3JlYWRhYmxlU3RhdGU9XCJyZWFkYWJsZVwiLGUuX3JlYWRhYmxlU3RvcmVkRXJyb3I9dm9pZCAwLGUuX3JlYWRhYmxlQ2xvc2VSZXF1ZXN0ZWQ9ITEsZS5fcmVhZGFibGVQdWxsaW5nPSExLGUuX3JlYWRhYmxlPWZ1bmN0aW9uKGUsdCxyLG8sbixhKXtyZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtzdGFydDpyPT4oZS5fcmVhZGFibGVDb250cm9sbGVyPXIsdCgpLmNhdGNoKCh0PT57U3IoZSx0KX0pKSkscHVsbDooKT0+KGUuX3JlYWRhYmxlUHVsbGluZz0hMCxyKCkuY2F0Y2goKHQ9PntTcihlLHQpfSkpKSxjYW5jZWw6dD0+KGUuX3JlYWRhYmxlU3RhdGU9XCJjbG9zZWRcIixvKHQpKX0se2hpZ2hXYXRlck1hcms6bixzaXplOmF9KX0oZSxpLGQsZixuLGEpLGUuX2JhY2twcmVzc3VyZT12b2lkIDAsZS5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZT12b2lkIDAsZS5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxmcihlLCEwKSxlLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyPXZvaWQgMH0odGhpcyx1KChlPT57Yj1lfSkpLHMsZixpLGwpLGZ1bmN0aW9uKGUsdCl7Y29uc3Qgcj1PYmplY3QuY3JlYXRlKFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZSk7bGV0IG8sbjtvPXZvaWQgMCE9PXQudHJhbnNmb3JtP2U9PnQudHJhbnNmb3JtKGUscik6ZT0+e3RyeXtyZXR1cm4gX3IocixlKSxjKHZvaWQgMCl9Y2F0Y2goZSl7cmV0dXJuIGQoZSl9fTtuPXZvaWQgMCE9PXQuZmx1c2g/KCk9PnQuZmx1c2gocik6KCk9PmModm9pZCAwKTshZnVuY3Rpb24oZSx0LHIsbyl7dC5fY29udHJvbGxlZFRyYW5zZm9ybVN0cmVhbT1lLGUuX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXI9dCx0Ll90cmFuc2Zvcm1BbGdvcml0aG09cix0Ll9mbHVzaEFsZ29yaXRobT1vfShlLHIsbyxuKX0odGhpcyxhKSx2b2lkIDAhPT1hLnN0YXJ0P2IoYS5zdGFydCh0aGlzLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyKSk6Yih2b2lkIDApfWdldCByZWFkYWJsZSgpe2lmKCF1cih0aGlzKSl0aHJvdyB5cihcInJlYWRhYmxlXCIpO3JldHVybiB0aGlzLl9yZWFkYWJsZX1nZXQgd3JpdGFibGUoKXtpZighdXIodGhpcykpdGhyb3cgeXIoXCJ3cml0YWJsZVwiKTtyZXR1cm4gdGhpcy5fd3JpdGFibGV9fWZ1bmN0aW9uIHVyKGUpe3JldHVybiEhcihlKSYmKCEhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJfdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlclwiKSYmZSBpbnN0YW5jZW9mIFRyYW5zZm9ybVN0cmVhbSl9ZnVuY3Rpb24gY3IoZSx0KXtTcihlLHQpLGRyKGUsdCl9ZnVuY3Rpb24gZHIoZSx0KXtocihlLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyKSxmdW5jdGlvbihlLHQpe2UuX3dyaXRhYmxlQ29udHJvbGxlci5lcnJvcih0KTtcIndyaXRhYmxlXCI9PT1lLl93cml0YWJsZVN0YXRlJiZUcihlLHQpfShlLHQpLGUuX2JhY2twcmVzc3VyZSYmZnIoZSwhMSl9ZnVuY3Rpb24gZnIoZSx0KXt2b2lkIDAhPT1lLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlJiZlLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlX3Jlc29sdmUoKSxlLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlPXUoKHQ9PntlLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlX3Jlc29sdmU9dH0pKSxlLl9iYWNrcHJlc3N1cmU9dH1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhUcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlLHtyZWFkYWJsZTp7ZW51bWVyYWJsZTohMH0sd3JpdGFibGU6e2VudW1lcmFibGU6ITB9fSksXCJzeW1ib2xcIj09dHlwZW9mIGUudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlLGUudG9TdHJpbmdUYWcse3ZhbHVlOlwiVHJhbnNmb3JtU3RyZWFtXCIsY29uZmlndXJhYmxlOiEwfSk7Y2xhc3MgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJ7Y29uc3RydWN0b3IoKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBjb25zdHJ1Y3RvclwiKX1nZXQgZGVzaXJlZFNpemUoKXtpZighYnIodGhpcykpdGhyb3cgbXIoXCJkZXNpcmVkU2l6ZVwiKTtyZXR1cm4gdnIodGhpcy5fY29udHJvbGxlZFRyYW5zZm9ybVN0cmVhbSl9ZW5xdWV1ZShlKXtpZighYnIodGhpcykpdGhyb3cgbXIoXCJlbnF1ZXVlXCIpO19yKHRoaXMsZSl9ZXJyb3IoZSl7aWYoIWJyKHRoaXMpKXRocm93IG1yKFwiZXJyb3JcIik7dmFyIHQ7dD1lLGNyKHRoaXMuX2NvbnRyb2xsZWRUcmFuc2Zvcm1TdHJlYW0sdCl9dGVybWluYXRlKCl7aWYoIWJyKHRoaXMpKXRocm93IG1yKFwidGVybWluYXRlXCIpOyFmdW5jdGlvbihlKXtjb25zdCB0PWUuX2NvbnRyb2xsZWRUcmFuc2Zvcm1TdHJlYW07Z3IodCkmJndyKHQpO2NvbnN0IHI9bmV3IFR5cGVFcnJvcihcIlRyYW5zZm9ybVN0cmVhbSB0ZXJtaW5hdGVkXCIpO2RyKHQscil9KHRoaXMpfX1mdW5jdGlvbiBicihlKXtyZXR1cm4hIXIoZSkmJighIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiX2NvbnRyb2xsZWRUcmFuc2Zvcm1TdHJlYW1cIikmJmUgaW5zdGFuY2VvZiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcil9ZnVuY3Rpb24gaHIoZSl7ZS5fdHJhbnNmb3JtQWxnb3JpdGhtPXZvaWQgMCxlLl9mbHVzaEFsZ29yaXRobT12b2lkIDB9ZnVuY3Rpb24gX3IoZSx0KXtjb25zdCByPWUuX2NvbnRyb2xsZWRUcmFuc2Zvcm1TdHJlYW07aWYoIWdyKHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJSZWFkYWJsZSBzaWRlIGlzIG5vdCBpbiBhIHN0YXRlIHRoYXQgcGVybWl0cyBlbnF1ZXVlXCIpO3RyeXshZnVuY3Rpb24oZSx0KXtlLl9yZWFkYWJsZVB1bGxpbmc9ITE7dHJ5e2UuX3JlYWRhYmxlQ29udHJvbGxlci5lbnF1ZXVlKHQpfWNhdGNoKHQpe3Rocm93IFNyKGUsdCksdH19KHIsdCl9Y2F0Y2goZSl7dGhyb3cgZHIocixlKSxyLl9yZWFkYWJsZVN0b3JlZEVycm9yfWNvbnN0IG89ZnVuY3Rpb24oZSl7cmV0dXJuIWZ1bmN0aW9uKGUpe2lmKCFncihlKSlyZXR1cm4hMTtpZihlLl9yZWFkYWJsZVB1bGxpbmcpcmV0dXJuITA7aWYodnIoZSk+MClyZXR1cm4hMDtyZXR1cm4hMX0oZSl9KHIpO28hPT1yLl9iYWNrcHJlc3N1cmUmJmZyKHIsITApfWZ1bmN0aW9uIHByKGUsdCl7cmV0dXJuIHAoZS5fdHJhbnNmb3JtQWxnb3JpdGhtKHQpLHZvaWQgMCwodD0+e3Rocm93IGNyKGUuX2NvbnRyb2xsZWRUcmFuc2Zvcm1TdHJlYW0sdCksdH0pKX1mdW5jdGlvbiBtcihlKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLiR7ZX0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyYCl9ZnVuY3Rpb24geXIoZSl7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUuJHtlfSBjYW4gb25seSBiZSB1c2VkIG9uIGEgVHJhbnNmb3JtU3RyZWFtYCl9ZnVuY3Rpb24gZ3IoZSl7cmV0dXJuIWUuX3JlYWRhYmxlQ2xvc2VSZXF1ZXN0ZWQmJlwicmVhZGFibGVcIj09PWUuX3JlYWRhYmxlU3RhdGV9ZnVuY3Rpb24gd3IoZSl7ZS5fcmVhZGFibGVTdGF0ZT1cImNsb3NlZFwiLGUuX3JlYWRhYmxlQ2xvc2VSZXF1ZXN0ZWQ9ITAsZS5fcmVhZGFibGVDb250cm9sbGVyLmNsb3NlKCl9ZnVuY3Rpb24gU3IoZSx0KXtcInJlYWRhYmxlXCI9PT1lLl9yZWFkYWJsZVN0YXRlJiYoZS5fcmVhZGFibGVTdGF0ZT1cImVycm9yZWRcIixlLl9yZWFkYWJsZVN0b3JlZEVycm9yPXQpLGUuX3JlYWRhYmxlQ29udHJvbGxlci5lcnJvcih0KX1mdW5jdGlvbiB2cihlKXtyZXR1cm4gZS5fcmVhZGFibGVDb250cm9sbGVyLmRlc2lyZWRTaXplfWZ1bmN0aW9uIFJyKGUsdCl7XCJ3cml0YWJsZVwiIT09ZS5fd3JpdGFibGVTdGF0ZT9xcihlKTpUcihlLHQpfWZ1bmN0aW9uIFRyKGUsdCl7ZS5fd3JpdGFibGVTdGF0ZT1cImVycm9yaW5nXCIsZS5fd3JpdGFibGVTdG9yZWRFcnJvcj10LCFmdW5jdGlvbihlKXtyZXR1cm4gZS5fd3JpdGFibGVIYXNJbkZsaWdodE9wZXJhdGlvbn0oZSkmJmUuX3dyaXRhYmxlU3RhcnRlZCYmcXIoZSl9ZnVuY3Rpb24gcXIoZSl7ZS5fd3JpdGFibGVTdGF0ZT1cImVycm9yZWRcIn1mdW5jdGlvbiBDcihlKXtcImVycm9yaW5nXCI9PT1lLl93cml0YWJsZVN0YXRlJiZxcihlKX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUse2VucXVldWU6e2VudW1lcmFibGU6ITB9LGVycm9yOntlbnVtZXJhYmxlOiEwfSx0ZXJtaW5hdGU6e2VudW1lcmFibGU6ITB9LGRlc2lyZWRTaXplOntlbnVtZXJhYmxlOiEwfX0pLG4oVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLmVucXVldWUsXCJlbnF1ZXVlXCIpLG4oVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLmVycm9yLFwiZXJyb3JcIiksbihUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUudGVybWluYXRlLFwidGVybWluYXRlXCIpLFwic3ltYm9sXCI9PXR5cGVvZiBlLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLGUudG9TdHJpbmdUYWcse3ZhbHVlOlwiVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJcIixjb25maWd1cmFibGU6ITB9KTtleHBvcnR7Qnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneSxDb3VudFF1ZXVpbmdTdHJhdGVneSxSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLFJlYWRhYmxlU3RyZWFtLFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcixSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIsUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLFRyYW5zZm9ybVN0cmVhbSxUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcixXcml0YWJsZVN0cmVhbSxXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcn07XG4iXSwibmFtZXMiOlsiZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidCIsInIiLCJvIiwibiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJhIiwiUHJvbWlzZSIsImkiLCJwcm90b3R5cGUiLCJ0aGVuIiwibCIsInJlc29sdmUiLCJiaW5kIiwicyIsInJlamVjdCIsInUiLCJjIiwiZCIsImYiLCJjYWxsIiwiYiIsImgiLCJfIiwicCIsIm0iLCJ5IiwicXVldWVNaWNyb3Rhc2siLCJnIiwiVHlwZUVycm9yIiwiRnVuY3Rpb24iLCJhcHBseSIsInciLCJTIiwiY29uc3RydWN0b3IiLCJfY3Vyc29yIiwiX3NpemUiLCJfZnJvbnQiLCJfZWxlbWVudHMiLCJfbmV4dCIsIl9iYWNrIiwibGVuZ3RoIiwicHVzaCIsInNoaWZ0IiwiZm9yRWFjaCIsInBlZWsiLCJ2IiwiUiIsIlQiLCJxIiwiQyIsIkUiLCJfb3duZXJSZWFkYWJsZVN0cmVhbSIsIl9yZWFkZXIiLCJfc3RhdGUiLCJPIiwiaiIsIkIiLCJfc3RvcmVkRXJyb3IiLCJQIiwiR3QiLCJXIiwiQSIsIl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIiLCJrIiwiX2Nsb3NlZFByb21pc2UiLCJfY2xvc2VkUHJvbWlzZV9yZXNvbHZlIiwiX2Nsb3NlZFByb21pc2VfcmVqZWN0IiwieiIsIk51bWJlciIsImlzRmluaXRlIiwiTCIsIk1hdGgiLCJ0cnVuYyIsImNlaWwiLCJmbG9vciIsIkYiLCJJIiwiRCIsIiQiLCJNIiwiWSIsIlEiLCJOIiwiTUFYX1NBRkVfSU5URUdFUiIsIkgiLCJnZXRSZWFkZXIiLCJsb2NrZWQiLCJ4IiwiZ2V0V3JpdGVyIiwiViIsIlZ0IiwiVSIsIl9yZWFkUmVxdWVzdHMiLCJHIiwiX2Nsb3NlU3RlcHMiLCJfY2h1bmtTdGVwcyIsIlgiLCJKIiwiSyIsIlJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlciIsIlV0IiwiY2xvc2VkIiwiZWUiLCJjYW5jZWwiLCJyZWFkIiwiX2Rpc3R1cmJlZCIsIl9lcnJvclN0ZXBzIiwiZG9uZSIsInJlbGVhc2VMb2NrIiwiWiIsImhhc093blByb3BlcnR5IiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1lcmFibGUiLCJ0b1N0cmluZ1RhZyIsInRlIiwiX29uZ29pbmdQcm9taXNlIiwiX2lzRmluaXNoZWQiLCJfcHJldmVudENhbmNlbCIsIm5leHQiLCJfbmV4dFN0ZXBzIiwicmV0dXJuIiwiX3JldHVyblN0ZXBzIiwicmUiLCJvZSIsIl9hc3luY0l0ZXJhdG9ySW1wbCIsIm5lIiwiYXN5bmNJdGVyYXRvciIsIndyaXRhYmxlIiwiYWUiLCJpc05hTiIsImllIiwiVWludDhBcnJheSIsInNldCIsImxlIiwic2xpY2UiLCJBcnJheUJ1ZmZlciIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwic2UiLCJfcXVldWUiLCJfcXVldWVUb3RhbFNpemUiLCJzaXplIiwidWUiLCJSYW5nZUVycm9yIiwiY2UiLCJSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0IiwidmlldyIsImZlIiwiQmUiLCJfdmlldyIsInJlc3BvbmQiLCJfYXNzb2NpYXRlZFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIiLCJfcGVuZGluZ1B1bGxJbnRvcyIsIl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtIiwiYnl0ZXNGaWxsZWQiLCJxZSIsInJlc3BvbmRXaXRoTmV3VmlldyIsImlzVmlldyIsImJ1ZmZlckJ5dGVMZW5ndGgiLCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyIiwiYnlvYlJlcXVlc3QiLCJkZSIsIkFlIiwiX2J5b2JSZXF1ZXN0IiwiY3JlYXRlIiwiZGVzaXJlZFNpemUiLCJrZSIsImNsb3NlIiwiX2Nsb3NlUmVxdWVzdGVkIiwiUGUiLCJFZSIsIlh0IiwiZW5xdWV1ZSIsIlJlIiwicmVhZGVyVHlwZSIsImdlIiwiV2UiLCJtZSIsIkNlIiwiTGUiLCJUZSIsImJlIiwiZXJyb3IiLCJoZSIsIl9jYW5jZWxBbGdvcml0aG0iLCJfYXV0b0FsbG9jYXRlQ2h1bmtTaXplIiwiZWxlbWVudFNpemUiLCJ2aWV3Q29uc3RydWN0b3IiLCJfc3RhcnRlZCIsInplIiwiX3B1bGxpbmciLCJfcHVsbEFnYWluIiwiX3B1bGxBbGdvcml0aG0iLCJfZSIsInBlIiwiX3JlYWRJbnRvUmVxdWVzdHMiLCJ5ZSIsIndlIiwibWluIiwiU2UiLCJ2ZSIsIkp0IiwiX3N0cmF0ZWd5SFdNIiwiT2UiLCJzdGFydCIsInB1bGwiLCJhdXRvQWxsb2NhdGVDaHVua1NpemUiLCJqZSIsIkZlIiwiUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyIiwiRGUiLCJEYXRhVmlldyIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiSWUiLCIkZSIsImhpZ2hXYXRlck1hcmsiLCJNZSIsIlllIiwiUWUiLCJOZSIsIkhlIiwieGUiLCJWZSIsIlVlIiwiQWJvcnRDb250cm9sbGVyIiwiV3JpdGFibGVTdHJlYW0iLCJhYm9ydCIsInR5cGUiLCJ3cml0ZSIsIl93cml0ZXIiLCJfd3JpdGFibGVTdHJlYW1Db250cm9sbGVyIiwiX3dyaXRlUmVxdWVzdHMiLCJfaW5GbGlnaHRXcml0ZVJlcXVlc3QiLCJfY2xvc2VSZXF1ZXN0IiwiX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0IiwiX3BlbmRpbmdBYm9ydFJlcXVlc3QiLCJfYmFja3ByZXNzdXJlIiwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlciIsIl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW0iLCJfYWJvcnRSZWFzb24iLCJfYWJvcnRDb250cm9sbGVyIiwiX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobSIsIl93cml0ZUFsZ29yaXRobSIsIl9jbG9zZUFsZ29yaXRobSIsIl9hYm9ydEFsZ29yaXRobSIsImJ0IiwibnQiLCJkdCIsIlplIiwiR2UiLCJfdCIsIlhlIiwiSmUiLCJydCIsIktlIiwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyIiwiX3Byb21pc2UiLCJfcmVzb2x2ZSIsIl9yZWplY3QiLCJfcmVhc29uIiwiX3dhc0FscmVhZHlFcnJvcmluZyIsImV0IiwiRXQiLCJsdCIsInR0IiwiaXQiLCJvdCIsIlN0IiwiUnQiLCJfb3duZXJXcml0YWJsZVN0cmVhbSIsInF0IiwiZ3QiLCJUdCIsInZ0Iiwid3QiLCJhdCIsIm10IiwieXQiLCJjdCIsInJlYWR5IiwiX3JlYWR5UHJvbWlzZSIsIl9jbG9zZWRQcm9taXNlU3RhdGUiLCJmdCIsIl9yZWFkeVByb21pc2VTdGF0ZSIsIkN0IiwiYWJvcnRSZWFzb24iLCJzdCIsInB0Iiwic2lnbmFsIiwiaHQiLCJ1dCIsIl9yZWFkeVByb21pc2VfcmVzb2x2ZSIsIl9yZWFkeVByb21pc2VfcmVqZWN0IiwiUHQiLCJET01FeGNlcHRpb24iLCJXdCIsIm1lc3NhZ2UiLCJuYW1lIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImt0IiwicmVhc29uIiwiYWxsIiwibWFwIiwiYWJvcnRlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiT3QiLCJtb2RlIiwiUmVhZGFibGVTdHJlYW0iLCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyIiwiQnQiLCJEdCIsIkx0IiwiRnQiLCJfY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtIiwianQiLCJ6dCIsIkF0IiwiSXQiLCIkdCIsIk10IiwiWXQiLCJRdCIsIk50IiwiSHQiLCJwcmV2ZW50QWJvcnQiLCJwcmV2ZW50Q2FuY2VsIiwicHJldmVudENsb3NlIiwiQm9vbGVhbiIsInh0IiwicmVhZGFibGUiLCJLdCIsInBpcGVUaHJvdWdoIiwicGlwZVRvIiwidGVlIiwidmFsdWVzIiwiWnQiLCJlciIsIkJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3kiLCJfYnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcmsiLCJyciIsInRyIiwib3IiLCJDb3VudFF1ZXVpbmdTdHJhdGVneSIsIl9jb3VudFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcmsiLCJhciIsIm5yIiwiaXIiLCJsciIsInNyIiwiVHJhbnNmb3JtU3RyZWFtIiwiZmx1c2giLCJyZWFkYWJsZVR5cGUiLCJ0cmFuc2Zvcm0iLCJ3cml0YWJsZVR5cGUiLCJfdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlciIsIl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlIiwiX3dyaXRhYmxlIiwiX3dyaXRhYmxlU3RhdGUiLCJfd3JpdGFibGVTdG9yZWRFcnJvciIsInByIiwiY3IiLCJfZmx1c2hBbGdvcml0aG0iLCJociIsIl9yZWFkYWJsZVN0YXRlIiwiX3JlYWRhYmxlU3RvcmVkRXJyb3IiLCJnciIsIndyIiwiZnIiLCJkciIsIl93cml0YWJsZUhhc0luRmxpZ2h0T3BlcmF0aW9uIiwiX3dyaXRhYmxlU3RhcnRlZCIsIl93cml0YWJsZUNvbnRyb2xsZXIiLCJDciIsIlJyIiwiX3JlYWRhYmxlQ2xvc2VSZXF1ZXN0ZWQiLCJfcmVhZGFibGVQdWxsaW5nIiwiX3JlYWRhYmxlIiwiX3JlYWRhYmxlQ29udHJvbGxlciIsImNhdGNoIiwiU3IiLCJfYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZV9yZXNvbHZlIiwiVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIiLCJfciIsIl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtIiwiX3RyYW5zZm9ybUFsZ29yaXRobSIsInVyIiwieXIiLCJUciIsImJyIiwibXIiLCJ2ciIsInRlcm1pbmF0ZSIsInFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/web-streams-polyfill@4.0.0-beta.3/node_modules/web-streams-polyfill/dist/ponyfill.mjs\n");

/***/ })

};
;